### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.certificates.Poller"
  id: "Poller"
  parent: "com.azure.security.keyvault.certificates"
  children:
  - "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>)"
  - "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  - "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>)"
  - "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  - "com.azure.security.keyvault.certificates.Poller.block()"
  - "com.azure.security.keyvault.certificates.Poller.block(java.time.Duration)"
  - "com.azure.security.keyvault.certificates.Poller.blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus)"
  - "com.azure.security.keyvault.certificates.Poller.blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus,java.time.Duration)"
  - "com.azure.security.keyvault.certificates.Poller.cancelOperation()"
  - "com.azure.security.keyvault.certificates.Poller.getObserver()"
  - "com.azure.security.keyvault.certificates.Poller.getStatus()"
  - "com.azure.security.keyvault.certificates.Poller.isAutoPollingEnabled()"
  - "com.azure.security.keyvault.certificates.Poller.poll()"
  - "com.azure.security.keyvault.certificates.Poller.result()"
  - "com.azure.security.keyvault.certificates.Poller.setAutoPollingEnabled(boolean)"
  langs:
  - "java"
  name: "Poller<T,R>"
  nameWithType: "Poller<T,R>"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>"
  type: "Class"
  package: "com.azure.security.keyvault.certificates"
  summary: "This class offers API that simplifies the task of executing long-running operations against Azure service. The <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> consist of poll operation, cancel operation if supported by Azure service and polling interval.\n\nIt provides the following functionality:\n\n *  Querying the current state of long-running operations.\n *  Requesting an asynchronous notification for long-running operation's state.\n *  Cancelling the long-running operation if cancellation is supported by the service.\n *  Triggering a poll operation manually.\n *  Enable/Disable auto-polling.\n\n**Auto Polling**\n\nAuto-polling is enabled by-default. It means that the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> starts polling as soon as its instance is created. The <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will transparently call the poll operation every polling cycle and track the state of the long-running operation. Azure services can return <xref uid=\"\" data-throw-if-not-resolved=\"false\">PollResponse#getRetryAfter()</xref> to override the `Poller.pollInterval` defined in the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref>. The <xref uid=\"com.azure.security.keyvault.certificates.Poller.getStatus()\" data-throw-if-not-resolved=\"false\">Poller#getStatus()</xref> represents the status returned by the successful long-running operation at the time the last auto-polling or last manual polling, whichever happened most recently.\n\n**Disable Auto Polling**\n\nFor those scenarios which require manual control of the polling cycle, disable auto-poling by calling `setAutoPollingEnabled#false` and perform manual poll by invoking <xref uid=\"com.azure.security.keyvault.certificates.Poller.poll()\" data-throw-if-not-resolved=\"false\">Poller#poll()</xref> function. It will call poll operation once and update the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> with the latest status.\n\nWhen auto-polling is disabled, the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will not update its status or other information, unless manual polling is triggered by calling <xref uid=\"com.azure.security.keyvault.certificates.Poller.poll()\" data-throw-if-not-resolved=\"false\">Poller#poll()</xref> function.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will stop polling when the long-running operation is complete or it is disabled. The polling is considered complete based on status defined in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>."
  syntax:
    content: "public class Poller<T,R>"
    typeParameters:
    - id: "T"
    - id: "R"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>)"
  id: "Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation)"
  nameWithType: "Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation)"
  overload: "com.azure.security.keyvault.certificates.Poller.Poller*"
  type: "Constructor"
  package: "com.azure.security.keyvault.certificates"
  summary: "Create a <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance with poll interval and poll operation. The polling starts immediately by invoking `pollOperation`. The next poll cycle will be defined by `retryAfter` value in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. In absence of `retryAfter`, the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will use `pollInterval`."
  syntax:
    content: "public Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation)"
    parameters:
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Not-null and greater than zero poll interval."
    - id: "pollOperation"
      type: "java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>"
      description: "The polling operation to be called by the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance. This is a callback into the client library,\n which must never return <code>null</code>, and which must always have a non-null status.\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> returned from poll operation should never return <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>.If any unexpected scenario happens in poll operation,\n it should be handled by client library and return a valid <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. However if poll operation returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>,\n the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will disregard that and continue to poll."
- uid: "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  id: "Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  nameWithType: "Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  overload: "com.azure.security.keyvault.certificates.Poller.Poller*"
  type: "Constructor"
  package: "com.azure.security.keyvault.certificates"
  summary: "Create a <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance with poll interval, poll operation and cancel operation. The polling starts immediately by invoking `pollOperation`. The next poll cycle will be defined by retryAfter value in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. In absence of <xref uid=\"\" data-throw-if-not-resolved=\"false\">PollResponse#getRetryAfter()</xref>, the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will use `pollInterval`."
  syntax:
    content: "public Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
    parameters:
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Not-null and greater than zero poll interval."
    - id: "pollOperation"
      type: "java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>"
      description: "The polling operation to be called by the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance. This is a callback into the client library,\n which must never return <code>null</code>, and which must always have a non-null status.\n<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> returned from poll operation should never return <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>.If any unexpected scenario happens in poll operation,\n it should handle it and return a valid <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. However if poll operation returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>,\n the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will disregard that and continue to poll."
    - id: "fetchResultOperation"
      type: "java.util.function.Supplier<reactor.core.publisher.Mono<R>>"
      description: "the operation to be called to fetch final result after polling has been completed."
    - id: "cancelOperation"
      type: "java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>"
      description: "cancel operation if cancellation is supported by the service. It can be <code>null</code> which will indicate to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref>\n that cancel operation is not supported by Azure service."
- uid: "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>)"
  id: "Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Supplier<Mono<T>> activationOperation)"
  nameWithType: "Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Supplier<Mono<T>> activationOperation)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Supplier<Mono<T>> activationOperation)"
  overload: "com.azure.security.keyvault.certificates.Poller.Poller*"
  type: "Constructor"
  package: "com.azure.security.keyvault.certificates"
  summary: "Create a <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance with poll interval, poll operation and cancel operation. The polling starts immediately by invoking `pollOperation`. The next poll cycle will be defined by retryAfter value in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. In absence of <xref uid=\"\" data-throw-if-not-resolved=\"false\">PollResponse#getRetryAfter()</xref>, the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will use `pollInterval`."
  syntax:
    content: "public Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<R>> fetchResultOperation, Supplier<Mono<T>> activationOperation)"
    parameters:
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Not-null and greater than zero poll interval."
    - id: "pollOperation"
      type: "java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>"
      description: "The polling operation to be called by the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance. This is a callback into the client library,\n which must never return <code>null</code>, and which must always have a non-null status.\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> returned from poll operation should never return <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>.If any unexpected scenario happens in poll operation,\n it should handle it and return a valid <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. However if poll operation returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>,\n the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will disregard that and continue to poll."
    - id: "fetchResultOperation"
      type: "java.util.function.Supplier<reactor.core.publisher.Mono<R>>"
      description: "the operation to be called to fetch final result after polling has been completed."
    - id: "activationOperation"
      type: "java.util.function.Supplier<reactor.core.publisher.Mono<T>>"
      description: "the operation to be called before polling begins. It can be <code>null</code> which will indicate to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref>\n that polling can begin straight away."
- uid: "com.azure.security.keyvault.certificates.Poller.Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  id: "Poller(java.time.Duration,java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>,java.util.function.Supplier<reactor.core.publisher.Mono<T>>,java.util.function.Supplier<reactor.core.publisher.Mono<R>>,java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<T>> activationOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  nameWithType: "Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<T>> activationOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<T>> activationOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
  overload: "com.azure.security.keyvault.certificates.Poller.Poller*"
  type: "Constructor"
  package: "com.azure.security.keyvault.certificates"
  summary: "Create a <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance with poll interval and poll operation. The polling starts immediately by invoking `pollOperation`. The next poll cycle will be defined by `retryAfter` value in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. In absence of `retryAfter`, the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will use `pollInterval`."
  syntax:
    content: "public Poller(Duration pollInterval, Function<PollResponse<T>,Mono<PollResponse<T>>> pollOperation, Supplier<Mono<T>> activationOperation, Supplier<Mono<R>> fetchResultOperation, Consumer<Poller<T,R>> cancelOperation)"
    parameters:
    - id: "pollInterval"
      type: "java.time.Duration"
      description: "Not-null and greater than zero poll interval."
    - id: "pollOperation"
      type: "java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>"
      description: "The polling operation to be called by the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> instance. This is a callback into the client library,\n which must never return <code>null</code>, and which must always have a non-null status.\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> returned from poll operation should never return <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>.If any unexpected scenario happens in poll operation,\n it should be handled by client library and return a valid <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>. However if poll operation returns <xref uid=\"\" data-throw-if-not-resolved=\"false\">Mono#error(Throwable)</xref>,\n the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> will disregard that and continue to poll."
    - id: "activationOperation"
      type: "java.util.function.Supplier<reactor.core.publisher.Mono<T>>"
      description: "the operation to be called before polling begins. It can be <code>null</code> which will indicate to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref>\n that polling can begin straight away."
    - id: "fetchResultOperation"
      type: "java.util.function.Supplier<reactor.core.publisher.Mono<R>>"
      description: "the operation to be called to fetch final result after polling has been completed."
    - id: "cancelOperation"
      type: "java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>"
      description: "cancel operation if cancellation is supported by the service. It can be <code>null</code> which will indicate to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref>\n that cancel operation is not supported by Azure service."
- uid: "com.azure.security.keyvault.certificates.Poller.block()"
  id: "block()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "block()"
  nameWithType: "Poller<T,R>.block()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.block()"
  overload: "com.azure.security.keyvault.certificates.Poller.block*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Blocks execution and wait for polling to complete. The polling is considered complete based on status defined in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>.\n\nIt will enable auto-polling if it was disable by user."
  syntax:
    content: "public R block()"
    return:
      type: "R"
      description: "returns final <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> when polling is complete."
- uid: "com.azure.security.keyvault.certificates.Poller.block(java.time.Duration)"
  id: "block(java.time.Duration)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "block(Duration timeout)"
  nameWithType: "Poller<T,R>.block(Duration timeout)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.block(Duration timeout)"
  overload: "com.azure.security.keyvault.certificates.Poller.block*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Blocks execution and wait for polling to complete. The polling is considered complete based on status defined in <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>.\n\nIt will enable auto-polling if it was disable by user."
  syntax:
    content: "public R block(Duration timeout)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
      description: "the duration for which the excecution is blocked and waits for polling to complete."
    return:
      type: "R"
      description: "returns final <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> when polling is complete."
- uid: "com.azure.security.keyvault.certificates.Poller.blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus)"
  id: "blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "blockUntil(PollResponse.OperationStatus statusToBlockFor)"
  nameWithType: "Poller<T,R>.blockUntil(PollResponse.OperationStatus statusToBlockFor)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.blockUntil(PollResponse.OperationStatus statusToBlockFor)"
  overload: "com.azure.security.keyvault.certificates.Poller.blockUntil*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Blocks indefinitely until given `statusToBlockFor` is received."
  syntax:
    content: "public PollResponse<T> blockUntil(PollResponse.OperationStatus statusToBlockFor)"
    parameters:
    - id: "statusToBlockFor"
      type: "com.azure.core.util.polling.PollResponse.OperationStatus"
      description: "The desired status to block for."
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "<xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> for matching desired status."
- uid: "com.azure.security.keyvault.certificates.Poller.blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus,java.time.Duration)"
  id: "blockUntil(com.azure.core.util.polling.PollResponse.OperationStatus,java.time.Duration)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "blockUntil(PollResponse.OperationStatus statusToBlockFor, Duration timeout)"
  nameWithType: "Poller<T,R>.blockUntil(PollResponse.OperationStatus statusToBlockFor, Duration timeout)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.blockUntil(PollResponse.OperationStatus statusToBlockFor, Duration timeout)"
  overload: "com.azure.security.keyvault.certificates.Poller.blockUntil*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Blocks until given `statusToBlockFor` is received or a timeout expires if provided. A `null` `timeout` will cause to block indefinitely for desired status."
  syntax:
    content: "public PollResponse<T> blockUntil(PollResponse.OperationStatus statusToBlockFor, Duration timeout)"
    parameters:
    - id: "statusToBlockFor"
      type: "com.azure.core.util.polling.PollResponse.OperationStatus"
      description: "The desired status to block for."
    - id: "timeout"
      type: "java.time.Duration"
      description: "The time after which it will stop blocking. A <code>null</code> value will cause to block indefinitely. Zero or negative are not valid values."
    return:
      type: "com.azure.core.util.polling.PollResponse<T>"
      description: "<xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> for matching desired status to block for."
- uid: "com.azure.security.keyvault.certificates.Poller.cancelOperation()"
  id: "cancelOperation()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "cancelOperation()"
  nameWithType: "Poller<T,R>.cancelOperation()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.cancelOperation()"
  overload: "com.azure.security.keyvault.certificates.Poller.cancelOperation*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Attempts to cancel the long-running operation that this <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> represents. This is possible only if the service supports it, otherwise an `UnsupportedOperationException` will be thrown.\n\nIt will call cancelOperation if status is 'In Progress' otherwise it does nothing."
  syntax:
    content: "public void cancelOperation()"
  exceptions:
  - type: "java.lang.UnsupportedOperationException"
    description: "when cancel operation is not provided."
- uid: "com.azure.security.keyvault.certificates.Poller.getObserver()"
  id: "getObserver()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "getObserver()"
  nameWithType: "Poller<T,R>.getObserver()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.getObserver()"
  overload: "com.azure.security.keyvault.certificates.Poller.getObserver*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "This method returns a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> that can be subscribed to, enabling a subscriber to receive notification of every <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref>, as it is received."
  syntax:
    content: "public Flux<PollResponse<T>> getObserver()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.core.util.polling.PollResponse<T>>"
      description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> that can be subscribed to receive poll responses as the long-running operation executes."
- uid: "com.azure.security.keyvault.certificates.Poller.getStatus()"
  id: "getStatus()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "getStatus()"
  nameWithType: "Poller<T,R>.getStatus()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.getStatus()"
  overload: "com.azure.security.keyvault.certificates.Poller.getStatus*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Current known status as a result of last poll event or last response from a manual polling."
  syntax:
    content: "public PollResponse.OperationStatus getStatus()"
    return:
      type: "com.azure.core.util.polling.PollResponse.OperationStatus"
      description: "current status or <code>null</code> if no status is available."
- uid: "com.azure.security.keyvault.certificates.Poller.isAutoPollingEnabled()"
  id: "isAutoPollingEnabled()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "isAutoPollingEnabled()"
  nameWithType: "Poller<T,R>.isAutoPollingEnabled()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.isAutoPollingEnabled()"
  overload: "com.azure.security.keyvault.certificates.Poller.isAutoPollingEnabled*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Indicates if auto polling is enabled. Refer to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> class-level JavaDoc for more details on auto-polling."
  syntax:
    content: "public boolean isAutoPollingEnabled()"
    return:
      type: "boolean"
      description: "A boolean value representing if auto-polling is enabled or not.."
- uid: "com.azure.security.keyvault.certificates.Poller.poll()"
  id: "poll()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "poll()"
  nameWithType: "Poller<T,R>.poll()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.poll()"
  overload: "com.azure.security.keyvault.certificates.Poller.poll*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Enable user to take control of polling and trigger manual poll operation. It will call poll operation once. This will not turn off auto polling."
  syntax:
    content: "public Mono<PollResponse<T>> poll()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>"
      description: "a Mono of <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> This will call poll operation once. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> returned here could be subscribed\n for receiving <xref uid=\"com.azure.core.util.polling.PollResponse\" data-throw-if-not-resolved=\"false\">PollResponse</xref> in async manner."
- uid: "com.azure.security.keyvault.certificates.Poller.result()"
  id: "result()"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "result()"
  nameWithType: "Poller<T,R>.result()"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.result()"
  overload: "com.azure.security.keyvault.certificates.Poller.result*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  syntax:
    content: "public Mono<R> result()"
    return:
      type: "reactor.core.publisher.Mono<R>"
- uid: "com.azure.security.keyvault.certificates.Poller.setAutoPollingEnabled(boolean)"
  id: "setAutoPollingEnabled(boolean)"
  parent: "com.azure.security.keyvault.certificates.Poller"
  langs:
  - "java"
  name: "setAutoPollingEnabled(boolean autoPollingEnabled)"
  nameWithType: "Poller<T,R>.setAutoPollingEnabled(boolean autoPollingEnabled)"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.setAutoPollingEnabled(boolean autoPollingEnabled)"
  overload: "com.azure.security.keyvault.certificates.Poller.setAutoPollingEnabled*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Controls whether auto-polling is enabled or disabled. Refer to the <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> class-level JavaDoc for more details on auto-polling."
  syntax:
    content: "public final void setAutoPollingEnabled(boolean autoPollingEnabled)"
    parameters:
    - id: "autoPollingEnabled"
      type: "boolean"
      description: "If true, auto-polling will occur transparently in the background, otherwise it requires\n                           manual polling by the user to get the latest state."
references:
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "java.util.function.Function<com.azure.core.util.polling.PollResponse<T>,reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller.Poller*"
  name: "Poller"
  nameWithType: "Poller<T,R>.Poller"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.Poller"
  package: "com.azure.security.keyvault.certificates"
- uid: "java.util.function.Supplier<reactor.core.publisher.Mono<T>>"
  spec.java:
  - uid: "java.util.function.Supplier"
    name: "Supplier"
    fullName: "java.util.function.Supplier"
  - name: "<"
    fullName: "<"
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "java.util.function.Supplier<reactor.core.publisher.Mono<R>>"
  spec.java:
  - uid: "java.util.function.Supplier"
    name: "Supplier"
    fullName: "java.util.function.Supplier"
  - name: "<"
    fullName: "<"
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "R"
    name: "R"
    fullName: "R"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "java.util.function.Consumer<com.azure.security.keyvault.certificates.Poller<T,R>>"
  spec.java:
  - uid: "java.util.function.Consumer"
    name: "Consumer"
    fullName: "java.util.function.Consumer"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.Poller"
    name: "Poller"
    fullName: "com.azure.security.keyvault.certificates.Poller"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ","
    fullName: ","
  - uid: "R"
    name: "R"
    fullName: "R"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "java.lang.UnsupportedOperationException"
  spec.java:
  - uid: "java.lang.UnsupportedOperationException"
    name: "UnsupportedOperationException"
    fullName: "java.lang.UnsupportedOperationException"
- uid: "com.azure.security.keyvault.certificates.Poller.cancelOperation*"
  name: "cancelOperation"
  nameWithType: "Poller<T,R>.cancelOperation"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.cancelOperation"
  package: "com.azure.security.keyvault.certificates"
- uid: "reactor.core.publisher.Flux<com.azure.core.util.polling.PollResponse<T>>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller.getObserver*"
  name: "getObserver"
  nameWithType: "Poller<T,R>.getObserver"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.getObserver"
  package: "com.azure.security.keyvault.certificates"
- uid: "reactor.core.publisher.Mono<com.azure.core.util.polling.PollResponse<T>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller.poll*"
  name: "poll"
  nameWithType: "Poller<T,R>.poll"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.poll"
  package: "com.azure.security.keyvault.certificates"
- uid: "R"
  spec.java:
  - uid: "R"
    name: "R"
    fullName: "R"
- uid: "com.azure.security.keyvault.certificates.Poller.block*"
  name: "block"
  nameWithType: "Poller<T,R>.block"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.block"
  package: "com.azure.security.keyvault.certificates"
- uid: "reactor.core.publisher.Mono<R>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "R"
    name: "R"
    fullName: "R"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller.result*"
  name: "result"
  nameWithType: "Poller<T,R>.result"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.result"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.util.polling.PollResponse.OperationStatus"
  spec.java:
  - uid: "com.azure.core.util.polling.PollResponse.OperationStatus"
    name: "OperationStatus"
    fullName: "com.azure.core.util.polling.PollResponse.OperationStatus"
- uid: "com.azure.core.util.polling.PollResponse<T>"
  spec.java:
  - uid: "com.azure.core.util.polling.PollResponse"
    name: "PollResponse"
    fullName: "com.azure.core.util.polling.PollResponse"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller.blockUntil*"
  name: "blockUntil"
  nameWithType: "Poller<T,R>.blockUntil"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.blockUntil"
  package: "com.azure.security.keyvault.certificates"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.security.keyvault.certificates.Poller.setAutoPollingEnabled*"
  name: "setAutoPollingEnabled"
  nameWithType: "Poller<T,R>.setAutoPollingEnabled"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.setAutoPollingEnabled"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.Poller.isAutoPollingEnabled*"
  name: "isAutoPollingEnabled"
  nameWithType: "Poller<T,R>.isAutoPollingEnabled"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.isAutoPollingEnabled"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.Poller.getStatus*"
  name: "getStatus"
  nameWithType: "Poller<T,R>.getStatus"
  fullName: "com.azure.security.keyvault.certificates.Poller<T,R>.getStatus"
  package: "com.azure.security.keyvault.certificates"
- uid: "T"
  name: "T"
  nameWithType: "T"
  fullName: "T"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.util.polling.PollResponse"
  name: "PollResponse"
  nameWithType: "PollResponse"
  fullName: "com.azure.core.util.polling.PollResponse"
- uid: "T>,reactor.core.publisher.Mono"
  name: "T>,Mono"
  nameWithType: "T>,Mono"
  fullName: "T>,reactor.core.publisher.Mono"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.util.function.Supplier"
  name: "Supplier"
  nameWithType: "Supplier"
  fullName: "java.util.function.Supplier"
- uid: "java.util.function.Consumer"
  name: "Consumer"
  nameWithType: "Consumer"
  fullName: "java.util.function.Consumer"
- uid: "T,R"
  name: "T,R"
  nameWithType: "T,R"
  fullName: "T,R"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"

### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.FileAsyncClient"
  id: "FileAsyncClient"
  parent: "com.azure.storage.file"
  children:
  - "com.azure.storage.file.FileAsyncClient.FileAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.abortCopy(java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.clearRange(long)"
  - "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long,long)"
  - "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long,long,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.create(long)"
  - "com.azure.storage.file.FileAsyncClient.createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.FileAsyncClient.createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.delete()"
  - "com.azure.storage.file.FileAsyncClient.deleteWithResponse()"
  - "com.azure.storage.file.FileAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.downloadToFile(java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange)"
  - "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.downloadWithProperties()"
  - "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean)"
  - "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.forceCloseHandles(java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.getAccountName()"
  - "com.azure.storage.file.FileAsyncClient.getFilePath()"
  - "com.azure.storage.file.FileAsyncClient.getFileUrl()"
  - "com.azure.storage.file.FileAsyncClient.getProperties()"
  - "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse()"
  - "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.getShareName()"
  - "com.azure.storage.file.FileAsyncClient.getShareSnapshotId()"
  - "com.azure.storage.file.FileAsyncClient.listHandles()"
  - "com.azure.storage.file.FileAsyncClient.listHandles(java.lang.Integer)"
  - "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.listRanges()"
  - "com.azure.storage.file.FileAsyncClient.listRanges(com.azure.storage.file.models.FileRange)"
  - "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout(com.azure.storage.file.models.FileRange,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.setProperties(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.startCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  - "com.azure.storage.file.FileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  - "com.azure.storage.file.FileAsyncClient.uploadFromFile(java.lang.String)"
  - "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl(long,long,long,java.net.URI)"
  - "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.net.URI)"
  - "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.net.URI,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  - "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  - "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  - "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "FileAsyncClient"
  nameWithType: "FileAsyncClient"
  fullName: "com.azure.storage.file.FileAsyncClient"
  type: "Class"
  package: "com.azure.storage.file"
  summary: "This class provides a client that contains all the operations for interacting with file in Azure Storage File Service. Operations allowed by the client are creating, copying, uploading, downloading, deleting and listing on a file, retrieving properties, setting metadata and list or force close handles of the file.\n\n**Instantiating an Asynchronous File Client**\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.instantiation\\}\n\nView <xref uid=\"com.azure.storage.file.FileClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public class FileAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.FileAsyncClient.FileAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  id: "FileAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "FileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName)"
  nameWithType: "FileAsyncClient.FileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName)"
  fullName: "com.azure.storage.file.FileAsyncClient.FileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName)"
  overload: "com.azure.storage.file.FileAsyncClient.FileAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.file"
  summary: "Creates a FileAsyncClient that sends requests to the storage file at <xref uid=\"com.azure.storage.file.implementation.AzureFileStorageImpl.getUrl()\" data-throw-if-not-resolved=\"false\">endpoint</xref>. Each service call goes through the <xref uid=\"\" data-throw-if-not-resolved=\"false\">pipeline</xref> in the `client`."
  syntax:
    content: " FileAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String filePath, String snapshot, String accountName)"
    parameters:
    - id: "azureFileStorageClient"
      type: "com.azure.storage.file.implementation.AzureFileStorageImpl"
      description: "Client that interacts with the service interfaces"
    - id: "shareName"
      type: "java.lang.String"
      description: "Name of the share"
    - id: "filePath"
      type: "java.lang.String"
      description: "Path to the file"
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot of the share"
    - id: "accountName"
      type: "java.lang.String"
- uid: "com.azure.storage.file.FileAsyncClient.abortCopy(java.lang.String)"
  id: "abortCopy(java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "abortCopy(String copyId)"
  nameWithType: "FileAsyncClient.abortCopy(String copyId)"
  fullName: "com.azure.storage.file.FileAsyncClient.abortCopy(String copyId)"
  overload: "com.azure.storage.file.FileAsyncClient.abortCopy*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.abortCopy\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file"
  syntax:
    content: "public Mono<Void> abortCopy(String copyId)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "Specifies the copy id which has copying pending status associate with it."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(java.lang.String)"
  id: "abortCopyWithResponse(java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "abortCopyWithResponse(String copyId)"
  nameWithType: "FileAsyncClient.abortCopyWithResponse(String copyId)"
  fullName: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(String copyId)"
  overload: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.abortCopyWithResponse\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-file"
  syntax:
    content: "public Mono<Response<Void>> abortCopyWithResponse(String copyId)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
      description: "Specifies the copy id which has copying pending status associate with it."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response containing the status of aborting copy the file."
- uid: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "abortCopyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "abortCopyWithResponse(String copyId, Context context)"
  nameWithType: "FileAsyncClient.abortCopyWithResponse(String copyId, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse(String copyId, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<Void>> abortCopyWithResponse(String copyId, Context context)"
    parameters:
    - id: "copyId"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.FileAsyncClient.clearRange(long)"
  id: "clearRange(long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "clearRange(long length)"
  nameWithType: "FileAsyncClient.clearRange(long length)"
  fullName: "com.azure.storage.file.FileAsyncClient.clearRange(long length)"
  overload: "com.azure.storage.file.FileAsyncClient.clearRange*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClears the first 1024 bytes.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.clearRange\\#long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<FileUploadInfo> clearRange(long length)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being cleared."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long,long)"
  id: "clearRangeWithResponse(long,long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "clearRangeWithResponse(long length, long offset)"
  nameWithType: "FileAsyncClient.clearRangeWithResponse(long length, long offset)"
  fullName: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long length, long offset)"
  overload: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClear the range starting from 1024 with length of 1024.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.clearRange\\#long-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<FileUploadInfo>> clearRangeWithResponse(long length, long offset)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being cleared in the request body."
    - id: "offset"
      type: "long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
      description: "A response of <xref uid=\"com.azure.storage.file.models.FileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> that only contains headers and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long,long,com.azure.core.util.Context)"
  id: "clearRangeWithResponse(long,long,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "clearRangeWithResponse(long length, long offset, Context context)"
  nameWithType: "FileAsyncClient.clearRangeWithResponse(long length, long offset, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse(long length, long offset, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileUploadInfo>> clearRangeWithResponse(long length, long offset, Context context)"
    parameters:
    - id: "length"
      type: "long"
    - id: "offset"
      type: "long"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.create(long)"
  id: "create(long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "create(long maxSize)"
  nameWithType: "FileAsyncClient.create(long maxSize)"
  fullName: "com.azure.storage.file.FileAsyncClient.create(long maxSize)"
  overload: "com.azure.storage.file.FileAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in the storage account and returns a response of <xref uid=\"com.azure.storage.file.models.FileInfo\" data-throw-if-not-resolved=\"false\">FileInfo</xref> to interact with it.\n\n**Code Samples**\n\nCreate the file with size 1KB.\n\n\\{@codesnippet com.azure.storage.file.fileClient.create\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<FileInfo> create(long maxSize)"
    parameters:
    - id: "maxSize"
      type: "long"
      description: "The maximum size in bytes for the file, up to 1 TiB."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileInfo>"
      description: "A response containing the file info and the status of creating the file."
- uid: "com.azure.storage.file.FileAsyncClient.createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "FileAsyncClient.createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.FileAsyncClient.createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  overload: "com.azure.storage.file.FileAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in the storage account and returns a response of FileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.createWithResponse\\#long-filehttpheaders-filesmbproperties-string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<Response<FileInfo>> createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
    parameters:
    - id: "maxSize"
      type: "long"
      description: "The maximum size in bytes for the file, up to 1 TiB."
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and the status of creating the file."
- uid: "com.azure.storage.file.FileAsyncClient.createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "createWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  nameWithType: "FileAsyncClient.createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileInfo>> createWithResponse(long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
    parameters:
    - id: "maxSize"
      type: "long"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.delete()"
  id: "delete()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "FileAsyncClient.delete()"
  fullName: "com.azure.storage.file.FileAsyncClient.delete()"
  overload: "com.azure.storage.file.FileAsyncClient.delete*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.delete\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Void> delete()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response"
- uid: "com.azure.storage.file.FileAsyncClient.deleteWithResponse()"
  id: "deleteWithResponse()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse()"
  nameWithType: "FileAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.FileAsyncClient.deleteWithResponse()"
  overload: "com.azure.storage.file.FileAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.deleteWithResponse\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Response<Void>> deleteWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  id: "deleteWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(Context context)"
  nameWithType: "FileAsyncClient.deleteWithResponse(Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.deleteWithResponse(Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<Void>> deleteWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.FileAsyncClient.downloadToFile(java.lang.String)"
  id: "downloadToFile(java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadToFile(String downloadFilePath)"
  nameWithType: "FileAsyncClient.downloadToFile(String downloadFilePath)"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadToFile(String downloadFilePath)"
  overload: "com.azure.storage.file.FileAsyncClient.downloadToFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\">FileAlreadyExistsException</xref> will be thrown.\n\n**Code Samples**\n\nDownload the file to current folder.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.downloadToFile\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<FileProperties> downloadToFile(String downloadFilePath)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
      description: "The path where store the downloaded file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileProperties>"
      description: "An empty response."
- uid: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange)"
  id: "downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadToFileWithResponse(String downloadFilePath, FileRange range)"
  nameWithType: "FileAsyncClient.downloadToFileWithResponse(String downloadFilePath, FileRange range)"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(String downloadFilePath, FileRange range)"
  overload: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\">FileAlreadyExistsException</xref> will be thrown.\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes to current folder.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.downloadToFileWithResponse\\#string-filerange\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<Response<FileProperties>> downloadToFileWithResponse(String downloadFilePath, FileRange range)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
      description: "The path where store the downloaded file"
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
      description: "Optional byte range which returns file data only from the specified range."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileProperties>>"
      description: "An empty response."
- uid: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange,com.azure.core.util.Context)"
  id: "downloadToFileWithResponse(java.lang.String,com.azure.storage.file.models.FileRange,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadToFileWithResponse(String downloadFilePath, FileRange range, Context context)"
  nameWithType: "FileAsyncClient.downloadToFileWithResponse(String downloadFilePath, FileRange range, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse(String downloadFilePath, FileRange range, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileProperties>> downloadToFileWithResponse(String downloadFilePath, FileRange range, Context context)"
    parameters:
    - id: "downloadFilePath"
      type: "java.lang.String"
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileProperties>>"
- uid: "com.azure.storage.file.FileAsyncClient.downloadWithProperties()"
  id: "downloadWithProperties()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadWithProperties()"
  nameWithType: "FileAsyncClient.downloadWithProperties()"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadWithProperties()"
  overload: "com.azure.storage.file.FileAsyncClient.downloadWithProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file with its metadata and properties.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.downloadWithProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<FileDownloadInfo> downloadWithProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileDownloadInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileDownloadInfo\" data-throw-if-not-resolved=\"false\">file download Info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean)"
  id: "downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5)"
  nameWithType: "FileAsyncClient.downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5)"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5)"
  overload: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.downloadWithPropertiesWithResponse\\#filerange-boolean\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file"
  syntax:
    content: "public Mono<Response<FileDownloadInfo>> downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
      description: "Optional byte range which returns file data only from the specified range."
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
      description: "Optional boolean which the service returns the MD5 hash for the range when it sets to\n true, as long as the range is less than or equal to 4 MB in size."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileDownloadInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileDownloadInfo\" data-throw-if-not-resolved=\"false\">file download Info</xref> with headers and response status\n code"
- uid: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean,com.azure.core.util.Context)"
  id: "downloadWithPropertiesWithResponse(com.azure.storage.file.models.FileRange,java.lang.Boolean,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5, Context context)"
  nameWithType: "FileAsyncClient.downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileDownloadInfo>> downloadWithPropertiesWithResponse(FileRange range, Boolean rangeGetContentMD5, Context context)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
    - id: "rangeGetContentMD5"
      type: "java.lang.Boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileDownloadInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.forceCloseHandles(java.lang.String)"
  id: "forceCloseHandles(java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandles(String handleId)"
  nameWithType: "FileAsyncClient.forceCloseHandles(String handleId)"
  fullName: "com.azure.storage.file.FileAsyncClient.forceCloseHandles(String handleId)"
  overload: "com.azure.storage.file.FileAsyncClient.forceCloseHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Closes a handle or handles opened on a file at the service. It is intended to be used alongside <xref uid=\"com.azure.storage.file.FileAsyncClient.listHandles()\" data-throw-if-not-resolved=\"false\">FileAsyncClient#listHandles()</xref> (Integer)\\} .\n\n**Code Samples**\n\nForce close handles with handles returned by list handles in recursive.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.forceCloseHandles\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public PagedFlux<Integer> forceCloseHandles(String handleId)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
      description: "Specifies the handle ID to be closed. Use an asterisk ('*') as a wildcard string to specify all\n handles."
    return:
      type: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
      description: "The counts of number of handles closed"
- uid: "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  id: "forceCloseHandlesWithOptionalTimeout(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandlesWithOptionalTimeout(String handleId, Duration timeout, Context context)"
  nameWithType: "FileAsyncClient.forceCloseHandlesWithOptionalTimeout(String handleId, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout(String handleId, Duration timeout, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<Integer> forceCloseHandlesWithOptionalTimeout(String handleId, Duration timeout, Context context)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
- uid: "com.azure.storage.file.FileAsyncClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "FileAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.FileAsyncClient.getAccountName()"
  overload: "com.azure.storage.file.FileAsyncClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "account name associated with this storage resource."
- uid: "com.azure.storage.file.FileAsyncClient.getFilePath()"
  id: "getFilePath()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getFilePath()"
  nameWithType: "FileAsyncClient.getFilePath()"
  fullName: "com.azure.storage.file.FileAsyncClient.getFilePath()"
  overload: "com.azure.storage.file.FileAsyncClient.getFilePath*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get file path of the client.\n\nGet the file path.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.getFilePath\\}"
  syntax:
    content: "public String getFilePath()"
    return:
      type: "java.lang.String"
      description: "The path of the file."
- uid: "com.azure.storage.file.FileAsyncClient.getFileUrl()"
  id: "getFileUrl()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getFileUrl()"
  nameWithType: "FileAsyncClient.getFileUrl()"
  fullName: "com.azure.storage.file.FileAsyncClient.getFileUrl()"
  overload: "com.azure.storage.file.FileAsyncClient.getFileUrl*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the url of the storage file client."
  syntax:
    content: "public String getFileUrl()"
    return:
      type: "java.lang.String"
      description: "the URL of the storage file client"
- uid: "com.azure.storage.file.FileAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "FileAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.FileAsyncClient.getProperties()"
  overload: "com.azure.storage.file.FileAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.getProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties"
  syntax:
    content: "public Mono<FileProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileProperties>"
      description: "<xref uid=\"com.azure.storage.file.models.FileProperties\" data-throw-if-not-resolved=\"false\">Storage file properties</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse()"
  id: "getPropertiesWithResponse()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse()"
  nameWithType: "FileAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse()"
  overload: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of the storage account's file. The properties includes file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.getPropertiesWithResponse\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-properties"
  syntax:
    content: "public Mono<Response<FileProperties>> getPropertiesWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileProperties>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileProperties\" data-throw-if-not-resolved=\"false\">storage file properties</xref> and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  id: "getPropertiesWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(Context context)"
  nameWithType: "FileAsyncClient.getPropertiesWithResponse(Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse(Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileProperties>> getPropertiesWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileProperties>>"
- uid: "com.azure.storage.file.FileAsyncClient.getShareName()"
  id: "getShareName()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getShareName()"
  nameWithType: "FileAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.FileAsyncClient.getShareName()"
  overload: "com.azure.storage.file.FileAsyncClient.getShareName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the share name of file client.\n\nGet the share name.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.getShareName\\}"
  syntax:
    content: "public String getShareName()"
    return:
      type: "java.lang.String"
      description: "The share name of the file."
- uid: "com.azure.storage.file.FileAsyncClient.getShareSnapshotId()"
  id: "getShareSnapshotId()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "getShareSnapshotId()"
  nameWithType: "FileAsyncClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.FileAsyncClient.getShareSnapshotId()"
  overload: "com.azure.storage.file.FileAsyncClient.getShareSnapshotId*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.FileAsyncClient\" data-throw-if-not-resolved=\"false\">FileAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.getShareSnapshotId\\}"
  syntax:
    content: "public String getShareSnapshotId()"
    return:
      type: "java.lang.String"
      description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
- uid: "com.azure.storage.file.FileAsyncClient.listHandles()"
  id: "listHandles()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listHandles()"
  nameWithType: "FileAsyncClient.listHandles()"
  fullName: "com.azure.storage.file.FileAsyncClient.listHandles()"
  overload: "com.azure.storage.file.FileAsyncClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of open handles on a file.\n\n**Code Samples**\n\nList all handles for the file client.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.listHandles\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedFlux<HandleItem> listHandles()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the files that satisfy the requirements"
- uid: "com.azure.storage.file.FileAsyncClient.listHandles(java.lang.Integer)"
  id: "listHandles(java.lang.Integer)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listHandles(Integer maxResults)"
  nameWithType: "FileAsyncClient.listHandles(Integer maxResults)"
  fullName: "com.azure.storage.file.FileAsyncClient.listHandles(Integer maxResults)"
  overload: "com.azure.storage.file.FileAsyncClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of open handles on a file.\n\n**Code Samples**\n\nList 10 handles for the file client.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.listHandles\\#integer\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedFlux<HandleItem> listHandles(Integer maxResults)"
    parameters:
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "Optional maximum number of results will return per page"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the file that satisfy the requirements"
- uid: "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  id: "listHandlesWithOptionalTimeout(java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listHandlesWithOptionalTimeout(Integer maxResults, Duration timeout, Context context)"
  nameWithType: "FileAsyncClient.listHandlesWithOptionalTimeout(Integer maxResults, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout(Integer maxResults, Duration timeout, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<HandleItem> listHandlesWithOptionalTimeout(Integer maxResults, Duration timeout, Context context)"
    parameters:
    - id: "maxResults"
      type: "java.lang.Integer"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
- uid: "com.azure.storage.file.FileAsyncClient.listRanges()"
  id: "listRanges()"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listRanges()"
  nameWithType: "FileAsyncClient.listRanges()"
  fullName: "com.azure.storage.file.FileAsyncClient.listRanges()"
  overload: "com.azure.storage.file.FileAsyncClient.listRanges*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges for the file client.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.listRanges\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax:
    content: "public PagedFlux<FileRange> listRanges()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileRange>"
      description: "<xref uid=\"com.azure.storage.file.models.FileRange\" data-throw-if-not-resolved=\"false\">ranges</xref> in the files."
- uid: "com.azure.storage.file.FileAsyncClient.listRanges(com.azure.storage.file.models.FileRange)"
  id: "listRanges(com.azure.storage.file.models.FileRange)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listRanges(FileRange range)"
  nameWithType: "FileAsyncClient.listRanges(FileRange range)"
  fullName: "com.azure.storage.file.FileAsyncClient.listRanges(FileRange range)"
  overload: "com.azure.storage.file.FileAsyncClient.listRanges*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.listRanges\\#filerange\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-ranges"
  syntax:
    content: "public PagedFlux<FileRange> listRanges(FileRange range)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
      description: "Optional byte range which returns file data only from the specified range."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileRange>"
      description: "<xref uid=\"com.azure.storage.file.models.FileRange\" data-throw-if-not-resolved=\"false\">ranges</xref> in the files that satisfy the requirements"
- uid: "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout(com.azure.storage.file.models.FileRange,java.time.Duration,com.azure.core.util.Context)"
  id: "listRangesWithOptionalTimeout(com.azure.storage.file.models.FileRange,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "listRangesWithOptionalTimeout(FileRange range, Duration timeout, Context context)"
  nameWithType: "FileAsyncClient.listRangesWithOptionalTimeout(FileRange range, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout(FileRange range, Duration timeout, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<FileRange> listRangesWithOptionalTimeout(FileRange range, Duration timeout, Context context)"
    parameters:
    - id: "range"
      type: "com.azure.storage.file.models.FileRange"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileRange>"
- uid: "com.azure.storage.file.FileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "FileAsyncClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.FileAsyncClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.file.FileAsyncClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setMetadata\\#map\\}\n\nClear the metadata of the file\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setMetadataWithResponse\\#map.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: "public Mono<FileMetadataInfo> setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileMetadataInfo>"
      description: "<xref uid=\"com.azure.storage.file.models.FileMetadataInfo\" data-throw-if-not-resolved=\"false\">file meta info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "FileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  overload: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setMetadataWithResponse\\#map\\}\n\nClear the metadata of the file\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setMetadataWithResponse\\#map.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: "public Mono<Response<FileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileMetadataInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileMetadataInfo\" data-throw-if-not-resolved=\"false\">file meta info</xref> and status code"
- uid: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, Context context)"
  nameWithType: "FileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileMetadataInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.setProperties(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  id: "setProperties(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setProperties(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "FileAsyncClient.setProperties(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.FileAsyncClient.setProperties(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.FileAsyncClient.setProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the fileProperties.httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the fileProperties.filesmbproperties it will preserve the filesmb properties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setProperties\\#long-filehttpheaders-filesmbproperties-string\\}\n\nClear the metadata of the file and preserve the SMB properties\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setProperties\\#long-filehttpheaders-filesmbproperties-string.clearHttpHeaderspreserveSMBProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: "public Mono<FileInfo> setProperties(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "newFileSize"
      type: "long"
      description: "New file size of the file"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileInfo\" data-throw-if-not-resolved=\"false\">file info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  id: "setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "FileAsyncClient.setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setPropertiesWithResponse\\#long-filehttpheaders-filesmbproperties-string\\}\n\nClear the metadata of the file and preserve the SMB properties\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.setPropertiesWithResponse\\#long-filehttpheaders-filesmbproperties-string.clearHttpHeaderspreserveSMBProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: "public Mono<Response<FileInfo>> setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "newFileSize"
      type: "long"
      description: "New file size of the file."
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileInfo>>"
      description: "Response containing the <xref uid=\"com.azure.storage.file.models.FileInfo\" data-throw-if-not-resolved=\"false\">file info</xref> and response status code."
- uid: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  id: "setPropertiesWithResponse(long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Context context)"
  nameWithType: "FileAsyncClient.setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileInfo>> setPropertiesWithResponse(long newFileSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Context context)"
    parameters:
    - id: "newFileSize"
      type: "long"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.startCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "startCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "startCopy(String sourceUrl, Map<String,String> metadata)"
  nameWithType: "FileAsyncClient.startCopy(String sourceUrl, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.FileAsyncClient.startCopy(String sourceUrl, Map<String,String> metadata)"
  overload: "com.azure.storage.file.FileAsyncClient.startCopy*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.startCopy\\#string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: "public Mono<FileCopyInfo> startCopy(String sourceUrl, Map<String,String> metadata)"
    parameters:
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileCopyInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileCopyInfo\" data-throw-if-not-resolved=\"false\">file copy info</xref>."
- uid: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "startCopyWithResponse(String sourceUrl, Map<String,String> metadata)"
  nameWithType: "FileAsyncClient.startCopyWithResponse(String sourceUrl, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(String sourceUrl, Map<String,String> metadata)"
  overload: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.startCopyWithResponse\\#string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file"
  syntax:
    content: "public Mono<Response<FileCopyInfo>> startCopyWithResponse(String sourceUrl, Map<String,String> metadata)"
    parameters:
    - id: "sourceUrl"
      type: "java.lang.String"
      description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileCopyInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileCopyInfo\" data-throw-if-not-resolved=\"false\">file copy info</xref> and the status of copying the file."
- uid: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "startCopyWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "startCopyWithResponse(String sourceUrl, Map<String,String> metadata, Context context)"
  nameWithType: "FileAsyncClient.startCopyWithResponse(String sourceUrl, Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse(String sourceUrl, Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileCopyInfo>> startCopyWithResponse(String sourceUrl, Map<String,String> metadata, Context context)"
    parameters:
    - id: "sourceUrl"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileCopyInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  id: "upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "upload(Flux<ByteBuffer> data, long length)"
  nameWithType: "FileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  fullName: "com.azure.storage.file.FileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  overload: "com.azure.storage.file.FileAsyncClient.upload*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes to the beginning of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.upload\\#flux-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<FileUploadInfo> upload(Flux<ByteBuffer> data, long length)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadInfo>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  id: "upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "upload(Flux<ByteBuffer> data, long length, long offset)"
  nameWithType: "FileAsyncClient.upload(Flux<ByteBuffer> data, long length, long offset)"
  fullName: "com.azure.storage.file.FileAsyncClient.upload(Flux<ByteBuffer> data, long length, long offset)"
  overload: "com.azure.storage.file.FileAsyncClient.upload*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" starting from 1024 bytes.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.upload\\#flux-long-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<FileUploadInfo> upload(Flux<ByteBuffer> data, long length, long offset)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "offset"
      type: "long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.uploadFromFile(java.lang.String)"
  id: "uploadFromFile(java.lang.String)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadFromFile(String uploadFilePath)"
  nameWithType: "FileAsyncClient.uploadFromFile(String uploadFilePath)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadFromFile(String uploadFilePath)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadFromFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads file to storage file service.\n\n**Code Samples**\n\nUpload the file from the source file path.\n\n(@codesnippet com.azure.storage.file.fileAsyncClient.uploadFromFile\\#string\\}\n\nFor more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].\n\n\n[Azure Docs Create File]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file\n[Azure Docs Upload]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Void> uploadFromFile(String uploadFilePath)"
    parameters:
    - id: "uploadFilePath"
      type: "java.lang.String"
      description: "The path where store the source file to upload"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl(long,long,long,java.net.URI)"
  id: "uploadRangeFromUrl(long,long,long,java.net.URI)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  nameWithType: "FileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.uploadRangeFromUrl\\#long-long-long-uri\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<FileUploadRangeFromUrlInfo> uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "destinationOffset"
      type: "long"
      description: "Starting point of the upload range on the destination."
    - id: "sourceOffset"
      type: "long"
      description: "Starting point of the upload range on the source."
    - id: "sourceURI"
      type: "java.net.URI"
      description: "Specifies the URL of the source file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadRangeFromUrlInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.FileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\">file upload range from url info</xref>"
- uid: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.net.URI)"
  id: "uploadRangeFromUrlWithResponse(long,long,long,java.net.URI)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  nameWithType: "FileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.uploadRangeFromUrlWithResponse\\#long-long-long-uri\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<FileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI)"
    parameters:
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body."
    - id: "destinationOffset"
      type: "long"
      description: "Starting point of the upload range on the destination."
    - id: "sourceOffset"
      type: "long"
      description: "Starting point of the upload range on the source."
    - id: "sourceURI"
      type: "java.net.URI"
      description: "Specifies the URL of the source file."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadRangeFromUrlInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\">file upload range from url info</xref> with headers\n and response status code."
- uid: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.net.URI,com.azure.core.util.Context)"
  id: "uploadRangeFromUrlWithResponse(long,long,long,java.net.URI,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI, Context context)"
  nameWithType: "FileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, URI sourceURI, Context context)"
    parameters:
    - id: "length"
      type: "long"
    - id: "destinationOffset"
      type: "long"
    - id: "sourceOffset"
      type: "long"
    - id: "sourceURI"
      type: "java.net.URI"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadRangeFromUrlInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length)"
  nameWithType: "FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes to the beginning of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload \"default\" to the file.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.uploadWithResponse\\#flux-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<FileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body. When the FileRangeWriteType is\n set to clear, the value of this header must be set to zero.."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> with headers and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Context context)"
  nameWithType: "FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Context context)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
    - id: "length"
      type: "long"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
- uid: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, long offset)"
  nameWithType: "FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, long offset)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, long offset)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n\\{@codesnippet com.azure.storage.file.fileAsyncClient.uploadWithResponse\\#flux-long-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/put-range"
  syntax:
    content: "public Mono<Response<FileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, long offset)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "The data which will upload to the storage file."
    - id: "length"
      type: "long"
      description: "Specifies the number of bytes being transmitted in the request body. When the FileRangeWriteType is\n set to clear, the value of this header must be set to zero."
    - id: "offset"
      type: "long"
      description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
      description: "A response containing the <xref uid=\"com.azure.storage.file.models.FileUploadInfo\" data-throw-if-not-resolved=\"false\">file upload info</xref> with headers and response status code"
- uid: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long,com.azure.core.util.Context)"
  id: "uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,long,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.FileAsyncClient"
  langs:
  - "java"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, long offset, Context context)"
  nameWithType: "FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, long offset, Context context)"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, long offset, Context context)"
  overload: "com.azure.storage.file.FileAsyncClient.uploadWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, long offset, Context context)"
    parameters:
    - id: "data"
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
    - id: "length"
      type: "long"
    - id: "offset"
      type: "long"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
references:
- uid: "com.azure.storage.file.implementation.AzureFileStorageImpl"
  name: "AzureFileStorageImpl"
  nameWithType: "AzureFileStorageImpl"
  fullName: "com.azure.storage.file.implementation.AzureFileStorageImpl"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.FileAsyncClient.FileAsyncClient*"
  name: "FileAsyncClient"
  nameWithType: "FileAsyncClient.FileAsyncClient"
  fullName: "com.azure.storage.file.FileAsyncClient.FileAsyncClient"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getFileUrl*"
  name: "getFileUrl"
  nameWithType: "FileAsyncClient.getFileUrl"
  fullName: "com.azure.storage.file.FileAsyncClient.getFileUrl"
  package: "com.azure.storage.file"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileInfo"
    name: "FileInfo"
    fullName: "com.azure.storage.file.models.FileInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.create*"
  name: "create"
  nameWithType: "FileAsyncClient.create"
  fullName: "com.azure.storage.file.FileAsyncClient.create"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.FileHTTPHeaders"
  name: "FileHTTPHeaders"
  nameWithType: "FileHTTPHeaders"
  fullName: "com.azure.storage.file.models.FileHTTPHeaders"
- uid: "com.azure.storage.file.FileSmbProperties"
  name: "FileSmbProperties"
  nameWithType: "FileSmbProperties"
  fullName: "com.azure.storage.file.FileSmbProperties"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileInfo"
    name: "FileInfo"
    fullName: "com.azure.storage.file.models.FileInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "FileAsyncClient.createWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.createWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileCopyInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileCopyInfo"
    name: "FileCopyInfo"
    fullName: "com.azure.storage.file.models.FileCopyInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.startCopy*"
  name: "startCopy"
  nameWithType: "FileAsyncClient.startCopy"
  fullName: "com.azure.storage.file.FileAsyncClient.startCopy"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileCopyInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileCopyInfo"
    name: "FileCopyInfo"
    fullName: "com.azure.storage.file.models.FileCopyInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse*"
  name: "startCopyWithResponse"
  nameWithType: "FileAsyncClient.startCopyWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.startCopyWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.abortCopy*"
  name: "abortCopy"
  nameWithType: "FileAsyncClient.abortCopy"
  fullName: "com.azure.storage.file.FileAsyncClient.abortCopy"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse*"
  name: "abortCopyWithResponse"
  nameWithType: "FileAsyncClient.abortCopyWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.abortCopyWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileProperties"
    name: "FileProperties"
    fullName: "com.azure.storage.file.models.FileProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.downloadToFile*"
  name: "downloadToFile"
  nameWithType: "FileAsyncClient.downloadToFile"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadToFile"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.FileRange"
  name: "FileRange"
  nameWithType: "FileRange"
  fullName: "com.azure.storage.file.models.FileRange"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileProperties"
    name: "FileProperties"
    fullName: "com.azure.storage.file.models.FileProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse*"
  name: "downloadToFileWithResponse"
  nameWithType: "FileAsyncClient.downloadToFileWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadToFileWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileDownloadInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileDownloadInfo"
    name: "FileDownloadInfo"
    fullName: "com.azure.storage.file.models.FileDownloadInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.downloadWithProperties*"
  name: "downloadWithProperties"
  nameWithType: "FileAsyncClient.downloadWithProperties"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadWithProperties"
  package: "com.azure.storage.file"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileDownloadInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileDownloadInfo"
    name: "FileDownloadInfo"
    fullName: "com.azure.storage.file.models.FileDownloadInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse*"
  name: "downloadWithPropertiesWithResponse"
  nameWithType: "FileAsyncClient.downloadWithPropertiesWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.downloadWithPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.delete*"
  name: "delete"
  nameWithType: "FileAsyncClient.delete"
  fullName: "com.azure.storage.file.FileAsyncClient.delete"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "FileAsyncClient.deleteWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.deleteWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "FileAsyncClient.getProperties"
  fullName: "com.azure.storage.file.FileAsyncClient.getProperties"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "FileAsyncClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.getPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.setProperties*"
  name: "setProperties"
  nameWithType: "FileAsyncClient.setProperties"
  fullName: "com.azure.storage.file.FileAsyncClient.setProperties"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse*"
  name: "setPropertiesWithResponse"
  nameWithType: "FileAsyncClient.setPropertiesWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.setPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileMetadataInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileMetadataInfo"
    name: "FileMetadataInfo"
    fullName: "com.azure.storage.file.models.FileMetadataInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "FileAsyncClient.setMetadata"
  fullName: "com.azure.storage.file.FileAsyncClient.setMetadata"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileMetadataInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileMetadataInfo"
    name: "FileMetadataInfo"
    fullName: "com.azure.storage.file.models.FileMetadataInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "FileAsyncClient.setMetadataWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.setMetadataWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileUploadInfo"
    name: "FileUploadInfo"
    fullName: "com.azure.storage.file.models.FileUploadInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.upload*"
  name: "upload"
  nameWithType: "FileAsyncClient.upload"
  fullName: "com.azure.storage.file.FileAsyncClient.upload"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileUploadInfo"
    name: "FileUploadInfo"
    fullName: "com.azure.storage.file.models.FileUploadInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.uploadWithResponse*"
  name: "uploadWithResponse"
  nameWithType: "FileAsyncClient.uploadWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadWithResponse"
  package: "com.azure.storage.file"
- uid: "java.net.URI"
  spec.java:
  - uid: "java.net.URI"
    name: "URI"
    fullName: "java.net.URI"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.FileUploadRangeFromUrlInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
    name: "FileUploadRangeFromUrlInfo"
    fullName: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl*"
  name: "uploadRangeFromUrl"
  nameWithType: "FileAsyncClient.uploadRangeFromUrl"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrl"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.FileUploadRangeFromUrlInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
    name: "FileUploadRangeFromUrlInfo"
    fullName: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse*"
  name: "uploadRangeFromUrlWithResponse"
  nameWithType: "FileAsyncClient.uploadRangeFromUrlWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadRangeFromUrlWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.clearRange*"
  name: "clearRange"
  nameWithType: "FileAsyncClient.clearRange"
  fullName: "com.azure.storage.file.FileAsyncClient.clearRange"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse*"
  name: "clearRangeWithResponse"
  nameWithType: "FileAsyncClient.clearRangeWithResponse"
  fullName: "com.azure.storage.file.FileAsyncClient.clearRangeWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.uploadFromFile*"
  name: "uploadFromFile"
  nameWithType: "FileAsyncClient.uploadFromFile"
  fullName: "com.azure.storage.file.FileAsyncClient.uploadFromFile"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileRange>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileRange"
    name: "FileRange"
    fullName: "com.azure.storage.file.models.FileRange"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.listRanges*"
  name: "listRanges"
  nameWithType: "FileAsyncClient.listRanges"
  fullName: "com.azure.storage.file.FileAsyncClient.listRanges"
  package: "com.azure.storage.file"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout*"
  name: "listRangesWithOptionalTimeout"
  nameWithType: "FileAsyncClient.listRangesWithOptionalTimeout"
  fullName: "com.azure.storage.file.FileAsyncClient.listRangesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.HandleItem"
    name: "HandleItem"
    fullName: "com.azure.storage.file.models.HandleItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.listHandles*"
  name: "listHandles"
  nameWithType: "FileAsyncClient.listHandles"
  fullName: "com.azure.storage.file.FileAsyncClient.listHandles"
  package: "com.azure.storage.file"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout*"
  name: "listHandlesWithOptionalTimeout"
  nameWithType: "FileAsyncClient.listHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.FileAsyncClient.listHandlesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.FileAsyncClient.forceCloseHandles*"
  name: "forceCloseHandles"
  nameWithType: "FileAsyncClient.forceCloseHandles"
  fullName: "com.azure.storage.file.FileAsyncClient.forceCloseHandles"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout*"
  name: "forceCloseHandlesWithOptionalTimeout"
  nameWithType: "FileAsyncClient.forceCloseHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.FileAsyncClient.forceCloseHandlesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getShareSnapshotId*"
  name: "getShareSnapshotId"
  nameWithType: "FileAsyncClient.getShareSnapshotId"
  fullName: "com.azure.storage.file.FileAsyncClient.getShareSnapshotId"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getShareName*"
  name: "getShareName"
  nameWithType: "FileAsyncClient.getShareName"
  fullName: "com.azure.storage.file.FileAsyncClient.getShareName"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getFilePath*"
  name: "getFilePath"
  nameWithType: "FileAsyncClient.getFilePath"
  fullName: "com.azure.storage.file.FileAsyncClient.getFilePath"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "FileAsyncClient.getAccountName"
  fullName: "com.azure.storage.file.FileAsyncClient.getAccountName"
  package: "com.azure.storage.file"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.storage.file.models.FileInfo"
  name: "FileInfo"
  nameWithType: "FileInfo"
  fullName: "com.azure.storage.file.models.FileInfo"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.storage.file.models.FileCopyInfo"
  name: "FileCopyInfo"
  nameWithType: "FileCopyInfo"
  fullName: "com.azure.storage.file.models.FileCopyInfo"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.storage.file.models.FileProperties"
  name: "FileProperties"
  nameWithType: "FileProperties"
  fullName: "com.azure.storage.file.models.FileProperties"
- uid: "com.azure.storage.file.models.FileDownloadInfo"
  name: "FileDownloadInfo"
  nameWithType: "FileDownloadInfo"
  fullName: "com.azure.storage.file.models.FileDownloadInfo"
- uid: "com.azure.storage.file.models.FileMetadataInfo"
  name: "FileMetadataInfo"
  nameWithType: "FileMetadataInfo"
  fullName: "com.azure.storage.file.models.FileMetadataInfo"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"
- uid: "com.azure.storage.file.models.FileUploadInfo"
  name: "FileUploadInfo"
  nameWithType: "FileUploadInfo"
  fullName: "com.azure.storage.file.models.FileUploadInfo"
- uid: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
  name: "FileUploadRangeFromUrlInfo"
  nameWithType: "FileUploadRangeFromUrlInfo"
  fullName: "com.azure.storage.file.models.FileUploadRangeFromUrlInfo"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.storage.file.models.HandleItem"
  name: "HandleItem"
  nameWithType: "HandleItem"
  fullName: "com.azure.storage.file.models.HandleItem"

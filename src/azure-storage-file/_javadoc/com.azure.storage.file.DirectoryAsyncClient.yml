### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.DirectoryAsyncClient"
  id: "DirectoryAsyncClient"
  parent: "com.azure.storage.file"
  children:
  - "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.create()"
  - "com.azure.storage.file.DirectoryAsyncClient.createFile(java.lang.String,long)"
  - "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.delete()"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteFile(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse()"
  - "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles(java.lang.String,boolean)"
  - "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.getAccountName()"
  - "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath()"
  - "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl()"
  - "com.azure.storage.file.DirectoryAsyncClient.getFileClient(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.getProperties()"
  - "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse()"
  - "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.getShareName()"
  - "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId()"
  - "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient(java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories()"
  - "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories(java.lang.String,java.lang.Integer)"
  - "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.listHandles(java.lang.Integer,boolean)"
  - "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryAsyncClient.setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "DirectoryAsyncClient"
  nameWithType: "DirectoryAsyncClient"
  fullName: "com.azure.storage.file.DirectoryAsyncClient"
  type: "Class"
  package: "com.azure.storage.file"
  summary: "This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service. Operations allowed by the client are creating, deleting and listing subdirectory and file, retrieving properties, setting metadata and list or force close handles of the directory or file.\n\n**Instantiating an Asynchronous Directory Client**\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.instantiation\\}\n\nView <xref uid=\"com.azure.storage.file.FileClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public class DirectoryAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  id: "DirectoryAsyncClient(com.azure.storage.file.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "DirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName)"
  nameWithType: "DirectoryAsyncClient.DirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient*"
  type: "Constructor"
  package: "com.azure.storage.file"
  summary: "Creates a DirectoryAsyncClient that sends requests to the storage directory at <xref uid=\"com.azure.storage.file.implementation.AzureFileStorageImpl.getUrl()\" data-throw-if-not-resolved=\"false\">endpoint</xref>. Each service call goes through the <xref uid=\"\" data-throw-if-not-resolved=\"false\">pipeline</xref> in the `client`."
  syntax:
    content: " DirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName)"
    parameters:
    - id: "azureFileStorageClient"
      type: "com.azure.storage.file.implementation.AzureFileStorageImpl"
      description: "Client that interacts with the service interfaces"
    - id: "shareName"
      type: "java.lang.String"
      description: "Name of the share"
    - id: "directoryPath"
      type: "java.lang.String"
      description: "Name of the directory"
    - id: "snapshot"
      type: "java.lang.String"
      description: "The snapshot of the share"
    - id: "accountName"
      type: "java.lang.String"
- uid: "com.azure.storage.file.DirectoryAsyncClient.create()"
  id: "create()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "create()"
  nameWithType: "DirectoryAsyncClient.create()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.create()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.create*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates this directory in the file share and returns a response of <xref uid=\"com.azure.storage.file.models.DirectoryInfo\" data-throw-if-not-resolved=\"false\">DirectoryInfo</xref> to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.create\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Mono<DirectoryInfo> create()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectoryInfo>"
      description: "The <xref uid=\"com.azure.storage.file.models.DirectoryInfo\" data-throw-if-not-resolved=\"false\">directory info</xref>."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createFile(java.lang.String,long)"
  id: "createFile(java.lang.String,long)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createFile(String fileName, long maxSize)"
  nameWithType: "DirectoryAsyncClient.createFile(String fileName, long maxSize)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createFile(String fileName, long maxSize)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in this directory with specific name, max number of results and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate 1k file with named \"myFile\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.createFile\\#string-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<FileAsyncClient> createFile(String fileName, long maxSize)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    - id: "maxSize"
      type: "long"
      description: "Size of the file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.FileAsyncClient>"
      description: "The FileAsyncClient."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "DirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in this directory with specific name and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.createFileWithResponse\\#string-long-filehttpheaders-filesmbproperties-string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Mono<Response<FileAsyncClient>> createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    - id: "maxSize"
      type: "long"
      description: "Max size of the file"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the file."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.FileAsyncClient>>"
      description: "A response containing the directory info and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  nameWithType: "DirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<FileAsyncClient>> createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
    - id: "maxSize"
      type: "long"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.FileAsyncClient>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory(java.lang.String)"
  id: "createSubDirectory(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createSubDirectory(String subDirectoryName)"
  nameWithType: "DirectoryAsyncClient.createSubDirectory(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a subdirectory under current directory with specific name and returns a response of DirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the sub directory \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.createSubDirectory\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Mono<DirectoryAsyncClient> createSubDirectory(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.DirectoryAsyncClient>"
      description: "A subdirectory client."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "DirectoryAsyncClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a subdirectory under current directory with specific name , metadata and returns a response of DirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the subdirectory named \"subdir\", with metadata\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.createSubDirectoryWithResponse\\#string-filesmbproperties-string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Mono<Response<DirectoryAsyncClient>> createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to associate with the subdirectory"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.DirectoryAsyncClient>>"
      description: "A response containing the subdirectory client and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  nameWithType: "DirectoryAsyncClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<DirectoryAsyncClient>> createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.DirectoryAsyncClient>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  id: "createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "DirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a directory in the file share and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.createWithResponse\\#filesmbproperties-string-map\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Mono<Response<DirectoryInfo>> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to associate with the directory"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>>"
      description: "A response containing the directory info and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  nameWithType: "DirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<DirectoryInfo>> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Context context)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.delete()"
  id: "delete()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "DirectoryAsyncClient.delete()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.delete()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.delete*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the directory in the file share.\n\n**Code Samples**\n\nDelete the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.delete\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Mono<Void> delete()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteFile(java.lang.String)"
  id: "deleteFile(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteFile(String fileName)"
  nameWithType: "DirectoryAsyncClient.deleteFile(String fileName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteFile(String fileName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.deleteFile\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Void> deleteFile(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(java.lang.String)"
  id: "deleteFileWithResponse(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteFileWithResponse(String fileName)"
  nameWithType: "DirectoryAsyncClient.deleteFileWithResponse(String fileName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(String fileName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.deleteFileWithResponse\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Mono<Response<Void>> deleteFileWithResponse(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteFileWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteFileWithResponse(String fileName, Context context)"
  nameWithType: "DirectoryAsyncClient.deleteFileWithResponse(String fileName, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse(String fileName, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<Void>> deleteFileWithResponse(String fileName, Context context)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory(java.lang.String)"
  id: "deleteSubDirectory(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteSubDirectory(String subDirectoryName)"
  nameWithType: "DirectoryAsyncClient.deleteSubDirectory(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the subdirectory with specific name in this directory.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.deleteSubDirectory\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Mono<Void> deleteSubDirectory(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty response."
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(java.lang.String)"
  id: "deleteSubDirectoryWithResponse(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteSubDirectoryWithResponse(String subDirectoryName)"
  nameWithType: "DirectoryAsyncClient.deleteSubDirectoryWithResponse(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the subdirectory with specific name in this directory.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.deleteSubDirectoryWithResponse\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Mono<Response<Void>> deleteSubDirectoryWithResponse(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteSubDirectoryWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteSubDirectoryWithResponse(String subDirectoryName, Context context)"
  nameWithType: "DirectoryAsyncClient.deleteSubDirectoryWithResponse(String subDirectoryName, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse(String subDirectoryName, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<Void>> deleteSubDirectoryWithResponse(String subDirectoryName, Context context)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse()"
  id: "deleteWithResponse()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse()"
  nameWithType: "DirectoryAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the directory in the file share.\n\n**Code Samples**\n\nDelete the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.deleteWithResponse\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Mono<Response<Void>> deleteWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse(com.azure.core.util.Context)"
  id: "deleteWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "deleteWithResponse(Context context)"
  nameWithType: "DirectoryAsyncClient.deleteWithResponse(Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse(Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<Void>> deleteWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles(java.lang.String,boolean)"
  id: "forceCloseHandles(java.lang.String,boolean)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandles(String handleId, boolean recursive)"
  nameWithType: "DirectoryAsyncClient.forceCloseHandles(String handleId, boolean recursive)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles(String handleId, boolean recursive)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Closes a handle or handles opened on a directory or a file at the service. It is intended to be used alongside <xref uid=\"com.azure.storage.file.DirectoryAsyncClient.listHandles(java.lang.Integer,boolean)\" data-throw-if-not-resolved=\"false\">DirectoryAsyncClient#listHandles(Integer, boolean)</xref> .\n\n**Code Samples**\n\nForce close handles with handles returned by get handles in recursive.\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.forceCloseHandles\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public PagedFlux<Integer> forceCloseHandles(String handleId, boolean recursive)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
      description: "Specifies the handle ID to be closed. Use an asterisk ('*') as a wildcard string to specify all\n handles."
    - id: "recursive"
      type: "boolean"
      description: "A boolean value that specifies if the operation should also apply to the files and\n subdirectories of the directory specified in the URI."
    return:
      type: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
      description: "The counts of number of handles closed"
- uid: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  id: "forceCloseHandlesWithOptionalTimeout(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "forceCloseHandlesWithOptionalTimeout(String handleId, boolean recursive, Duration timeout, Context context)"
  nameWithType: "DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout(String handleId, boolean recursive, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout(String handleId, boolean recursive, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<Integer> forceCloseHandlesWithOptionalTimeout(String handleId, boolean recursive, Duration timeout, Context context)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
    - id: "recursive"
      type: "boolean"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "DirectoryAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getAccountName()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "account name associated with this storage resource."
- uid: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath()"
  id: "getDirectoryPath()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getDirectoryPath()"
  nameWithType: "DirectoryAsyncClient.getDirectoryPath()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get directory path of the client.\n\nGet directory path.\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.getDirectoryPath\\}"
  syntax:
    content: "public String getDirectoryPath()"
    return:
      type: "java.lang.String"
      description: "The path of the directory."
- uid: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl()"
  id: "getDirectoryUrl()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getDirectoryUrl()"
  nameWithType: "DirectoryAsyncClient.getDirectoryUrl()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the url of the storage directory client."
  syntax:
    content: "public String getDirectoryUrl()"
    return:
      type: "java.lang.String"
      description: "the URL of the storage directory client"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getFileClient(java.lang.String)"
  id: "getFileClient(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getFileClient(String fileName)"
  nameWithType: "DirectoryAsyncClient.getFileClient(String fileName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getFileClient(String fileName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getFileClient*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Constructs a FileAsyncClient that interacts with the specified file.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.FileAsyncClient.create(long)\" data-throw-if-not-resolved=\"false\">FileAsyncClient#create(long)</xref> create\\} in the client will need to be called before interaction with the file can happen."
  syntax:
    content: "public FileAsyncClient getFileClient(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    return:
      type: "com.azure.storage.file.FileAsyncClient"
      description: "a FileAsyncClient that interacts with the specified share"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "DirectoryAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getProperties()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.getProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties"
  syntax:
    content: "public Mono<DirectoryProperties> getProperties()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectoryProperties>"
      description: "Storage directory properties"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse()"
  id: "getPropertiesWithResponse()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse()"
  nameWithType: "DirectoryAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.getPropertiesWithResponse\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties"
  syntax:
    content: "public Mono<Response<DirectoryProperties>> getPropertiesWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryProperties>>"
      description: "A response containing the storage directory properties with headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse(com.azure.core.util.Context)"
  id: "getPropertiesWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(Context context)"
  nameWithType: "DirectoryAsyncClient.getPropertiesWithResponse(Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse(Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<DirectoryProperties>> getPropertiesWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryProperties>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getShareName()"
  id: "getShareName()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getShareName()"
  nameWithType: "DirectoryAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getShareName()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getShareName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the share name of directory client.\n\nGet the share name.\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.getShareName\\}"
  syntax:
    content: "public String getShareName()"
    return:
      type: "java.lang.String"
      description: "The share name of the directory."
- uid: "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId()"
  id: "getShareSnapshotId()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getShareSnapshotId()"
  nameWithType: "DirectoryAsyncClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.DirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">DirectoryAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.getShareSnapshotId\\}"
  syntax:
    content: "public String getShareSnapshotId()"
    return:
      type: "java.lang.String"
      description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
- uid: "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient(java.lang.String)"
  id: "getSubDirectoryClient(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "getSubDirectoryClient(String subDirectoryName)"
  nameWithType: "DirectoryAsyncClient.getSubDirectoryClient(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Constructs a DirectoryAsyncClient that interacts with the specified directory.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.DirectoryAsyncClient.create()\" data-throw-if-not-resolved=\"false\">DirectoryAsyncClient#create()</xref> create\\} in the client will need to be called before interaction with the directory can happen."
  syntax:
    content: "public DirectoryAsyncClient getSubDirectoryClient(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the directory"
    return:
      type: "com.azure.storage.file.DirectoryAsyncClient"
      description: "a DirectoryAsyncClient that interacts with the specified directory"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories()"
  id: "listFilesAndDirectories()"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "listFilesAndDirectories()"
  nameWithType: "DirectoryAsyncClient.listFilesAndDirectories()"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories()"
  overload: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Lists all sub-directories and files in this directory without their prefix or maxResult.\n\n**Code Samples**\n\nList all sub-directories and files in the account\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.listFilesAndDirectories\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files"
  syntax:
    content: "public PagedFlux<FileReference> listFilesAndDirectories()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileReference>"
      description: "<xref uid=\"com.azure.storage.file.models.FileReference\" data-throw-if-not-resolved=\"false\">File info</xref> in the storage directory"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories(java.lang.String,java.lang.Integer)"
  id: "listFilesAndDirectories(java.lang.String,java.lang.Integer)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "listFilesAndDirectories(String prefix, Integer maxResults)"
  nameWithType: "DirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResults)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResults)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Lists all sub-directories and files in this directory with their prefix or snapshots.\n\n**Code Samples**\n\nList all sub-directories with \"subdir\" prefix and return 10 results in the account\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.listFilesAndDirectories\\#string-integer\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files"
  syntax:
    content: "public PagedFlux<FileReference> listFilesAndDirectories(String prefix, Integer maxResults)"
    parameters:
    - id: "prefix"
      type: "java.lang.String"
      description: "Optional prefix which filters the results to return only files and directories whose name begins\n with."
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "Optional maximum number of files and/or directories to return per page. If the request does not\n specify maxresults or specifies a value greater than 5,000, the server will return up to 5,000 items."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileReference>"
      description: "<xref uid=\"com.azure.storage.file.models.FileReference\" data-throw-if-not-resolved=\"false\">File info</xref> in this directory with prefix and max number of return results."
- uid: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  id: "listFilesAndDirectoriesWithOptionalTimeout(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "listFilesAndDirectoriesWithOptionalTimeout(String prefix, Integer maxResults, Duration timeout, Context context)"
  nameWithType: "DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout(String prefix, Integer maxResults, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout(String prefix, Integer maxResults, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<FileReference> listFilesAndDirectoriesWithOptionalTimeout(String prefix, Integer maxResults, Duration timeout, Context context)"
    parameters:
    - id: "prefix"
      type: "java.lang.String"
    - id: "maxResults"
      type: "java.lang.Integer"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileReference>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listHandles(java.lang.Integer,boolean)"
  id: "listHandles(java.lang.Integer,boolean)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "listHandles(Integer maxResult, boolean recursive)"
  nameWithType: "DirectoryAsyncClient.listHandles(Integer maxResult, boolean recursive)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listHandles(Integer maxResult, boolean recursive)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of open handles on a directory or a file.\n\n**Code Samples**\n\nGet 10 handles with recursive call.\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.listHandles\\#integer-boolean\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedFlux<HandleItem> listHandles(Integer maxResult, boolean recursive)"
    parameters:
    - id: "maxResult"
      type: "java.lang.Integer"
      description: "Optional maximum number of results will return per page"
    - id: "recursive"
      type: "boolean"
      description: "Specifies operation should apply to the directory specified in the URI, its files, its\n subdirectories and their files."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the directory that satisfy the requirements"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  id: "listHandlesWithOptionalTimeout(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "listHandlesWithOptionalTimeout(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  nameWithType: "DirectoryAsyncClient.listHandlesWithOptionalTimeout(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " PagedFlux<HandleItem> listHandlesWithOptionalTimeout(Integer maxResult, boolean recursive, Duration timeout, Context context)"
    parameters:
    - id: "maxResult"
      type: "java.lang.Integer"
    - id: "recursive"
      type: "boolean"
    - id: "timeout"
      type: "java.time.Duration"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DirectoryAsyncClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setMetadata\\#map\\}\n\nClear the metadata of the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setMetadata\\#map.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata"
  syntax:
    content: "public Mono<DirectorySetMetadataInfo> setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectorySetMetadataInfo>"
      description: "information about the directory"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "DirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setMetadataWithResponse\\#map\\}\n\nClear the metadata of the directory\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setMetadataWithResponse\\#map.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata"
  syntax:
    content: "public Mono<Response<DirectorySetMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectorySetMetadataInfo>>"
      description: "A response containing the information about the directory with headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, Context context)"
  nameWithType: "DirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<DirectorySetMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectorySetMetadataInfo>>"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  id: "setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setProperties(FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "DirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setProperties\\#filesmbproperties-string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties"
  syntax:
    content: "public Mono<DirectoryInfo> setProperties(FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    return:
      type: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectoryInfo>"
      description: "The storage directory SMB properties"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  id: "setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "DirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryAsyncClient.setPropertiesWithResponse\\#filesmbproperties-string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties"
  syntax:
    content: "public Mono<Response<DirectoryInfo>> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>>"
      description: "A response containing the storage directory smb properties with headers and response status code"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  id: "setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryAsyncClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Context context)"
  nameWithType: "DirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Context context)"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Context context)"
  overload: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  syntax:
    content: " Mono<Response<DirectoryInfo>> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Context context)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
    - id: "filePermission"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>>"
references:
- uid: "com.azure.storage.file.implementation.AzureFileStorageImpl"
  name: "AzureFileStorageImpl"
  nameWithType: "AzureFileStorageImpl"
  fullName: "com.azure.storage.file.implementation.AzureFileStorageImpl"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient*"
  name: "DirectoryAsyncClient"
  nameWithType: "DirectoryAsyncClient.DirectoryAsyncClient"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.DirectoryAsyncClient"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl*"
  name: "getDirectoryUrl"
  nameWithType: "DirectoryAsyncClient.getDirectoryUrl"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryUrl"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileAsyncClient"
  name: "FileAsyncClient"
  nameWithType: "FileAsyncClient"
  fullName: "com.azure.storage.file.FileAsyncClient"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getFileClient*"
  name: "getFileClient"
  nameWithType: "DirectoryAsyncClient.getFileClient"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getFileClient"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient*"
  name: "getSubDirectoryClient"
  nameWithType: "DirectoryAsyncClient.getSubDirectoryClient"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getSubDirectoryClient"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectoryInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryInfo"
    name: "DirectoryInfo"
    fullName: "com.azure.storage.file.models.DirectoryInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.create*"
  name: "create"
  nameWithType: "DirectoryAsyncClient.create"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.create"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileSmbProperties"
  name: "FileSmbProperties"
  nameWithType: "FileSmbProperties"
  fullName: "com.azure.storage.file.FileSmbProperties"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryInfo"
    name: "DirectoryInfo"
    fullName: "com.azure.storage.file.models.DirectoryInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "DirectoryAsyncClient.createWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.delete*"
  name: "delete"
  nameWithType: "DirectoryAsyncClient.delete"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.delete"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "DirectoryAsyncClient.deleteWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectoryProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryProperties"
    name: "DirectoryProperties"
    fullName: "com.azure.storage.file.models.DirectoryProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getProperties*"
  name: "getProperties"
  nameWithType: "DirectoryAsyncClient.getProperties"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getProperties"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryProperties"
    name: "DirectoryProperties"
    fullName: "com.azure.storage.file.models.DirectoryProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "DirectoryAsyncClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setProperties*"
  name: "setProperties"
  nameWithType: "DirectoryAsyncClient.setProperties"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setProperties"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse*"
  name: "setPropertiesWithResponse"
  nameWithType: "DirectoryAsyncClient.setPropertiesWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.models.DirectorySetMetadataInfo>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectorySetMetadataInfo"
    name: "DirectorySetMetadataInfo"
    fullName: "com.azure.storage.file.models.DirectorySetMetadataInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "DirectoryAsyncClient.setMetadata"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setMetadata"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectorySetMetadataInfo>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectorySetMetadataInfo"
    name: "DirectorySetMetadataInfo"
    fullName: "com.azure.storage.file.models.DirectorySetMetadataInfo"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "DirectoryAsyncClient.setMetadataWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.setMetadataWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.FileReference>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileReference"
    name: "FileReference"
    fullName: "com.azure.storage.file.models.FileReference"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories*"
  name: "listFilesAndDirectories"
  nameWithType: "DirectoryAsyncClient.listFilesAndDirectories"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectories"
  package: "com.azure.storage.file"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout*"
  name: "listFilesAndDirectoriesWithOptionalTimeout"
  nameWithType: "DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listFilesAndDirectoriesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.storage.file.models.HandleItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.HandleItem"
    name: "HandleItem"
    fullName: "com.azure.storage.file.models.HandleItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listHandles*"
  name: "listHandles"
  nameWithType: "DirectoryAsyncClient.listHandles"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listHandles"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout*"
  name: "listHandlesWithOptionalTimeout"
  nameWithType: "DirectoryAsyncClient.listHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.listHandlesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedFlux<java.lang.Integer>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles*"
  name: "forceCloseHandles"
  nameWithType: "DirectoryAsyncClient.forceCloseHandles"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandles"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout*"
  name: "forceCloseHandlesWithOptionalTimeout"
  nameWithType: "DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.forceCloseHandlesWithOptionalTimeout"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.DirectoryAsyncClient>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.DirectoryAsyncClient"
    name: "DirectoryAsyncClient"
    fullName: "com.azure.storage.file.DirectoryAsyncClient"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory*"
  name: "createSubDirectory"
  nameWithType: "DirectoryAsyncClient.createSubDirectory"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectory"
  package: "com.azure.storage.file"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.DirectoryAsyncClient>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.DirectoryAsyncClient"
    name: "DirectoryAsyncClient"
    fullName: "com.azure.storage.file.DirectoryAsyncClient"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse*"
  name: "createSubDirectoryWithResponse"
  nameWithType: "DirectoryAsyncClient.createSubDirectoryWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createSubDirectoryWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory*"
  name: "deleteSubDirectory"
  nameWithType: "DirectoryAsyncClient.deleteSubDirectory"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectory"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse*"
  name: "deleteSubDirectoryWithResponse"
  nameWithType: "DirectoryAsyncClient.deleteSubDirectoryWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteSubDirectoryWithResponse"
  package: "com.azure.storage.file"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "reactor.core.publisher.Mono<com.azure.storage.file.FileAsyncClient>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.FileAsyncClient"
    name: "FileAsyncClient"
    fullName: "com.azure.storage.file.FileAsyncClient"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createFile*"
  name: "createFile"
  nameWithType: "DirectoryAsyncClient.createFile"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createFile"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.FileHTTPHeaders"
  name: "FileHTTPHeaders"
  nameWithType: "FileHTTPHeaders"
  fullName: "com.azure.storage.file.models.FileHTTPHeaders"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.FileAsyncClient>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.FileAsyncClient"
    name: "FileAsyncClient"
    fullName: "com.azure.storage.file.FileAsyncClient"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse*"
  name: "createFileWithResponse"
  nameWithType: "DirectoryAsyncClient.createFileWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.createFileWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteFile*"
  name: "deleteFile"
  nameWithType: "DirectoryAsyncClient.deleteFile"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteFile"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse*"
  name: "deleteFileWithResponse"
  nameWithType: "DirectoryAsyncClient.deleteFileWithResponse"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.deleteFileWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId*"
  name: "getShareSnapshotId"
  nameWithType: "DirectoryAsyncClient.getShareSnapshotId"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getShareSnapshotId"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getShareName*"
  name: "getShareName"
  nameWithType: "DirectoryAsyncClient.getShareName"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getShareName"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath*"
  name: "getDirectoryPath"
  nameWithType: "DirectoryAsyncClient.getDirectoryPath"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getDirectoryPath"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryAsyncClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "DirectoryAsyncClient.getAccountName"
  fullName: "com.azure.storage.file.DirectoryAsyncClient.getAccountName"
  package: "com.azure.storage.file"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.storage.file.models.DirectoryInfo"
  name: "DirectoryInfo"
  nameWithType: "DirectoryInfo"
  fullName: "com.azure.storage.file.models.DirectoryInfo"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.storage.file.models.DirectoryProperties"
  name: "DirectoryProperties"
  nameWithType: "DirectoryProperties"
  fullName: "com.azure.storage.file.models.DirectoryProperties"
- uid: "com.azure.storage.file.models.DirectorySetMetadataInfo"
  name: "DirectorySetMetadataInfo"
  nameWithType: "DirectorySetMetadataInfo"
  fullName: "com.azure.storage.file.models.DirectorySetMetadataInfo"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.storage.file.models.FileReference"
  name: "FileReference"
  nameWithType: "FileReference"
  fullName: "com.azure.storage.file.models.FileReference"
- uid: "com.azure.storage.file.models.HandleItem"
  name: "HandleItem"
  nameWithType: "HandleItem"
  fullName: "com.azure.storage.file.models.HandleItem"

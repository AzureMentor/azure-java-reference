### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubConsumer"
  id: "EventHubConsumer"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer(com.azure.messaging.eventhubs.EventHubAsyncConsumer,java.time.Duration)"
  - "com.azure.messaging.eventhubs.EventHubConsumer.close()"
  - "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties()"
  - "com.azure.messaging.eventhubs.EventHubConsumer.receive(int)"
  - "com.azure.messaging.eventhubs.EventHubConsumer.receive(int,java.time.Duration)"
  langs:
  - "java"
  name: "EventHubConsumer"
  nameWithType: "EventHubConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.\n\n *  If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getOwnerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\"\n *  Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getOwnerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\"\n\n**Creating a synchronous consumer**\n\nCreate an <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> using <xref uid=\"com.azure.messaging.eventhubs.EventHubClient\" data-throw-if-not-resolved=\"false\">EventHubClient</xref>. \\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumer.instantiation\\}\n\n**Consuming events from an Event Hub**\n\nEvents can be consumed using <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer.receive(int)\" data-throw-if-not-resolved=\"false\">#receive(int)</xref> or <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer.receive(int,java.time.Duration)\" data-throw-if-not-resolved=\"false\">#receive(int, Duration)</xref>. The call to \\`receive\\` completes and returns an <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> when either the number of events is reached, or the timeout duration is reached. \\{@codesnippet com.azure.messaging.eventhubs.eventhubconsumer.receive\\#int-duration\\}"
  syntax:
    content: "public class EventHubConsumer implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer(com.azure.messaging.eventhubs.EventHubAsyncConsumer,java.time.Duration)"
  id: "EventHubConsumer(com.azure.messaging.eventhubs.EventHubAsyncConsumer,java.time.Duration)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumer"
  langs:
  - "java"
  name: "EventHubConsumer(EventHubAsyncConsumer consumer, Duration tryTimeout)"
  nameWithType: "EventHubConsumer.EventHubConsumer(EventHubAsyncConsumer consumer, Duration tryTimeout)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer(EventHubAsyncConsumer consumer, Duration tryTimeout)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " EventHubConsumer(EventHubAsyncConsumer consumer, Duration tryTimeout)"
    parameters:
    - id: "consumer"
      type: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
    - id: "tryTimeout"
      type: "java.time.Duration"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumer"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubConsumer.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.close()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumer.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "\\{@inheritDoc\\}"
  syntax:
    content: "public void close()"
  exceptions:
  - type: "java.io.IOException"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties()"
  id: "getLastEnqueuedEventProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubConsumer"
  langs:
  - "java"
  name: "getLastEnqueuedEventProperties()"
  nameWithType: "EventHubConsumer.getLastEnqueuedEventProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "A set of information about the last enqueued event of a partition, as observed by the consumer as events are received from the Event Hubs service."
  syntax:
    content: "public LastEnqueuedEventProperties getLastEnqueuedEventProperties()"
    return:
      type: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
      description: "<code>null</code> if <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getTrackLastEnqueuedEventProperties()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getTrackLastEnqueuedEventProperties()</xref> was not set when\n     creating the consumer. Otherwise, the properties describing the most recently enqueued event in the\n     partition."
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.receive(int)"
  id: "receive(int)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumer"
  langs:
  - "java"
  name: "receive(int maximumMessageCount)"
  nameWithType: "EventHubConsumer.receive(int maximumMessageCount)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.receive(int maximumMessageCount)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumer.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Receives a batch of EventData from the Event Hub partition."
  syntax:
    content: "public IterableStream<EventData> receive(int maximumMessageCount)"
    parameters:
    - id: "maximumMessageCount"
      type: "int"
      description: "The maximum number of messages to receive in this batch."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.EventData>"
      description: "A set of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> that was received. The iterable contains up to <code>maximumMessageCount</code>\n     events."
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.receive(int,java.time.Duration)"
  id: "receive(int,java.time.Duration)"
  parent: "com.azure.messaging.eventhubs.EventHubConsumer"
  langs:
  - "java"
  name: "receive(int maximumMessageCount, Duration maximumWaitTime)"
  nameWithType: "EventHubConsumer.receive(int maximumMessageCount, Duration maximumWaitTime)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.receive(int maximumMessageCount, Duration maximumWaitTime)"
  overload: "com.azure.messaging.eventhubs.EventHubConsumer.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Receives a batch of EventData from the Event Hub partition"
  syntax:
    content: "public IterableStream<EventData> receive(int maximumMessageCount, Duration maximumWaitTime)"
    parameters:
    - id: "maximumMessageCount"
      type: "int"
      description: "The maximum number of messages to receive in this batch."
    - id: "maximumWaitTime"
      type: "java.time.Duration"
      description: "The maximum amount of time to wait to build up the requested message count for the\n     batch; if not specified, the default wait time specified when the consumer was created will be used."
    return:
      type: "com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.EventData>"
      description: "A set of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> that was received. The iterable contains up to <code>maximumMessageCount</code>\n     events."
references:
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  name: "EventHubAsyncConsumer"
  nameWithType: "EventHubAsyncConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer*"
  name: "EventHubConsumer"
  nameWithType: "EventHubConsumer.EventHubConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.EventHubConsumer"
  package: "com.azure.messaging.eventhubs"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.EventData>"
  spec.java:
  - uid: "com.azure.core.util.IterableStream"
    name: "IterableStream"
    fullName: "com.azure.core.util.IterableStream"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventData"
    name: "EventData"
    fullName: "com.azure.messaging.eventhubs.EventData"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.receive*"
  name: "receive"
  nameWithType: "EventHubConsumer.receive"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.receive"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
  name: "LastEnqueuedEventProperties"
  nameWithType: "LastEnqueuedEventProperties"
  fullName: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties*"
  name: "getLastEnqueuedEventProperties"
  nameWithType: "EventHubConsumer.getLastEnqueuedEventProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.getLastEnqueuedEventProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.azure.messaging.eventhubs.EventHubConsumer.close*"
  name: "close"
  nameWithType: "EventHubConsumer.close"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumer.close"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.util.IterableStream"
  name: "IterableStream"
  nameWithType: "IterableStream"
  fullName: "com.azure.core.util.IterableStream"
- uid: "com.azure.messaging.eventhubs.EventData"
  name: "EventData"
  nameWithType: "EventData"
  fullName: "com.azure.messaging.eventhubs.EventData"

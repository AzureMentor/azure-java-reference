### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  id: "EventHubAsyncConsumer"
  parent: "com.azure.messaging.eventhubs"
  children:
  - "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer(reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>,com.azure.core.amqp.implementation.MessageSerializer,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  - "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close()"
  - "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties()"
  - "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive()"
  langs:
  - "java"
  name: "EventHubAsyncConsumer"
  nameWithType: "EventHubAsyncConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  type: "Class"
  package: "com.azure.messaging.eventhubs"
  summary: "A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.\n\n *  If <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncConsumer\" data-throw-if-not-resolved=\"false\">EventHubAsyncConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getOwnerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\"\n *  Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getOwnerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\"\n\n**Consuming events from Event Hub**\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncconsumer.receive\\}\n\n**Rate limiting consumption of events from Event Hub**\n\nFor event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"reactor.core.publisher.BaseSubscriber.request(long)\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>. \\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncconsumer.receive\\#basesubscriber\\}"
  syntax:
    content: "public class EventHubAsyncConsumer implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer(reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>,com.azure.core.amqp.implementation.MessageSerializer,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  id: "EventHubAsyncConsumer(reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>,com.azure.core.amqp.implementation.MessageSerializer,com.azure.messaging.eventhubs.models.EventHubConsumerOptions)"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  langs:
  - "java"
  name: "EventHubAsyncConsumer(Mono<AmqpReceiveLink> receiveLinkMono, MessageSerializer messageSerializer, EventHubConsumerOptions options)"
  nameWithType: "EventHubAsyncConsumer.EventHubAsyncConsumer(Mono<AmqpReceiveLink> receiveLinkMono, MessageSerializer messageSerializer, EventHubConsumerOptions options)"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer(Mono<AmqpReceiveLink> receiveLinkMono, MessageSerializer messageSerializer, EventHubConsumerOptions options)"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs"
  syntax:
    content: " EventHubAsyncConsumer(Mono<AmqpReceiveLink> receiveLinkMono, MessageSerializer messageSerializer, EventHubConsumerOptions options)"
    parameters:
    - id: "receiveLinkMono"
      type: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>"
    - id: "messageSerializer"
      type: "com.azure.core.amqp.implementation.MessageSerializer"
    - id: "options"
      type: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close()"
  id: "close()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  langs:
  - "java"
  name: "close()"
  nameWithType: "EventHubAsyncConsumer.close()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Disposes of the consumer by closing the underlying connection to the service."
  syntax:
    content: "public void close()"
  exceptions:
  - type: "java.io.IOException"
    description: "if the underlying transport and its resources could not be disposed."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties()"
  id: "getLastEnqueuedEventProperties()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  langs:
  - "java"
  name: "getLastEnqueuedEventProperties()"
  nameWithType: "EventHubAsyncConsumer.getLastEnqueuedEventProperties()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "A set of information about the last enqueued event of a partition, as observed by the consumer as events are received from the Event Hubs service."
  syntax:
    content: "public LastEnqueuedEventProperties getLastEnqueuedEventProperties()"
    return:
      type: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
      description: "<code>null</code> if <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.getTrackLastEnqueuedEventProperties()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#getTrackLastEnqueuedEventProperties()</xref> was not set when\n     creating the consumer. Otherwise, the properties describing the most recently enqueued event in the\n     partition."
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive()"
  id: "receive()"
  parent: "com.azure.messaging.eventhubs.EventHubAsyncConsumer"
  langs:
  - "java"
  name: "receive()"
  nameWithType: "EventHubAsyncConsumer.receive()"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive()"
  overload: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive*"
  type: "Method"
  package: "com.azure.messaging.eventhubs"
  summary: "Begin consuming events until there are no longer any subscribers, or the parent <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient.close()\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient.close()</xref> is called.\n\n**Consuming events from Event Hub**\n\n\\{@codesnippet com.azure.messaging.eventhubs.eventhubasyncconsumer.receive\\}"
  syntax:
    content: "public Flux<EventData> receive()"
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>"
      description: "A stream of events for this consumer."
references:
- uid: "reactor.core.publisher.Mono<com.azure.core.amqp.implementation.AmqpReceiveLink>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.amqp.implementation.AmqpReceiveLink"
    name: "AmqpReceiveLink"
    fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.amqp.implementation.MessageSerializer"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.MessageSerializer"
    name: "MessageSerializer"
    fullName: "com.azure.core.amqp.implementation.MessageSerializer"
- uid: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
  name: "EventHubConsumerOptions"
  nameWithType: "EventHubConsumerOptions"
  fullName: "com.azure.messaging.eventhubs.models.EventHubConsumerOptions"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer*"
  name: "EventHubAsyncConsumer"
  nameWithType: "EventHubAsyncConsumer.EventHubAsyncConsumer"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.EventHubAsyncConsumer"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close*"
  name: "close"
  nameWithType: "EventHubAsyncConsumer.close"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.close"
  package: "com.azure.messaging.eventhubs"
- uid: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.EventData>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.EventData"
    name: "EventData"
    fullName: "com.azure.messaging.eventhubs.EventData"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive*"
  name: "receive"
  nameWithType: "EventHubAsyncConsumer.receive"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.receive"
  package: "com.azure.messaging.eventhubs"
- uid: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
  name: "LastEnqueuedEventProperties"
  nameWithType: "LastEnqueuedEventProperties"
  fullName: "com.azure.messaging.eventhubs.models.LastEnqueuedEventProperties"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties*"
  name: "getLastEnqueuedEventProperties"
  nameWithType: "EventHubAsyncConsumer.getLastEnqueuedEventProperties"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncConsumer.getLastEnqueuedEventProperties"
  package: "com.azure.messaging.eventhubs"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.amqp.implementation.AmqpReceiveLink"
  name: "AmqpReceiveLink"
  nameWithType: "AmqpReceiveLink"
  fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.messaging.eventhubs.EventData"
  name: "EventData"
  nameWithType: "EventData"
  fullName: "com.azure.messaging.eventhubs.EventData"

### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager"
  id: "PartitionPumpManager"
  parent: "com.azure.messaging.eventhubs.implementation"
  children:
  - "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager(com.azure.messaging.eventhubs.PartitionManager,java.util.function.Supplier<com.azure.messaging.eventhubs.PartitionProcessor>,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.implementation.TracerProvider)"
  - "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump(com.azure.messaging.eventhubs.models.PartitionOwnership)"
  - "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps()"
  langs:
  - "java"
  name: "PartitionPumpManager"
  nameWithType: "PartitionPumpManager"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager"
  type: "Class"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "The partition pump manager that keeps track of all the partition pumps started by this <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref>. Each partition pump is an <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> that is receiving events from partitions this <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> has claimed ownership of.\n\nNew partition pumps are created when this <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> claims ownership of a new partition. When the <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> is requested to stop, this class is responsible for stopping all event processing tasks and closing all connections to the Event Hub."
  syntax:
    content: "public class PartitionPumpManager"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager(com.azure.messaging.eventhubs.PartitionManager,java.util.function.Supplier<com.azure.messaging.eventhubs.PartitionProcessor>,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.implementation.TracerProvider)"
  id: "PartitionPumpManager(com.azure.messaging.eventhubs.PartitionManager,java.util.function.Supplier<com.azure.messaging.eventhubs.PartitionProcessor>,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.EventHubAsyncClient,com.azure.core.amqp.implementation.TracerProvider)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager"
  langs:
  - "java"
  name: "PartitionPumpManager(PartitionManager partitionManager, Supplier<PartitionProcessor> partitionProcessorFactory, EventPosition initialEventPosition, EventHubAsyncClient eventHubAsyncClient, TracerProvider tracerProvider)"
  nameWithType: "PartitionPumpManager.PartitionPumpManager(PartitionManager partitionManager, Supplier<PartitionProcessor> partitionProcessorFactory, EventPosition initialEventPosition, EventHubAsyncClient eventHubAsyncClient, TracerProvider tracerProvider)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager(PartitionManager partitionManager, Supplier<PartitionProcessor> partitionProcessorFactory, EventPosition initialEventPosition, EventHubAsyncClient eventHubAsyncClient, TracerProvider tracerProvider)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "Creates an instance of partition pump manager."
  syntax:
    content: "public PartitionPumpManager(PartitionManager partitionManager, Supplier<PartitionProcessor> partitionProcessorFactory, EventPosition initialEventPosition, EventHubAsyncClient eventHubAsyncClient, TracerProvider tracerProvider)"
    parameters:
    - id: "partitionManager"
      type: "com.azure.messaging.eventhubs.PartitionManager"
      description: "The partition manager that is used to store and update checkpoints."
    - id: "partitionProcessorFactory"
      type: "java.util.function.Supplier<com.azure.messaging.eventhubs.PartitionProcessor>"
      description: "The partition processor factory that is used to create new instances of <xref uid=\"com.azure.messaging.eventhubs.PartitionProcessor\" data-throw-if-not-resolved=\"false\">PartitionProcessor</xref> when new partition pumps are started."
    - id: "initialEventPosition"
      type: "com.azure.messaging.eventhubs.models.EventPosition"
      description: "The initial event position to use when a new partition pump is created and no\n checkpoint for the partition is available."
    - id: "eventHubAsyncClient"
      type: "com.azure.messaging.eventhubs.EventHubAsyncClient"
      description: "The client used to receive events from the Event Hub."
    - id: "tracerProvider"
      type: "com.azure.core.amqp.implementation.TracerProvider"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump(com.azure.messaging.eventhubs.models.PartitionOwnership)"
  id: "startPartitionPump(com.azure.messaging.eventhubs.models.PartitionOwnership)"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager"
  langs:
  - "java"
  name: "startPartitionPump(PartitionOwnership claimedOwnership)"
  nameWithType: "PartitionPumpManager.startPartitionPump(PartitionOwnership claimedOwnership)"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump(PartitionOwnership claimedOwnership)"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "Starts a new partition pump for the newly claimed partition. If the partition already has an active partition pump, this will not create a new consumer."
  syntax:
    content: "public void startPartitionPump(PartitionOwnership claimedOwnership)"
    parameters:
    - id: "claimedOwnership"
      type: "com.azure.messaging.eventhubs.models.PartitionOwnership"
      description: "The details of partition ownership for which new partition pump is requested to start."
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps()"
  id: "stopAllPartitionPumps()"
  parent: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager"
  langs:
  - "java"
  name: "stopAllPartitionPumps()"
  nameWithType: "PartitionPumpManager.stopAllPartitionPumps()"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps()"
  overload: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.implementation"
  summary: "Stops all partition pumps that are actively consuming events. This method is invoked when the <xref uid=\"com.azure.messaging.eventhubs.EventProcessor\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> is requested to stop."
  syntax:
    content: "public void stopAllPartitionPumps()"
references:
- uid: "com.azure.messaging.eventhubs.PartitionManager"
  name: "PartitionManager"
  nameWithType: "PartitionManager"
  fullName: "com.azure.messaging.eventhubs.PartitionManager"
- uid: "java.util.function.Supplier<com.azure.messaging.eventhubs.PartitionProcessor>"
  spec.java:
  - uid: "java.util.function.Supplier"
    name: "Supplier"
    fullName: "java.util.function.Supplier"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.PartitionProcessor"
    name: "PartitionProcessor"
    fullName: "com.azure.messaging.eventhubs.PartitionProcessor"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.models.EventPosition"
  name: "EventPosition"
  nameWithType: "EventPosition"
  fullName: "com.azure.messaging.eventhubs.models.EventPosition"
- uid: "com.azure.messaging.eventhubs.EventHubAsyncClient"
  name: "EventHubAsyncClient"
  nameWithType: "EventHubAsyncClient"
  fullName: "com.azure.messaging.eventhubs.EventHubAsyncClient"
- uid: "com.azure.core.amqp.implementation.TracerProvider"
  spec.java:
  - uid: "com.azure.core.amqp.implementation.TracerProvider"
    name: "TracerProvider"
    fullName: "com.azure.core.amqp.implementation.TracerProvider"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager*"
  name: "PartitionPumpManager"
  nameWithType: "PartitionPumpManager.PartitionPumpManager"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.PartitionPumpManager"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps*"
  name: "stopAllPartitionPumps"
  nameWithType: "PartitionPumpManager.stopAllPartitionPumps"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.stopAllPartitionPumps"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "com.azure.messaging.eventhubs.models.PartitionOwnership"
  name: "PartitionOwnership"
  nameWithType: "PartitionOwnership"
  fullName: "com.azure.messaging.eventhubs.models.PartitionOwnership"
- uid: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump*"
  name: "startPartitionPump"
  nameWithType: "PartitionPumpManager.startPartitionPump"
  fullName: "com.azure.messaging.eventhubs.implementation.PartitionPumpManager.startPartitionPump"
  package: "com.azure.messaging.eventhubs.implementation"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.messaging.eventhubs.PartitionProcessor"
  name: "PartitionProcessor"
  nameWithType: "PartitionProcessor"
  fullName: "com.azure.messaging.eventhubs.PartitionProcessor"
- uid: "java.util.function.Supplier"
  name: "Supplier"
  nameWithType: "Supplier"
  fullName: "java.util.function.Supplier"

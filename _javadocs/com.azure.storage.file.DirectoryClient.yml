### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.file.DirectoryClient"
  id: "DirectoryClient"
  parent: "com.azure.storage.file"
  children:
  - "com.azure.storage.file.DirectoryClient.DirectoryClient(com.azure.storage.file.DirectoryAsyncClient)"
  - "com.azure.storage.file.DirectoryClient.create()"
  - "com.azure.storage.file.DirectoryClient.createFile(java.lang.String,long)"
  - "com.azure.storage.file.DirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.createSubDirectory(java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.delete()"
  - "com.azure.storage.file.DirectoryClient.deleteFile(java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.deleteSubDirectory(java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.forceCloseHandles(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.getAccountName()"
  - "com.azure.storage.file.DirectoryClient.getDirectoryPath()"
  - "com.azure.storage.file.DirectoryClient.getDirectoryUrl()"
  - "com.azure.storage.file.DirectoryClient.getFileClient(java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.getProperties()"
  - "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.getShareName()"
  - "com.azure.storage.file.DirectoryClient.getShareSnapshotId()"
  - "com.azure.storage.file.DirectoryClient.getSubDirectoryClient(java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.listFilesAndDirectories()"
  - "com.azure.storage.file.DirectoryClient.listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.storage.file.DirectoryClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  - "com.azure.storage.file.DirectoryClient.setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  - "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "DirectoryClient"
  nameWithType: "DirectoryClient"
  fullName: "com.azure.storage.file.DirectoryClient"
  type: "Class"
  package: "com.azure.storage.file"
  summary: "This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service. Operations allowed by the client are creating, deleting and listing subdirectory and file, retrieving properties, setting metadata and list or force close handles of the directory or file.\n\n**Instantiating an Synchronous Directory Client**\n\n\\{@codesnippet com.azure.storage.file.directoryClient.instantiation\\}\n\nView <xref uid=\"com.azure.storage.file.FileClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public class DirectoryClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.file.DirectoryClient.DirectoryClient(com.azure.storage.file.DirectoryAsyncClient)"
  id: "DirectoryClient(com.azure.storage.file.DirectoryAsyncClient)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "DirectoryClient(DirectoryAsyncClient directoryAsyncClient)"
  nameWithType: "DirectoryClient.DirectoryClient(DirectoryAsyncClient directoryAsyncClient)"
  fullName: "com.azure.storage.file.DirectoryClient.DirectoryClient(DirectoryAsyncClient directoryAsyncClient)"
  overload: "com.azure.storage.file.DirectoryClient.DirectoryClient*"
  type: "Constructor"
  package: "com.azure.storage.file"
  summary: "Creates a DirectoryClient that wraps a DirectoryAsyncClient and blocks requests."
  syntax:
    content: " DirectoryClient(DirectoryAsyncClient directoryAsyncClient)"
    parameters:
    - id: "directoryAsyncClient"
      type: "com.azure.storage.file.DirectoryAsyncClient"
      description: "DirectoryAsyncClient that is used to send requests"
- uid: "com.azure.storage.file.DirectoryClient.create()"
  id: "create()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "create()"
  nameWithType: "DirectoryClient.create()"
  fullName: "com.azure.storage.file.DirectoryClient.create()"
  overload: "com.azure.storage.file.DirectoryClient.create*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a directory in the file share and returns a response of <xref uid=\"com.azure.storage.file.models.DirectoryInfo\" data-throw-if-not-resolved=\"false\">DirectoryInfo</xref> to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createDirectory\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public DirectoryInfo create()"
    return:
      type: "com.azure.storage.file.models.DirectoryInfo"
      description: "The <xref uid=\"com.azure.storage.file.models.DirectoryInfo\" data-throw-if-not-resolved=\"false\">directory info</xref>."
- uid: "com.azure.storage.file.DirectoryClient.createFile(java.lang.String,long)"
  id: "createFile(java.lang.String,long)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "createFile(String fileName, long maxSize)"
  nameWithType: "DirectoryClient.createFile(String fileName, long maxSize)"
  fullName: "com.azure.storage.file.DirectoryClient.createFile(String fileName, long maxSize)"
  overload: "com.azure.storage.file.DirectoryClient.createFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in this directory with specific name, max number of results and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate 1k file with named \"myFile\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createFile\\#string-long\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public FileClient createFile(String fileName, long maxSize)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    - id: "maxSize"
      type: "long"
      description: "Size of the file"
    return:
      type: "com.azure.storage.file.FileClient"
      description: "The FileClient"
- uid: "com.azure.storage.file.DirectoryClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  id: "createFileWithResponse(java.lang.String,long,com.azure.storage.file.models.FileHTTPHeaders,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.createFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a file in this directory with specific name and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createFile\\#string-long-filehttpheaders-filesmbproperties-string-map-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: "public Response<FileClient> createFileWithResponse(String fileName, long maxSize, FileHTTPHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    - id: "maxSize"
      type: "long"
      description: "Max size of the file"
    - id: "httpHeaders"
      type: "com.azure.storage.file.models.FileHTTPHeaders"
      description: "The user settable file http headers."
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The user settable file smb properties."
    - id: "filePermission"
      type: "java.lang.String"
      description: "THe file permission of the file."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional name-value pairs associated with the file as metadata."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.FileClient>"
      description: "A response containing the directory info and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryClient.createSubDirectory(java.lang.String)"
  id: "createSubDirectory(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "createSubDirectory(String subDirectoryName)"
  nameWithType: "DirectoryClient.createSubDirectory(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryClient.createSubDirectory(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryClient.createSubDirectory*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a subdirectory under current directory with specific name and returns a response of DirectoryClient to interact with it.\n\n**Code Samples**\n\nCreate the sub directory \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createSubDirectory\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public DirectoryClient createSubDirectory(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    return:
      type: "com.azure.storage.file.DirectoryClient"
      description: "The subdirectory client."
- uid: "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  id: "createSubDirectoryWithResponse(java.lang.String,com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a subdirectory under current directory with specific name , metadata and returns a response of DirectoryClient to interact with it.\n\n**Code Samples**\n\nCreate the subdirectory named \"subdir\", with metadata\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createSubDirectoryWithResponse\\#string-filesmbproperties-string-map-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Response<DirectoryClient> createSubDirectoryWithResponse(String subDirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to associate with the subdirectory"
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.DirectoryClient>"
      description: "A response containing the subdirectory client and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryClient.createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  id: "createWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.createWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Creates a directory in the file share and returns a response of DirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n\\{@codesnippet com.azure.storage.file.directoryClient.createWithResponse\\#filesmbproperties-string-map-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory"
  syntax:
    content: "public Response<DirectoryInfo> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, Duration timeout, Context context)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to associate with the directory."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>"
      description: "A response containing the directory info and the status of creating the directory."
- uid: "com.azure.storage.file.DirectoryClient.delete()"
  id: "delete()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "DirectoryClient.delete()"
  fullName: "com.azure.storage.file.DirectoryClient.delete()"
  overload: "com.azure.storage.file.DirectoryClient.delete*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the directory in the file share. The directory must be empty before it can be deleted.\n\n**Code Samples**\n\nDelete the directory\n\n\\{@codesnippet com.azure.storage.file.directoryClient.delete\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public void delete()"
- uid: "com.azure.storage.file.DirectoryClient.deleteFile(java.lang.String)"
  id: "deleteFile(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "deleteFile(String fileName)"
  nameWithType: "DirectoryClient.deleteFile(String fileName)"
  fullName: "com.azure.storage.file.DirectoryClient.deleteFile(String fileName)"
  overload: "com.azure.storage.file.DirectoryClient.deleteFile*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.deleteFile\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public void deleteFile(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
- uid: "com.azure.storage.file.DirectoryClient.deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  id: "deleteFileWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "deleteFileWithResponse(String fileName, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.deleteFileWithResponse(String fileName, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.deleteFileWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n\\{@codesnippet com.azure.storage.file.DirectoryClient.deleteFileWithResponse\\#string-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2"
  syntax:
    content: "public Response<Void> deleteFileWithResponse(String fileName, Duration timeout, Context context)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryClient.deleteSubDirectory(java.lang.String)"
  id: "deleteSubDirectory(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "deleteSubDirectory(String subDirectoryName)"
  nameWithType: "DirectoryClient.deleteSubDirectory(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryClient.deleteSubDirectory(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryClient.deleteSubDirectory*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the subdirectory with specific name in this directory. The directory must be empty before it can be deleted.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.deleteSubDirectory\\#string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public void deleteSubDirectory(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
- uid: "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  id: "deleteSubDirectoryWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "deleteSubDirectoryWithResponse(String subDirectoryName, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.deleteSubDirectoryWithResponse(String subDirectoryName, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse(String subDirectoryName, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the subdirectory with specific name in this directory. The directory must be empty before it can be deleted.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.deleteSubDirectoryWithResponse\\#string-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Response<Void> deleteSubDirectoryWithResponse(String subDirectoryName, Duration timeout, Context context)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the subdirectory"
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryClient.deleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
  id: "deleteWithResponse(java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "deleteWithResponse(Duration timeout, Context context)"
  nameWithType: "DirectoryClient.deleteWithResponse(Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.deleteWithResponse(Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.deleteWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Deletes the directory in the file share. The directory must be empty before it can be deleted.\n\n**Code Samples**\n\nDelete the directory\n\n\\{@codesnippet com.azure.storage.file.DirectoryClient.deleteWithResponse\\#duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory"
  syntax:
    content: "public Response<Void> deleteWithResponse(Duration timeout, Context context)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response that only contains headers and response status code"
- uid: "com.azure.storage.file.DirectoryClient.forceCloseHandles(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  id: "forceCloseHandles(java.lang.String,boolean,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "forceCloseHandles(String handleId, boolean recursive, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.forceCloseHandles(String handleId, boolean recursive, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.forceCloseHandles(String handleId, boolean recursive, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.forceCloseHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Closes a handle or handles opened on a directory or a file at the service. It is intended to be used alongside <xref uid=\"com.azure.storage.file.DirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)\" data-throw-if-not-resolved=\"false\">DirectoryClient#listHandles(Integer, boolean, Duration, Context)</xref> .\n\n**Code Samples**\n\nForce close handles with handles returned by get handles in recursive.\n\n\\{@codesnippet com.azure.storage.file.directoryClient.forceCloseHandles\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles"
  syntax:
    content: "public PagedIterable<Integer> forceCloseHandles(String handleId, boolean recursive, Duration timeout, Context context)"
    parameters:
    - id: "handleId"
      type: "java.lang.String"
      description: "Specifies the handle ID to be closed. Use an asterisk ('*') as a wildcard string to specify all\n handles."
    - id: "recursive"
      type: "boolean"
      description: "A boolean value that specifies if the operation should also apply to the files and\n subdirectories of the directory specified in the URI."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<java.lang.Integer>"
      description: "The counts of number of handles closed."
- uid: "com.azure.storage.file.DirectoryClient.getAccountName()"
  id: "getAccountName()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getAccountName()"
  nameWithType: "DirectoryClient.getAccountName()"
  fullName: "com.azure.storage.file.DirectoryClient.getAccountName()"
  overload: "com.azure.storage.file.DirectoryClient.getAccountName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get associated account name."
  syntax:
    content: "public String getAccountName()"
    return:
      type: "java.lang.String"
      description: "account name associated with this storage resource."
- uid: "com.azure.storage.file.DirectoryClient.getDirectoryPath()"
  id: "getDirectoryPath()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getDirectoryPath()"
  nameWithType: "DirectoryClient.getDirectoryPath()"
  fullName: "com.azure.storage.file.DirectoryClient.getDirectoryPath()"
  overload: "com.azure.storage.file.DirectoryClient.getDirectoryPath*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the directory path of the client.\n\nGet directory path.\n\n\\{@codesnippet com.azure.storage.file.directoryClient.getDirectoryPath\\}"
  syntax:
    content: "public String getDirectoryPath()"
    return:
      type: "java.lang.String"
      description: "The path of the directory."
- uid: "com.azure.storage.file.DirectoryClient.getDirectoryUrl()"
  id: "getDirectoryUrl()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getDirectoryUrl()"
  nameWithType: "DirectoryClient.getDirectoryUrl()"
  fullName: "com.azure.storage.file.DirectoryClient.getDirectoryUrl()"
  overload: "com.azure.storage.file.DirectoryClient.getDirectoryUrl*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the url of the storage directory client."
  syntax:
    content: "public String getDirectoryUrl()"
    return:
      type: "java.lang.String"
      description: "the URL of the storage directory client."
- uid: "com.azure.storage.file.DirectoryClient.getFileClient(java.lang.String)"
  id: "getFileClient(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getFileClient(String fileName)"
  nameWithType: "DirectoryClient.getFileClient(String fileName)"
  fullName: "com.azure.storage.file.DirectoryClient.getFileClient(String fileName)"
  overload: "com.azure.storage.file.DirectoryClient.getFileClient*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Constructs a FileClient that interacts with the specified file.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.FileClient.create(long)\" data-throw-if-not-resolved=\"false\">FileClient#create(long)</xref> create\\} in the client will need to be called before interaction with the file can happen."
  syntax:
    content: "public FileClient getFileClient(String fileName)"
    parameters:
    - id: "fileName"
      type: "java.lang.String"
      description: "Name of the file"
    return:
      type: "com.azure.storage.file.FileClient"
      description: "a FileClient that interacts with the specified share"
- uid: "com.azure.storage.file.DirectoryClient.getProperties()"
  id: "getProperties()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getProperties()"
  nameWithType: "DirectoryClient.getProperties()"
  fullName: "com.azure.storage.file.DirectoryClient.getProperties()"
  overload: "com.azure.storage.file.DirectoryClient.getProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryClient.getProperties\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties"
  syntax:
    content: "public DirectoryProperties getProperties()"
    return:
      type: "com.azure.storage.file.models.DirectoryProperties"
      description: "Storage directory properties"
- uid: "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)"
  id: "getPropertiesWithResponse(java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getPropertiesWithResponse(Duration timeout, Context context)"
  nameWithType: "DirectoryClient.getPropertiesWithResponse(Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse(Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n\\{@codesnippet com.azure.storage.file.DirectoryClient.getPropertiesWithResponse\\#duration-Context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties"
  syntax:
    content: "public Response<DirectoryProperties> getPropertiesWithResponse(Duration timeout, Context context)"
    parameters:
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryProperties>"
      description: "A response containing the storage directory properties with response status code and headers"
- uid: "com.azure.storage.file.DirectoryClient.getShareName()"
  id: "getShareName()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getShareName()"
  nameWithType: "DirectoryClient.getShareName()"
  fullName: "com.azure.storage.file.DirectoryClient.getShareName()"
  overload: "com.azure.storage.file.DirectoryClient.getShareName*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get the share name of directory client.\n\nGet the share name.\n\n\\{@codesnippet com.azure.storage.file.directoryClient.getShareName\\}"
  syntax:
    content: "public String getShareName()"
    return:
      type: "java.lang.String"
      description: "The share name of the directory."
- uid: "com.azure.storage.file.DirectoryClient.getShareSnapshotId()"
  id: "getShareSnapshotId()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getShareSnapshotId()"
  nameWithType: "DirectoryClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.DirectoryClient.getShareSnapshotId()"
  overload: "com.azure.storage.file.DirectoryClient.getShareSnapshotId*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.DirectoryClient\" data-throw-if-not-resolved=\"false\">DirectoryClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n\\{@codesnippet com.azure.storage.file.directoryClient.getShareSnapshotId\\}"
  syntax:
    content: "public String getShareSnapshotId()"
    return:
      type: "java.lang.String"
      description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
- uid: "com.azure.storage.file.DirectoryClient.getSubDirectoryClient(java.lang.String)"
  id: "getSubDirectoryClient(java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "getSubDirectoryClient(String subDirectoryName)"
  nameWithType: "DirectoryClient.getSubDirectoryClient(String subDirectoryName)"
  fullName: "com.azure.storage.file.DirectoryClient.getSubDirectoryClient(String subDirectoryName)"
  overload: "com.azure.storage.file.DirectoryClient.getSubDirectoryClient*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Constructs a DirectoryClient that interacts with the specified directory.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.DirectoryClient.create()\" data-throw-if-not-resolved=\"false\">DirectoryClient#create()</xref> create\\} in the client will need to be called before interaction with the directory can happen."
  syntax:
    content: "public DirectoryClient getSubDirectoryClient(String subDirectoryName)"
    parameters:
    - id: "subDirectoryName"
      type: "java.lang.String"
      description: "Name of the directory"
    return:
      type: "com.azure.storage.file.DirectoryClient"
      description: "a DirectoryClient that interacts with the specified directory"
- uid: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories()"
  id: "listFilesAndDirectories()"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "listFilesAndDirectories()"
  nameWithType: "DirectoryClient.listFilesAndDirectories()"
  fullName: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories()"
  overload: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Lists all sub-directories and files in this directory without their prefix or maxResult.\n\n**Code Samples**\n\nList all sub-directories and files in the account\n\n\\{@codesnippet com.azure.storage.file.directoryClient.listFilesAndDirectories\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files"
  syntax:
    content: "public PagedIterable<FileReference> listFilesAndDirectories()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.storage.file.models.FileReference>"
      description: "<xref uid=\"com.azure.storage.file.models.FileReference\" data-throw-if-not-resolved=\"false\">File info</xref> in the storage directory"
- uid: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  id: "listFilesAndDirectories(java.lang.String,java.lang.Integer,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "listFilesAndDirectories(String prefix, Integer maxResults, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.listFilesAndDirectories(String prefix, Integer maxResults, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories(String prefix, Integer maxResults, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Lists all sub-directories and files in this directory with their prefix or snapshots.\n\n**Code Samples**\n\nList all sub-directories and files in this directory with \"subdir\" prefix and return 10 results in the account\n\n\\{@codesnippet com.azure.storage.file.directoryClient.listFilesAndDirectories\\#string-integer-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files"
  syntax:
    content: "public PagedIterable<FileReference> listFilesAndDirectories(String prefix, Integer maxResults, Duration timeout, Context context)"
    parameters:
    - id: "prefix"
      type: "java.lang.String"
      description: "Optional prefix which filters the results to return only files and directories whose name begins\n with."
    - id: "maxResults"
      type: "java.lang.Integer"
      description: "Optional maximum number of files and/or directories to return per page. If the request does not\n specify maxresults or specifies a value greater than 5,000, the server will return up to 5,000 items."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.storage.file.models.FileReference>"
      description: "<xref uid=\"com.azure.storage.file.models.FileReference\" data-throw-if-not-resolved=\"false\">File info</xref> in this directory with prefix and max number of return results."
- uid: "com.azure.storage.file.DirectoryClient.listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  id: "listHandles(java.lang.Integer,boolean,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "listHandles(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.listHandles(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.listHandles(Integer maxResult, boolean recursive, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.listHandles*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "List of open handles on a directory or a file.\n\n**Code Samples**\n\nGet 10 handles with recursive call.\n\n\\{@codesnippet com.azure.storage.file.directoryClient.listHandles\\#Integer-boolean-duration-context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles"
  syntax:
    content: "public PagedIterable<HandleItem> listHandles(Integer maxResult, boolean recursive, Duration timeout, Context context)"
    parameters:
    - id: "maxResult"
      type: "java.lang.Integer"
      description: "Optional maximum number of results will return per page"
    - id: "recursive"
      type: "boolean"
      description: "Specifies operation should apply to the directory specified in the URI, its files, its\n subdirectories and their files."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.storage.file.models.HandleItem>"
      description: "<xref uid=\"com.azure.storage.file.models.HandleItem\" data-throw-if-not-resolved=\"false\">handles</xref> in the directory that satisfy the requirements"
- uid: "com.azure.storage.file.DirectoryClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  id: "setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DirectoryClient.setMetadata(Map<String,String> metadata)"
  fullName: "com.azure.storage.file.DirectoryClient.setMetadata(Map<String,String> metadata)"
  overload: "com.azure.storage.file.DirectoryClient.setMetadata*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.setMetadata\\#map\\}\n\nClear the metadata of the directory\n\n\\{@codesnippet com.azure.storage.file.directoryClient.setMetadata\\#map.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata"
  syntax:
    content: "public DirectorySetMetadataInfo setMetadata(Map<String,String> metadata)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    return:
      type: "com.azure.storage.file.models.DirectorySetMetadataInfo"
      description: "The information about the directory"
- uid: "com.azure.storage.file.DirectoryClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  id: "setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.setMetadataWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n\\{@codesnippet com.azure.storage.file.directoryClient.setMetadataWithResponse\\#map-duration-context\\}\n\nClear the metadata of the directory\n\n\\{@codesnippet com.azure.storage.file.DirectoryClient.setMetadataWithResponse\\#map-duration-context.clearMetadata\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata"
  syntax:
    content: "public Response<DirectorySetMetadataInfo> setMetadataWithResponse(Map<String,String> metadata, Duration timeout, Context context)"
    parameters:
    - id: "metadata"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectorySetMetadataInfo>"
      description: "A response containing the information about the directory and response status code"
- uid: "com.azure.storage.file.DirectoryClient.setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  id: "setProperties(com.azure.storage.file.FileSmbProperties,java.lang.String)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "setProperties(FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "DirectoryClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  fullName: "com.azure.storage.file.DirectoryClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  overload: "com.azure.storage.file.DirectoryClient.setProperties*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryClient.setProperties\\#filesmbproperties-string\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties"
  syntax:
    content: "public DirectoryInfo setProperties(FileSmbProperties smbProperties, String filePermission)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    return:
      type: "com.azure.storage.file.models.DirectoryInfo"
      description: "The storage directory SMB properties"
- uid: "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  id: "setPropertiesWithResponse(com.azure.storage.file.FileSmbProperties,java.lang.String,java.time.Duration,com.azure.core.util.Context)"
  parent: "com.azure.storage.file.DirectoryClient"
  langs:
  - "java"
  name: "setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)"
  nameWithType: "DirectoryClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)"
  fullName: "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)"
  overload: "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.storage.file"
  summary: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n\\{@codesnippet com.azure.storage.file.directoryClient.setPropertiesWithResponse\\#filesmbproperties-string-duration-Context\\}\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties"
  syntax:
    content: "public Response<DirectoryInfo> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission, Duration timeout, Context context)"
    parameters:
    - id: "smbProperties"
      type: "com.azure.storage.file.FileSmbProperties"
      description: "The SMB properties of the directory."
    - id: "filePermission"
      type: "java.lang.String"
      description: "The file permission of the directory."
    - id: "timeout"
      type: "java.time.Duration"
      description: "An optional timeout applied to the operation. If a response is not returned before the timeout\n concludes a <xref uid=\"\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> will be thrown."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>"
      description: "A response containing the storage directory smb properties with headers and response status code"
references:
- uid: "com.azure.storage.file.DirectoryAsyncClient"
  name: "DirectoryAsyncClient"
  nameWithType: "DirectoryAsyncClient"
  fullName: "com.azure.storage.file.DirectoryAsyncClient"
- uid: "com.azure.storage.file.DirectoryClient.DirectoryClient*"
  name: "DirectoryClient"
  nameWithType: "DirectoryClient.DirectoryClient"
  fullName: "com.azure.storage.file.DirectoryClient.DirectoryClient"
  package: "com.azure.storage.file"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.storage.file.DirectoryClient.getDirectoryUrl*"
  name: "getDirectoryUrl"
  nameWithType: "DirectoryClient.getDirectoryUrl"
  fullName: "com.azure.storage.file.DirectoryClient.getDirectoryUrl"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileClient"
  name: "FileClient"
  nameWithType: "FileClient"
  fullName: "com.azure.storage.file.FileClient"
- uid: "com.azure.storage.file.DirectoryClient.getFileClient*"
  name: "getFileClient"
  nameWithType: "DirectoryClient.getFileClient"
  fullName: "com.azure.storage.file.DirectoryClient.getFileClient"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.getSubDirectoryClient*"
  name: "getSubDirectoryClient"
  nameWithType: "DirectoryClient.getSubDirectoryClient"
  fullName: "com.azure.storage.file.DirectoryClient.getSubDirectoryClient"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.DirectoryInfo"
  name: "DirectoryInfo"
  nameWithType: "DirectoryInfo"
  fullName: "com.azure.storage.file.models.DirectoryInfo"
- uid: "com.azure.storage.file.DirectoryClient.create*"
  name: "create"
  nameWithType: "DirectoryClient.create"
  fullName: "com.azure.storage.file.DirectoryClient.create"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.FileSmbProperties"
  name: "FileSmbProperties"
  nameWithType: "FileSmbProperties"
  fullName: "com.azure.storage.file.FileSmbProperties"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryInfo>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryInfo"
    name: "DirectoryInfo"
    fullName: "com.azure.storage.file.models.DirectoryInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.createWithResponse*"
  name: "createWithResponse"
  nameWithType: "DirectoryClient.createWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.createWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.delete*"
  name: "delete"
  nameWithType: "DirectoryClient.delete"
  fullName: "com.azure.storage.file.DirectoryClient.delete"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.Response<java.lang.Void>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.deleteWithResponse*"
  name: "deleteWithResponse"
  nameWithType: "DirectoryClient.deleteWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.deleteWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.DirectoryProperties"
  name: "DirectoryProperties"
  nameWithType: "DirectoryProperties"
  fullName: "com.azure.storage.file.models.DirectoryProperties"
- uid: "com.azure.storage.file.DirectoryClient.getProperties*"
  name: "getProperties"
  nameWithType: "DirectoryClient.getProperties"
  fullName: "com.azure.storage.file.DirectoryClient.getProperties"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectoryProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectoryProperties"
    name: "DirectoryProperties"
    fullName: "com.azure.storage.file.models.DirectoryProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse*"
  name: "getPropertiesWithResponse"
  nameWithType: "DirectoryClient.getPropertiesWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.getPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.setProperties*"
  name: "setProperties"
  nameWithType: "DirectoryClient.setProperties"
  fullName: "com.azure.storage.file.DirectoryClient.setProperties"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse*"
  name: "setPropertiesWithResponse"
  nameWithType: "DirectoryClient.setPropertiesWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.setPropertiesWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.DirectorySetMetadataInfo"
  name: "DirectorySetMetadataInfo"
  nameWithType: "DirectorySetMetadataInfo"
  fullName: "com.azure.storage.file.models.DirectorySetMetadataInfo"
- uid: "com.azure.storage.file.DirectoryClient.setMetadata*"
  name: "setMetadata"
  nameWithType: "DirectoryClient.setMetadata"
  fullName: "com.azure.storage.file.DirectoryClient.setMetadata"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.Response<com.azure.storage.file.models.DirectorySetMetadataInfo>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.DirectorySetMetadataInfo"
    name: "DirectorySetMetadataInfo"
    fullName: "com.azure.storage.file.models.DirectorySetMetadataInfo"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.setMetadataWithResponse*"
  name: "setMetadataWithResponse"
  nameWithType: "DirectoryClient.setMetadataWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.setMetadataWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.storage.file.models.FileReference>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.FileReference"
    name: "FileReference"
    fullName: "com.azure.storage.file.models.FileReference"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories*"
  name: "listFilesAndDirectories"
  nameWithType: "DirectoryClient.listFilesAndDirectories"
  fullName: "com.azure.storage.file.DirectoryClient.listFilesAndDirectories"
  package: "com.azure.storage.file"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.storage.file.models.HandleItem>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.models.HandleItem"
    name: "HandleItem"
    fullName: "com.azure.storage.file.models.HandleItem"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.listHandles*"
  name: "listHandles"
  nameWithType: "DirectoryClient.listHandles"
  fullName: "com.azure.storage.file.DirectoryClient.listHandles"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.PagedIterable<java.lang.Integer>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.forceCloseHandles*"
  name: "forceCloseHandles"
  nameWithType: "DirectoryClient.forceCloseHandles"
  fullName: "com.azure.storage.file.DirectoryClient.forceCloseHandles"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.createSubDirectory*"
  name: "createSubDirectory"
  nameWithType: "DirectoryClient.createSubDirectory"
  fullName: "com.azure.storage.file.DirectoryClient.createSubDirectory"
  package: "com.azure.storage.file"
- uid: "com.azure.core.http.rest.Response<com.azure.storage.file.DirectoryClient>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.DirectoryClient"
    name: "DirectoryClient"
    fullName: "com.azure.storage.file.DirectoryClient"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse*"
  name: "createSubDirectoryWithResponse"
  nameWithType: "DirectoryClient.createSubDirectoryWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.createSubDirectoryWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.deleteSubDirectory*"
  name: "deleteSubDirectory"
  nameWithType: "DirectoryClient.deleteSubDirectory"
  fullName: "com.azure.storage.file.DirectoryClient.deleteSubDirectory"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse*"
  name: "deleteSubDirectoryWithResponse"
  nameWithType: "DirectoryClient.deleteSubDirectoryWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.deleteSubDirectoryWithResponse"
  package: "com.azure.storage.file"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.file.DirectoryClient.createFile*"
  name: "createFile"
  nameWithType: "DirectoryClient.createFile"
  fullName: "com.azure.storage.file.DirectoryClient.createFile"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.models.FileHTTPHeaders"
  name: "FileHTTPHeaders"
  nameWithType: "FileHTTPHeaders"
  fullName: "com.azure.storage.file.models.FileHTTPHeaders"
- uid: "com.azure.core.http.rest.Response<com.azure.storage.file.FileClient>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.storage.file.FileClient"
    name: "FileClient"
    fullName: "com.azure.storage.file.FileClient"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.file.DirectoryClient.createFileWithResponse*"
  name: "createFileWithResponse"
  nameWithType: "DirectoryClient.createFileWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.createFileWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.deleteFile*"
  name: "deleteFile"
  nameWithType: "DirectoryClient.deleteFile"
  fullName: "com.azure.storage.file.DirectoryClient.deleteFile"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.deleteFileWithResponse*"
  name: "deleteFileWithResponse"
  nameWithType: "DirectoryClient.deleteFileWithResponse"
  fullName: "com.azure.storage.file.DirectoryClient.deleteFileWithResponse"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.getShareSnapshotId*"
  name: "getShareSnapshotId"
  nameWithType: "DirectoryClient.getShareSnapshotId"
  fullName: "com.azure.storage.file.DirectoryClient.getShareSnapshotId"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.getShareName*"
  name: "getShareName"
  nameWithType: "DirectoryClient.getShareName"
  fullName: "com.azure.storage.file.DirectoryClient.getShareName"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.getDirectoryPath*"
  name: "getDirectoryPath"
  nameWithType: "DirectoryClient.getDirectoryPath"
  fullName: "com.azure.storage.file.DirectoryClient.getDirectoryPath"
  package: "com.azure.storage.file"
- uid: "com.azure.storage.file.DirectoryClient.getAccountName*"
  name: "getAccountName"
  nameWithType: "DirectoryClient.getAccountName"
  fullName: "com.azure.storage.file.DirectoryClient.getAccountName"
  package: "com.azure.storage.file"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.core.http.rest.PagedIterable"
  name: "PagedIterable"
  nameWithType: "PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable"
- uid: "com.azure.storage.file.models.FileReference"
  name: "FileReference"
  nameWithType: "FileReference"
  fullName: "com.azure.storage.file.models.FileReference"
- uid: "com.azure.storage.file.models.HandleItem"
  name: "HandleItem"
  nameWithType: "HandleItem"
  fullName: "com.azure.storage.file.models.HandleItem"

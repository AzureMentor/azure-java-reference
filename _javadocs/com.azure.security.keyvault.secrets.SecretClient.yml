### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.secrets.SecretClient"
  id: "SecretClient"
  parent: "com.azure.security.keyvault.secrets"
  children:
  - "com.azure.security.keyvault.secrets.SecretClient.SecretClient(com.azure.security.keyvault.secrets.SecretAsyncClient)"
  - "com.azure.security.keyvault.secrets.SecretClient.backupSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.deleteSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()"
  - "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.listSecrets()"
  - "com.azure.security.keyvault.secrets.SecretClient.listSecrets(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte[])"
  - "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  - "com.azure.security.keyvault.secrets.SecretClient.setSecret(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "SecretClient"
  nameWithType: "SecretClient"
  fullName: "com.azure.security.keyvault.secrets.SecretClient"
  type: "Class"
  package: "com.azure.security.keyvault.secrets"
  summary: "The SecretClient provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.\n\n**Samples to construct the sync client**\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.sync.construct\\}"
  syntax:
    content: "public final class SecretClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.secrets.SecretClient.SecretClient(com.azure.security.keyvault.secrets.SecretAsyncClient)"
  id: "SecretClient(com.azure.security.keyvault.secrets.SecretAsyncClient)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "SecretClient(SecretAsyncClient client)"
  nameWithType: "SecretClient.SecretClient(SecretAsyncClient client)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.SecretClient(SecretAsyncClient client)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.SecretClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.secrets"
  summary: "Creates a SecretClient that uses `pipeline` to service requests"
  syntax:
    content: " SecretClient(SecretAsyncClient client)"
    parameters:
    - id: "client"
      type: "com.azure.security.keyvault.secrets.SecretAsyncClient"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient\" data-throw-if-not-resolved=\"false\">SecretAsyncClient</xref> that the client routes its request through."
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecret(java.lang.String)"
  id: "backupSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "backupSecret(String name)"
  nameWithType: "SecretClient.backupSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.backupSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Requests a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code Samples**\n\nBacks up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.backupSecret\\#string\\}"
  syntax:
    content: "public byte[] backupSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "byte[]"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the backed up secret blob."
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "backupSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.backupSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Requests a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code Samples**\n\nBacks up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.backupSecretWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<byte[]> backupSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<byte[]>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the backed up secret blob."
- uid: "com.azure.security.keyvault.secrets.SecretClient.deleteSecret(java.lang.String)"
  id: "deleteSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "deleteSecret(String name)"
  nameWithType: "SecretClient.deleteSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.deleteSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.deleteSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and requires to be purged for permanent deletion else the secret is permanently deleted. The delete operation applies to any secret stored in Azure Key Vault but it cannot be applied to an individual version of a secret. This operation requires the `secrets/delete` permission.\n\n**Code Samples**\n\nDeletes the secret from the keyvault. Prints out the recovery id of the deleted secret returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.deleteSecret\\#string\\}"
  syntax:
    content: "public DeletedSecret deleteSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret to be deleted."
    return:
      type: "com.azure.security.keyvault.secrets.models.DeletedSecret"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted\n secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "deleteSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.deleteSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and requires to be purged for permanent deletion else the secret is permanently deleted. The delete operation applies to any secret stored in Azure Key Vault but it cannot be applied to an individual version of a secret. This operation requires the `secrets/delete` permission.\n\n**Code Samples**\n\nDeletes the secret from the keyvault. Prints out the recovery id of the deleted secret returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.deleteSecretWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<DeletedSecret> deleteSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret to be deleted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted\n secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(java.lang.String)"
  id: "getDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getDeletedSecret(String name)"
  nameWithType: "SecretClient.getDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The get deleted secret operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nGets the deleted secret from the key vault enabled for soft-delete. Prints out the details of the deleted secret returned in the response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.getDeletedSecret\\#string\\}"
  syntax:
    content: "public DeletedSecret getDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret."
    return:
      type: "com.azure.security.keyvault.secrets.models.DeletedSecret"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.getDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The get deleted secret operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nGets the deleted secret from the key vault enabled for soft-delete. Prints out the details of the deleted secret returned in the response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.getDeletedSecretWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<DeletedSecret> getDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted\n secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getSecret(SecretProperties secretProperties)"
  nameWithType: "SecretClient.getSecret(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the secret which represents <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secretProperties</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">SecretClient#listSecretVersions(String)</xref> return the <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> as output excluding the include the value of the secret. This operation can then be used to get the full secret with its value from `secretProperties`.\n\n**Code Samples**\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.getSecret\\#secretProperties\\}"
  syntax:
    content: "public Secret getSecret(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> holding attributes of the secret being requested."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)"
  id: "getSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getSecret(String name)"
  nameWithType: "SecretClient.getSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets the latest version of the secret in the key vault. Prints out the details of the returned secret.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.getSecret\\#string\\}"
  syntax:
    content: "public Secret getSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">Secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)"
  id: "getSecret(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getSecret(String name, String version)"
  nameWithType: "SecretClient.getSecret(String name, String version)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret(String name, String version)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets a specific version of the secret in the key vault. Prints out the details of the returned secret.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.getSecret\\#string-string\\}"
  syntax:
    content: "public Secret getSecret(String name, String version)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret, cannot be null."
    - id: "version"
      type: "java.lang.String"
      description: "The version of the secret to retrieve. If this is an empty String or null, this call is\n     equivalent to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getSecret(String)</xref>, with the latest version being retrieved."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  id: "getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getSecretWithResponse(SecretProperties secretProperties, Context context)"
  nameWithType: "SecretClient.getSecretWithResponse(SecretProperties secretProperties, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(SecretProperties secretProperties, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the secret which represents <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secretProperties</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">SecretClient#listSecretVersions(String)</xref> return the <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> as output excluding the include the value of the secret. This operation can then be used to get the full secret with its value from `secretProperties`.\n\n**Code Samples**\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.getSecretWithResponse\\#secretProperties\\}"
  syntax:
    content: "public Response<Secret> getSecretWithResponse(SecretProperties secretProperties, Context context)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> holding attributes of the secret being requested."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "getSecretWithResponse(String name, String version, Context context)"
  nameWithType: "SecretClient.getSecretWithResponse(String name, String version, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(String name, String version, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the specified secret with specified version from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.getSecretWithResponse\\#string-string-Context\\}"
  syntax:
    content: "public Response<Secret> getSecretWithResponse(String name, String version, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the secret to retrieve. If this is an empty String or null, this call is equivalent\n     to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getSecret(String)</xref>, with the latest version being retrieved."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">Secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()"
  id: "listDeletedSecrets()"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listDeletedSecrets()"
  nameWithType: "SecretClient.listDeletedSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> of the key vault. The get deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nLists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listDeletedSecrets\\}\n\n**Code Samples to iterate over secrets by page**\n\nIterate over Lists the deleted secrets by page in the key vault and for each deleted secret prints out its recovery id.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listDeletedSecrets.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<DeletedSecret> listDeletedSecrets()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of all of the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> in the vault."
- uid: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(com.azure.core.util.Context)"
  id: "listDeletedSecrets(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listDeletedSecrets(Context context)"
  nameWithType: "SecretClient.listDeletedSecrets(Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> of the key vault. The get deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nLists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listDeletedSecrets\\#Context\\}"
  syntax:
    content: "public PagedIterable<DeletedSecret> listDeletedSecrets(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of all of the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> in the vault."
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String)"
  id: "listSecretVersions(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listSecretVersions(String name)"
  nameWithType: "SecretClient.listSecretVersions(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List all versions of the specified secret. The individual secret response in the list is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values are not provided in the response. This operation requires the `secrets/list` permission.\n\nIt is possible to get full Secrets with values for each version from this information. Loop over the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties)</xref>. This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref> with values included of the specified versions.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecretVersions\\#string\\}"
  syntax:
    content: "public PagedIterable<SecretProperties> listSecretVersions(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  id: "listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listSecretVersions(String name, Context context)"
  nameWithType: "SecretClient.listSecretVersions(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List all versions of the specified secret. The individual secret response in the list is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values are not provided in the response. This operation requires the `secrets/list` permission.\n\nIt is possible to get full Secrets with values for each version from this information. Loop over the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref> with values included of the specified versions.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecretVersions\\#string-Context\\}\n\n**Code Samples to iterate over secret versions by page**\n\nIt is possible to get full Secrets with values for each version from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> by each page and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref> with values included of the specified versions.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecretVersions\\#string-Context-iterableByPage\\}"
  syntax:
    content: "public PagedIterable<SecretProperties> listSecretVersions(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecrets()"
  id: "listSecrets()"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listSecrets()"
  nameWithType: "SecretClient.listSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecrets()"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List the secrets in the key vault. The list Secrets operation is applicable to the entire vault. The individual secret response in the list is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values and individual secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\nIt is possible to get full secrets with values from this information. Loop over the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties baseSecret)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref> with value included of its latest version.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecrets\\}\n\n**Code Samples to iterate over secrets by page**\n\nIt is possible to get full secrets with values from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> by page and call <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties baseSecret)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref> with value included of its latest version.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecrets.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<SecretProperties> listSecrets()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> of all the secrets in the vault. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref>\n     contains all the information about the secret, except its value."
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecrets(com.azure.core.util.Context)"
  id: "listSecrets(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "listSecrets(Context context)"
  nameWithType: "SecretClient.listSecrets(Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecrets(Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.listSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List the secrets in the key vault. The list Secrets operation is applicable to the entire vault. The individual secret response in the list is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values and individual secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code Samples to iterate over secrets by page**\n\nIt is possible to get full secrets with values from this information. Loop over the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretProperties baseSecret)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref> with value included of its latest version.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.listSecrets\\#Context\\}"
  syntax:
    content: "public PagedIterable<SecretProperties> listSecrets(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call.*"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> of all the secrets in the vault. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref>\n     contains all the information about the secret, except its value."
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(java.lang.String)"
  id: "purgeDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "purgeDeletedSecret(String name)"
  nameWithType: "SecretClient.purgeDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the `secrets/purge` permission.\n\n**Code Samples**\n\nPurges the deleted secret from the key vault enabled for soft-delete. Prints out the status code from the server response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.purgeDeletedSecret\\#string\\}"
  syntax:
    content: "public void purgeDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "purgeDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.purgeDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the `secrets/purge` permission.\n\n**Code Samples**\n\nPurges the deleted secret from the key vault enabled for soft-delete. Prints out the status code from the server response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.purgeDeletedSecretWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<Void> purgeDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response containing status code and HTTP headers."
- uid: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(java.lang.String)"
  id: "recoverDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "recoverDeletedSecret(String name)"
  nameWithType: "SecretClient.recoverDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Recovers the deleted secret in the key vault to its latest version and can only be performed on a soft-delete enabled vault. This operation requires the `secrets/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted secret from the key vault enabled for soft-delete. Prints out the details of the recovered secret returned in the response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.recoverDeletedSecret\\#string\\}"
  syntax:
    content: "public Secret recoverDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret to be recovered."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">recovered secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "recoverDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.recoverDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Recovers the deleted secret in the key vault to its latest version and can only be performed on a soft-delete enabled vault. This operation requires the `secrets/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted secret from the key vault enabled for soft-delete. Prints out the details of the recovered secret returned in the response.\n\n//Assuming secret is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.security.keyvault.secretclient.recoverDeletedSecretWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<Secret> recoverDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret to be recovered."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">recovered secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte[])"
  id: "restoreSecret(byte[])"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "restoreSecret(byte[] backup)"
  nameWithType: "SecretClient.restoreSecret(byte[] backup)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte[] backup)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.restoreSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code Samples**\n\nRestores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.\n\n//Pass the secret backup byte array of the secret to be restored. \\{@codesnippet com.azure.security.keyvault.secretclient.restoreSecret\\#byte\\}"
  syntax:
    content: "public Secret restoreSecret(byte[] backup)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the secret."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">restored secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  id: "restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "restoreSecretWithResponse(byte[] backup, Context context)"
  nameWithType: "SecretClient.restoreSecretWithResponse(byte[] backup, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse(byte[] backup, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code Samples**\n\nRestores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.\n\n//Pass the secret backup byte array of the secret to be restored. \\{@codesnippet com.azure.security.keyvault.secretclient.restoreSecretWithResponse\\#byte-Context\\}"
  syntax:
    content: "public Response<Secret> restoreSecretWithResponse(byte[] backup, Context context)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the secret."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">restored secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  id: "setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "setSecret(Secret secret)"
  nameWithType: "SecretClient.setSecret(Secret secret)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecret(Secret secret)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.setSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the Azure Key Vault. If the named secret already exists, a new version of the secret is created in the key vault. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">Secret</xref> is required. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpires()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\">contentType</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `secret` are optional. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by key vault, if not specified.\n\n**Code Samples**\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.setSecret\\#secret\\}"
  syntax:
    content: "public Secret setSecret(Secret secret)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The Secret object containing information about the secret and its properties. The properties\n     secret.name and secret.value must be non null."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecret(java.lang.String,java.lang.String)"
  id: "setSecret(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "setSecret(String name, String value)"
  nameWithType: "SecretClient.setSecret(String name, String value)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecret(String name, String value)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.setSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the `secrets/set` permission.\n\n**Code Samples**\n\nCreates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.setSecret\\#string-string\\}"
  syntax:
    content: "public Secret setSecret(String name, String value)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret. It is required and cannot be null."
    - id: "value"
      type: "java.lang.String"
      description: "The value of the secret. It is required and cannot be null."
    return:
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  id: "setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "setSecretWithResponse(Secret secret, Context context)"
  nameWithType: "SecretClient.setSecretWithResponse(Secret secret, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(Secret secret, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the `secrets/set` permission.\n\n**Code Samples**\n\nCreates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.setSecretWithResponse\\#secret-Context\\}"
  syntax:
    content: "public Response<Secret> setSecretWithResponse(Secret secret, Context context)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The Secret object containing information about the secret and its properties. The properties\n     secret.name and secret.value must be non null."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "updateSecretProperties(SecretProperties secretProperties)"
  nameWithType: "SecretClient.updateSecretProperties(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Updates the attributes associated with the specified secret, but not the value of the specified secret in the key vault. The update operation changes specified attributes of an existing stored secret and attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the `secrets/set` permission.\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\">version</xref> cannot be null.\n\n**Code Samples**\n\nGets the latest version of the secret, changes its expiry time and the updates the secret in the key vault.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.updateSecretProperties\\#secretProperties\\}"
  syntax:
    content: "public SecretProperties updateSecretProperties(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> object with updated properties."
    return:
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">updated secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  id: "updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretClient"
  langs:
  - "java"
  name: "updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  nameWithType: "SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Updates the attributes associated with the specified secret, but not the value of the specified secret in the key vault. The update operation changes specified attributes of an existing stored secret and attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the `secrets/set` permission.\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\">version</xref> cannot be null.\n\n**Code Samples**\n\nGets the latest version of the secret, changes its expiry time and the updates the secret in the key vault.\n\n\\{@codesnippet com.azure.security.keyvault.secretclient.updateSecretPropertiesWithResponse\\#secretProperties-Context\\}"
  syntax:
    content: "public Response<SecretProperties> updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> object with updated properties."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">updated secret</xref>."
references:
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  name: "SecretAsyncClient"
  nameWithType: "SecretAsyncClient"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient"
- uid: "com.azure.security.keyvault.secrets.SecretClient.SecretClient*"
  name: "SecretClient"
  nameWithType: "SecretClient.SecretClient"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.SecretClient"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.models.Secret"
  name: "Secret"
  nameWithType: "Secret"
  fullName: "com.azure.security.keyvault.secrets.models.Secret"
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecret*"
  name: "setSecret"
  nameWithType: "SecretClient.setSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.Secret"
    name: "Secret"
    fullName: "com.azure.security.keyvault.secrets.models.Secret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse*"
  name: "setSecretWithResponse"
  nameWithType: "SecretClient.setSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret*"
  name: "getSecret"
  nameWithType: "SecretClient.getSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
  name: "SecretProperties"
  nameWithType: "SecretProperties"
  fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse*"
  name: "getSecretWithResponse"
  nameWithType: "SecretClient.getSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
    name: "SecretProperties"
    fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse*"
  name: "updateSecretPropertiesWithResponse"
  nameWithType: "SecretClient.updateSecretPropertiesWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties*"
  name: "updateSecretProperties"
  nameWithType: "SecretClient.updateSecretProperties"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  name: "DeletedSecret"
  nameWithType: "DeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
- uid: "com.azure.security.keyvault.secrets.SecretClient.deleteSecret*"
  name: "deleteSecret"
  nameWithType: "SecretClient.deleteSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.deleteSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
    name: "DeletedSecret"
    fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse*"
  name: "deleteSecretWithResponse"
  nameWithType: "SecretClient.deleteSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.deleteSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*"
  name: "getDeletedSecret"
  nameWithType: "SecretClient.getDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse*"
  name: "getDeletedSecretWithResponse"
  nameWithType: "SecretClient.getDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*"
  name: "purgeDeletedSecret"
  nameWithType: "SecretClient.purgeDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.Response<java.lang.Void>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse*"
  name: "purgeDeletedSecretWithResponse"
  nameWithType: "SecretClient.purgeDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret*"
  name: "recoverDeletedSecret"
  nameWithType: "SecretClient.recoverDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse*"
  name: "recoverDeletedSecretWithResponse"
  nameWithType: "SecretClient.recoverDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecret*"
  name: "backupSecret"
  nameWithType: "SecretClient.backupSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.Response<byte[]>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse*"
  name: "backupSecretWithResponse"
  nameWithType: "SecretClient.backupSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecret*"
  name: "restoreSecret"
  nameWithType: "SecretClient.restoreSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse*"
  name: "restoreSecretWithResponse"
  nameWithType: "SecretClient.restoreSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.SecretProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
    name: "SecretProperties"
    fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecrets*"
  name: "listSecrets"
  nameWithType: "SecretClient.listSecrets"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecrets"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.secrets.models.DeletedSecret>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
    name: "DeletedSecret"
    fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*"
  name: "listDeletedSecrets"
  nameWithType: "SecretClient.listDeletedSecrets"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions*"
  name: "listSecretVersions"
  nameWithType: "SecretClient.listSecretVersions"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listSecretVersions"
  package: "com.azure.security.keyvault.secrets"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.core.http.rest.PagedIterable"
  name: "PagedIterable"
  nameWithType: "PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable"

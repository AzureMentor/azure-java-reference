### YamlMime:ManagedReference
items:
- uid: "com.azure.storage.common.Utility"
  id: "Utility"
  parent: "com.azure.storage.common"
  children:
  - "com.azure.storage.common.Utility.<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  - "com.azure.storage.common.Utility.<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  - "com.azure.storage.common.Utility.<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  - "com.azure.storage.common.Utility.<T>postProcessResponse(reactor.core.publisher.Mono<T>,java.util.function.Function<reactor.core.publisher.Mono<T>,reactor.core.publisher.Mono<T>>)"
  - "com.azure.storage.common.Utility.ISO_8601_UTC_DATE_FORMATTER"
  - "com.azure.storage.common.Utility.Utility()"
  - "com.azure.storage.common.Utility.appendToURLPath(java.lang.String,java.lang.String)"
  - "com.azure.storage.common.Utility.assertInBounds(java.lang.String,long,long,long)"
  - "com.azure.storage.common.Utility.assertNotNull(java.lang.String,java.lang.Object)"
  - "com.azure.storage.common.Utility.computeHMac256(java.lang.String,java.lang.String)"
  - "com.azure.storage.common.Utility.convertStreamToByteBuffer(java.io.InputStream,long,int)"
  - "com.azure.storage.common.Utility.getAccountName(java.net.URL)"
  - "com.azure.storage.common.Utility.getSharedKeyCredential(com.azure.core.http.HttpPipeline)"
  - "com.azure.storage.common.Utility.parseConnectionString(java.lang.String)"
  - "com.azure.storage.common.Utility.parseDate(java.lang.String)"
  - "com.azure.storage.common.Utility.parseQueryString(java.lang.String)"
  - "com.azure.storage.common.Utility.parseQueryStringSplitValues(java.lang.String)"
  - "com.azure.storage.common.Utility.stripLastPathSegment(java.net.URL)"
  - "com.azure.storage.common.Utility.urlDecode(java.lang.String)"
  - "com.azure.storage.common.Utility.urlEncode(java.lang.String)"
  langs:
  - "java"
  name: "Utility"
  nameWithType: "Utility"
  fullName: "com.azure.storage.common.Utility"
  type: "Class"
  package: "com.azure.storage.common"
  syntax:
    content: "public final class Utility"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.storage.common.Utility.<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  id: "<T>applyOptionalTimeout(reactor.core.publisher.Flux<T>,java.time.Duration)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  nameWithType: "Utility.<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  fullName: "com.azure.storage.common.Utility.<T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
  overload: "com.azure.storage.common.Utility.applyOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Applies a timeout to a publisher if the given timeout is not null."
  syntax:
    content: "public static Flux<T> <T>applyOptionalTimeout(Flux<T> publisher, Duration timeout)"
    parameters:
    - id: "publisher"
      type: "reactor.core.publisher.Flux<T>"
      description: "Flux to apply optional timeout to."
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout."
    return:
      type: "reactor.core.publisher.Flux<T>"
      description: "Flux with an applied timeout, if any."
- uid: "com.azure.storage.common.Utility.<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  id: "<T>applyOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  nameWithType: "Utility.<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  fullName: "com.azure.storage.common.Utility.<T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
  overload: "com.azure.storage.common.Utility.applyOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Applies a timeout to a publisher if the given timeout is not null."
  syntax:
    content: "public static Mono<T> <T>applyOptionalTimeout(Mono<T> publisher, Duration timeout)"
    parameters:
    - id: "publisher"
      type: "reactor.core.publisher.Mono<T>"
      description: "Mono to apply optional timeout to."
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout."
    return:
      type: "reactor.core.publisher.Mono<T>"
      description: "Mono with an applied timeout, if any."
- uid: "com.azure.storage.common.Utility.<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  id: "<T>blockWithOptionalTimeout(reactor.core.publisher.Mono<T>,java.time.Duration)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  nameWithType: "Utility.<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  fullName: "com.azure.storage.common.Utility.<T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
  overload: "com.azure.storage.common.Utility.blockWithOptionalTimeout*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Blocks an asynchronous response with an optional timeout."
  syntax:
    content: "public static T <T>blockWithOptionalTimeout(Mono<T> response, Duration timeout)"
    parameters:
    - id: "response"
      type: "reactor.core.publisher.Mono<T>"
      description: "Asynchronous response to block"
    - id: "timeout"
      type: "java.time.Duration"
      description: "Optional timeout"
    return:
      type: "T"
      description: "the value of the asynchronous response"
- uid: "com.azure.storage.common.Utility.<T>postProcessResponse(reactor.core.publisher.Mono<T>,java.util.function.Function<reactor.core.publisher.Mono<T>,reactor.core.publisher.Mono<T>>)"
  id: "<T>postProcessResponse(reactor.core.publisher.Mono<T>,java.util.function.Function<reactor.core.publisher.Mono<T>,reactor.core.publisher.Mono<T>>)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "<T>postProcessResponse(Mono<T> response, Function<Mono<T>,Mono<T>> errorWrapper)"
  nameWithType: "Utility.<T>postProcessResponse(Mono<T> response, Function<Mono<T>,Mono<T>> errorWrapper)"
  fullName: "com.azure.storage.common.Utility.<T>postProcessResponse(Mono<T> response, Function<Mono<T>,Mono<T>> errorWrapper)"
  overload: "com.azure.storage.common.Utility.postProcessResponse*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Wraps any potential error responses from the service and applies post processing of the response's eTag header to standardize the value."
  syntax:
    content: "public static Mono<T> <T>postProcessResponse(Mono<T> response, Function<Mono<T>,Mono<T>> errorWrapper)"
    parameters:
    - id: "response"
      type: "reactor.core.publisher.Mono<T>"
      description: "Response from a service call"
    - id: "errorWrapper"
      type: "java.util.function.Function<reactor.core.publisher.Mono<T>,reactor.core.publisher.Mono<T>>"
      description: "Error wrapping function that is applied to the response"
    return:
      type: "reactor.core.publisher.Mono<T>"
      description: "an updated response with post processing steps applied."
- uid: "com.azure.storage.common.Utility.ISO_8601_UTC_DATE_FORMATTER"
  id: "ISO_8601_UTC_DATE_FORMATTER"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "ISO_8601_UTC_DATE_FORMATTER"
  nameWithType: "Utility.ISO_8601_UTC_DATE_FORMATTER"
  fullName: "com.azure.storage.common.Utility.ISO_8601_UTC_DATE_FORMATTER"
  type: "Field"
  package: "com.azure.storage.common"
  syntax:
    content: "public static final DateTimeFormatter ISO_8601_UTC_DATE_FORMATTER"
    return:
      type: "java.time.format.DateTimeFormatter"
- uid: "com.azure.storage.common.Utility.Utility()"
  id: "Utility()"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "Utility()"
  nameWithType: "Utility.Utility()"
  fullName: "com.azure.storage.common.Utility.Utility()"
  overload: "com.azure.storage.common.Utility.Utility*"
  type: "Constructor"
  package: "com.azure.storage.common"
  syntax:
    content: "public Utility()"
- uid: "com.azure.storage.common.Utility.appendToURLPath(java.lang.String,java.lang.String)"
  id: "appendToURLPath(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "appendToURLPath(String baseURL, String name)"
  nameWithType: "Utility.appendToURLPath(String baseURL, String name)"
  fullName: "com.azure.storage.common.Utility.appendToURLPath(String baseURL, String name)"
  overload: "com.azure.storage.common.Utility.appendToURLPath*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Appends a string to the end of the passed URL's path."
  syntax:
    content: "public static URL appendToURLPath(String baseURL, String name)"
    parameters:
    - id: "baseURL"
      type: "java.lang.String"
      description: "URL having a path appended"
    - id: "name"
      type: "java.lang.String"
      description: "Name of the path"
    return:
      type: "java.net.URL"
      description: "a URL with the path appended."
- uid: "com.azure.storage.common.Utility.assertInBounds(java.lang.String,long,long,long)"
  id: "assertInBounds(java.lang.String,long,long,long)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "assertInBounds(String param, long value, long min, long max)"
  nameWithType: "Utility.assertInBounds(String param, long value, long min, long max)"
  fullName: "com.azure.storage.common.Utility.assertInBounds(String param, long value, long min, long max)"
  overload: "com.azure.storage.common.Utility.assertInBounds*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Asserts that the specified number is in the valid range. The range is inclusive."
  syntax:
    content: "public static void assertInBounds(String param, long value, long min, long max)"
    parameters:
    - id: "param"
      type: "java.lang.String"
      description: "Name of the parameter"
    - id: "value"
      type: "long"
      description: "Value of the parameter"
    - id: "min"
      type: "long"
      description: "The minimum allowed value"
    - id: "max"
      type: "long"
      description: "The maximum allowed value"
- uid: "com.azure.storage.common.Utility.assertNotNull(java.lang.String,java.lang.Object)"
  id: "assertNotNull(java.lang.String,java.lang.Object)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "assertNotNull(String param, Object value)"
  nameWithType: "Utility.assertNotNull(String param, Object value)"
  fullName: "com.azure.storage.common.Utility.assertNotNull(String param, Object value)"
  overload: "com.azure.storage.common.Utility.assertNotNull*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Asserts that a value is not `null`."
  syntax:
    content: "public static void assertNotNull(String param, Object value)"
    parameters:
    - id: "param"
      type: "java.lang.String"
      description: "Name of the parameter"
    - id: "value"
      type: "java.lang.Object"
      description: "Value of the parameter"
- uid: "com.azure.storage.common.Utility.computeHMac256(java.lang.String,java.lang.String)"
  id: "computeHMac256(java.lang.String,java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "computeHMac256(String base64Key, String stringToSign)"
  nameWithType: "Utility.computeHMac256(String base64Key, String stringToSign)"
  fullName: "com.azure.storage.common.Utility.computeHMac256(String base64Key, String stringToSign)"
  overload: "com.azure.storage.common.Utility.computeHMac256*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Computes a signature for the specified string using the HMAC-SHA256 algorithm."
  syntax:
    content: "public static String computeHMac256(String base64Key, String stringToSign)"
    parameters:
    - id: "base64Key"
      type: "java.lang.String"
      description: "Base64 encoded key used to sign the string"
    - id: "stringToSign"
      type: "java.lang.String"
      description: "UTF-8 encoded string to sign"
    return:
      type: "java.lang.String"
      description: "the HMAC-SHA256 encoded signature"
- uid: "com.azure.storage.common.Utility.convertStreamToByteBuffer(java.io.InputStream,long,int)"
  id: "convertStreamToByteBuffer(java.io.InputStream,long,int)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "convertStreamToByteBuffer(InputStream data, long length, int blockSize)"
  nameWithType: "Utility.convertStreamToByteBuffer(InputStream data, long length, int blockSize)"
  fullName: "com.azure.storage.common.Utility.convertStreamToByteBuffer(InputStream data, long length, int blockSize)"
  overload: "com.azure.storage.common.Utility.convertStreamToByteBuffer*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "A utility method for converting the input stream to Flux of ByteBuffer. Will check the equality of entity length and the input length."
  syntax:
    content: "public static Flux<ByteBuffer> convertStreamToByteBuffer(InputStream data, long length, int blockSize)"
    parameters:
    - id: "data"
      type: "java.io.InputStream"
      description: "The input data which needs to convert to ByteBuffer."
    - id: "length"
      type: "long"
      description: "The expected input data length."
    - id: "blockSize"
      type: "int"
      description: "The size of each ByteBuffer."
    return:
      type: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
      description: "<xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\">ByteBuffer</xref> which contains the input data."
- uid: "com.azure.storage.common.Utility.getAccountName(java.net.URL)"
  id: "getAccountName(java.net.URL)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "getAccountName(URL url)"
  nameWithType: "Utility.getAccountName(URL url)"
  fullName: "com.azure.storage.common.Utility.getAccountName(URL url)"
  overload: "com.azure.storage.common.Utility.getAccountName*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Strips the account name from host part of the URL object."
  syntax:
    content: "public static String getAccountName(URL url)"
    parameters:
    - id: "url"
      type: "java.net.URL"
      description: "URL having its  hostanme"
    return:
      type: "java.lang.String"
      description: "account name."
- uid: "com.azure.storage.common.Utility.getSharedKeyCredential(com.azure.core.http.HttpPipeline)"
  id: "getSharedKeyCredential(com.azure.core.http.HttpPipeline)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "getSharedKeyCredential(HttpPipeline httpPipeline)"
  nameWithType: "Utility.getSharedKeyCredential(HttpPipeline httpPipeline)"
  fullName: "com.azure.storage.common.Utility.getSharedKeyCredential(HttpPipeline httpPipeline)"
  overload: "com.azure.storage.common.Utility.getSharedKeyCredential*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Searches for a <xref uid=\"com.azure.storage.common.credentials.SharedKeyCredential\" data-throw-if-not-resolved=\"false\">SharedKeyCredential</xref> in the passed <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref>."
  syntax:
    content: "public static SharedKeyCredential getSharedKeyCredential(HttpPipeline httpPipeline)"
    parameters:
    - id: "httpPipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "Pipeline being searched"
    return:
      type: "com.azure.storage.common.credentials.SharedKeyCredential"
      description: "a SharedKeyCredential if the pipeline contains one, otherwise null."
- uid: "com.azure.storage.common.Utility.parseConnectionString(java.lang.String)"
  id: "parseConnectionString(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "parseConnectionString(String connectionString)"
  nameWithType: "Utility.parseConnectionString(String connectionString)"
  fullName: "com.azure.storage.common.Utility.parseConnectionString(String connectionString)"
  overload: "com.azure.storage.common.Utility.parseConnectionString*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Parses the connection string into key-value pair map."
  syntax:
    content: "public static Map<String,String> parseConnectionString(String connectionString)"
    parameters:
    - id: "connectionString"
      type: "java.lang.String"
      description: "Connection string to parse"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "a mapping of connection string pieces as key-value pairs."
- uid: "com.azure.storage.common.Utility.parseDate(java.lang.String)"
  id: "parseDate(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "parseDate(String dateString)"
  nameWithType: "Utility.parseDate(String dateString)"
  fullName: "com.azure.storage.common.Utility.parseDate(String dateString)"
  overload: "com.azure.storage.common.Utility.parseDate*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Given a String representing a date in a form of the ISO8601 pattern, generates a Date representing it with up to millisecond precision."
  syntax:
    content: "public static OffsetDateTime parseDate(String dateString)"
    parameters:
    - id: "dateString"
      type: "java.lang.String"
      description: "the <code>String</code> to be interpreted as a <code>Date</code>"
    return:
      type: "java.time.OffsetDateTime"
      description: "the corresponding <code>Date</code> object"
- uid: "com.azure.storage.common.Utility.parseQueryString(java.lang.String)"
  id: "parseQueryString(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "parseQueryString(String queryString)"
  nameWithType: "Utility.parseQueryString(String queryString)"
  fullName: "com.azure.storage.common.Utility.parseQueryString(String queryString)"
  overload: "com.azure.storage.common.Utility.parseQueryString*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Parses the query string into a key-value pair map that maintains key, query parameter key, order. The value is stored as a string (ex. key=val1,val2,val3 instead of key=\\[val1, val2, val3\\])."
  syntax:
    content: "public static Map<String,String> parseQueryString(String queryString)"
    parameters:
    - id: "queryString"
      type: "java.lang.String"
      description: "Query string to parse"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "a mapping of query string pieces as key-value pairs."
- uid: "com.azure.storage.common.Utility.parseQueryStringSplitValues(java.lang.String)"
  id: "parseQueryStringSplitValues(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "parseQueryStringSplitValues(String queryString)"
  nameWithType: "Utility.parseQueryStringSplitValues(String queryString)"
  fullName: "com.azure.storage.common.Utility.parseQueryStringSplitValues(String queryString)"
  overload: "com.azure.storage.common.Utility.parseQueryStringSplitValues*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Parses the query string into a key-value pair map that maintains key, query parameter key, order. The value is stored as a parsed array (ex. key=\\[val1, val2, val3\\] instead of key=val1,val2,val3)."
  syntax:
    content: "public static Map<String,String[]> parseQueryStringSplitValues(String queryString)"
    parameters:
    - id: "queryString"
      type: "java.lang.String"
      description: "Query string to parse"
    return:
      type: "java.util.Map<java.lang.String,java.lang.String[]>"
      description: "a mapping of query string pieces as key-value pairs."
- uid: "com.azure.storage.common.Utility.stripLastPathSegment(java.net.URL)"
  id: "stripLastPathSegment(java.net.URL)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "stripLastPathSegment(URL baseURL)"
  nameWithType: "Utility.stripLastPathSegment(URL baseURL)"
  fullName: "com.azure.storage.common.Utility.stripLastPathSegment(URL baseURL)"
  overload: "com.azure.storage.common.Utility.stripLastPathSegment*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Strips the last path segment from the passed URL."
  syntax:
    content: "public static URL stripLastPathSegment(URL baseURL)"
    parameters:
    - id: "baseURL"
      type: "java.net.URL"
      description: "URL having its last path segment stripped"
    return:
      type: "java.net.URL"
      description: "a URL with the path segment stripped."
- uid: "com.azure.storage.common.Utility.urlDecode(java.lang.String)"
  id: "urlDecode(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "urlDecode(String stringToDecode)"
  nameWithType: "Utility.urlDecode(String stringToDecode)"
  fullName: "com.azure.storage.common.Utility.urlDecode(String stringToDecode)"
  overload: "com.azure.storage.common.Utility.urlDecode*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Performs a safe decoding of the passed string, taking care to preserve each `+` character rather than replacing it with a space character."
  syntax:
    content: "public static String urlDecode(String stringToDecode)"
    parameters:
    - id: "stringToDecode"
      type: "java.lang.String"
      description: "String value to decode"
    return:
      type: "java.lang.String"
      description: "the decoded string value"
- uid: "com.azure.storage.common.Utility.urlEncode(java.lang.String)"
  id: "urlEncode(java.lang.String)"
  parent: "com.azure.storage.common.Utility"
  langs:
  - "java"
  name: "urlEncode(String stringToEncode)"
  nameWithType: "Utility.urlEncode(String stringToEncode)"
  fullName: "com.azure.storage.common.Utility.urlEncode(String stringToEncode)"
  overload: "com.azure.storage.common.Utility.urlEncode*"
  type: "Method"
  package: "com.azure.storage.common"
  summary: "Performs a safe encoding of the specified string, taking care to insert %20 for each space character instead of inserting the `+` character."
  syntax:
    content: "public static String urlEncode(String stringToEncode)"
    parameters:
    - id: "stringToEncode"
      type: "java.lang.String"
      description: "String value to encode"
    return:
      type: "java.lang.String"
      description: "the encoded string value"
references:
- uid: "com.azure.storage.common.Utility.Utility*"
  name: "Utility"
  nameWithType: "Utility.Utility"
  fullName: "com.azure.storage.common.Utility.Utility"
  package: "com.azure.storage.common"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.Utility.parseQueryString*"
  name: "parseQueryString"
  nameWithType: "Utility.parseQueryString"
  fullName: "com.azure.storage.common.Utility.parseQueryString"
  package: "com.azure.storage.common"
- uid: "java.util.Map<java.lang.String,java.lang.String[]>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.Utility.parseQueryStringSplitValues*"
  name: "parseQueryStringSplitValues"
  nameWithType: "Utility.parseQueryStringSplitValues"
  fullName: "com.azure.storage.common.Utility.parseQueryStringSplitValues"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.urlDecode*"
  name: "urlDecode"
  nameWithType: "Utility.urlDecode"
  fullName: "com.azure.storage.common.Utility.urlDecode"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.urlEncode*"
  name: "urlEncode"
  nameWithType: "Utility.urlEncode"
  fullName: "com.azure.storage.common.Utility.urlEncode"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.parseConnectionString*"
  name: "parseConnectionString"
  nameWithType: "Utility.parseConnectionString"
  fullName: "com.azure.storage.common.Utility.parseConnectionString"
  package: "com.azure.storage.common"
- uid: "reactor.core.publisher.Mono<T>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.time.Duration"
  spec.java:
  - uid: "java.time.Duration"
    name: "Duration"
    fullName: "java.time.Duration"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "com.azure.storage.common.Utility.blockWithOptionalTimeout*"
  name: "<T>blockWithOptionalTimeout"
  nameWithType: "Utility.<T>blockWithOptionalTimeout"
  fullName: "com.azure.storage.common.Utility.<T>blockWithOptionalTimeout"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.applyOptionalTimeout*"
  name: "<T>applyOptionalTimeout"
  nameWithType: "Utility.<T>applyOptionalTimeout"
  fullName: "com.azure.storage.common.Utility.<T>applyOptionalTimeout"
  package: "com.azure.storage.common"
- uid: "reactor.core.publisher.Flux<T>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "com.azure.storage.common.Utility.assertNotNull*"
  name: "assertNotNull"
  nameWithType: "Utility.assertNotNull"
  fullName: "com.azure.storage.common.Utility.assertNotNull"
  package: "com.azure.storage.common"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.storage.common.Utility.assertInBounds*"
  name: "assertInBounds"
  nameWithType: "Utility.assertInBounds"
  fullName: "com.azure.storage.common.Utility.assertInBounds"
  package: "com.azure.storage.common"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.storage.common.Utility.parseDate*"
  name: "parseDate"
  nameWithType: "Utility.parseDate"
  fullName: "com.azure.storage.common.Utility.parseDate"
  package: "com.azure.storage.common"
- uid: "java.util.function.Function<reactor.core.publisher.Mono<T>,reactor.core.publisher.Mono<T>>"
  spec.java:
  - uid: "java.util.function.Function"
    name: "Function"
    fullName: "java.util.function.Function"
  - name: "<"
    fullName: "<"
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ","
    fullName: ","
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.Utility.postProcessResponse*"
  name: "<T>postProcessResponse"
  nameWithType: "Utility.<T>postProcessResponse"
  fullName: "com.azure.storage.common.Utility.<T>postProcessResponse"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.computeHMac256*"
  name: "computeHMac256"
  nameWithType: "Utility.computeHMac256"
  fullName: "com.azure.storage.common.Utility.computeHMac256"
  package: "com.azure.storage.common"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "com.azure.storage.common.Utility.appendToURLPath*"
  name: "appendToURLPath"
  nameWithType: "Utility.appendToURLPath"
  fullName: "com.azure.storage.common.Utility.appendToURLPath"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.getAccountName*"
  name: "getAccountName"
  nameWithType: "Utility.getAccountName"
  fullName: "com.azure.storage.common.Utility.getAccountName"
  package: "com.azure.storage.common"
- uid: "com.azure.storage.common.Utility.stripLastPathSegment*"
  name: "stripLastPathSegment"
  nameWithType: "Utility.stripLastPathSegment"
  fullName: "com.azure.storage.common.Utility.stripLastPathSegment"
  package: "com.azure.storage.common"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.storage.common.credentials.SharedKeyCredential"
  name: "SharedKeyCredential"
  nameWithType: "SharedKeyCredential"
  fullName: "com.azure.storage.common.credentials.SharedKeyCredential"
- uid: "com.azure.storage.common.Utility.getSharedKeyCredential*"
  name: "getSharedKeyCredential"
  nameWithType: "Utility.getSharedKeyCredential"
  fullName: "com.azure.storage.common.Utility.getSharedKeyCredential"
  package: "com.azure.storage.common"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "reactor.core.publisher.Flux<java.nio.ByteBuffer>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.storage.common.Utility.convertStreamToByteBuffer*"
  name: "convertStreamToByteBuffer"
  nameWithType: "Utility.convertStreamToByteBuffer"
  fullName: "com.azure.storage.common.Utility.convertStreamToByteBuffer"
  package: "com.azure.storage.common"
- uid: "java.time.format.DateTimeFormatter"
  spec.java:
  - uid: "java.time.format.DateTimeFormatter"
    name: "DateTimeFormatter"
    fullName: "java.time.format.DateTimeFormatter"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "java.lang.String,java.lang.String[]"
  name: "String,String[]"
  nameWithType: "String,String[]"
  fullName: "java.lang.String,java.lang.String[]"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "T>,reactor.core.publisher.Mono"
  name: "T>,Mono"
  nameWithType: "T>,Mono"
  fullName: "T>,reactor.core.publisher.Mono"
- uid: "java.util.function.Function"
  name: "Function"
  nameWithType: "Function"
  fullName: "java.util.function.Function"
- uid: "java.nio.ByteBuffer"
  name: "ByteBuffer"
  nameWithType: "ByteBuffer"
  fullName: "java.nio.ByteBuffer"

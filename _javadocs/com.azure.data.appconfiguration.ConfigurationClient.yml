### YamlMime:ManagedReference
items:
- uid: "com.azure.data.appconfiguration.ConfigurationClient"
  id: "ConfigurationClient"
  parent: "com.azure.data.appconfiguration"
  children:
  - "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient(com.azure.data.appconfiguration.ConfigurationAsyncClient)"
  - "com.azure.data.appconfiguration.ConfigurationClient.addSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.getSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  - "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationClient.setSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "ConfigurationClient"
  nameWithType: "ConfigurationClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient"
  type: "Class"
  package: "com.azure.data.appconfiguration"
  summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, lock and unlock ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\">filter</xref>.\n\n**Instantiating a synchronous Configuration Client**\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.instantiation\\}\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public final class ConfigurationClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient(com.azure.data.appconfiguration.ConfigurationAsyncClient)"
  id: "ConfigurationClient(com.azure.data.appconfiguration.ConfigurationAsyncClient)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "ConfigurationClient(ConfigurationAsyncClient client)"
  nameWithType: "ConfigurationClient.ConfigurationClient(ConfigurationAsyncClient client)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient(ConfigurationAsyncClient client)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient*"
  type: "Constructor"
  package: "com.azure.data.appconfiguration"
  summary: "Creates a ConfigurationClient that sends requests to the configuration service at `serviceEndpoint`. Each service call goes through the `pipeline`."
  syntax:
    content: " ConfigurationClient(ConfigurationAsyncClient client)"
    parameters:
    - id: "client"
      type: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
      description: "The <xref uid=\"com.azure.data.appconfiguration.ConfigurationAsyncClient\" data-throw-if-not-resolved=\"false\">ConfigurationAsyncClient</xref> that the client routes its request through."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "addSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "addSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.addSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.addSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSetting\\#String-String-String\\}"
  syntax:
    content: "public ConfigurationSetting addSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to add."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to create, or optionally, null if a setting with\n label is desired."
    - id: "value"
      type: "java.lang.String"
      description: "The value associated with this configuration setting key."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "addSettingWithResponse(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationClient.addSettingWithResponse(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse\\#ConfigurationSetting-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> addSettingWithResponse(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to add based on its key and optional label combination."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response containing the the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, or <code>null</code>, if a\n key collision occurs or the key is an invalid value (which will also throw ServiceRequestException described\n below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly(java.lang.String,java.lang.String)"
  id: "clearReadOnly(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "clearReadOnly(String key, String label)"
  nameWithType: "ConfigurationClient.clearReadOnly(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Unlock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching `key`, optional `label` combination.\n\n**Code Samples**\n\nUnlock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.clearReadOnly\\#string-string\\}"
  syntax:
    content: "public ConfigurationSetting clearReadOnly(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to unlock."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to unlock, or optionally, null if a setting with\n label is desired."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was unlocked, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "clearReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationClient.clearReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Unlock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> combination.\n\n**Code Samples**\n\nUnlock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.clearReadOnlyWithResponse\\#ConfigurationSetting-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> clearReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to unlock based on its key and optional label combination."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response containing the unlocked ConfigurationSetting, or <code>null</code> if didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value. (which will\n also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting(java.lang.String,java.lang.String)"
  id: "deleteSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "deleteSetting(String key, String label)"
  nameWithType: "ConfigurationClient.deleteSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting\\#string-string\\}"
  syntax:
    content: "public ConfigurationSetting deleteSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to delete."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to delete, or optionally, null if a setting with\n label is desired."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The deleted ConfigurationSetting or <code>null</code> if it didn't exist. <code>null</code> is also returned if the\n <code>key</code> is an invalid value (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> and optional ETag combination. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the etag matches the current etag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSettingWithResponse\\#ConfigurationSetting-boolean-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to delete based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is set but does not match the current etag\n (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSetting(java.lang.String,java.lang.String)"
  id: "getSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "getSetting(String key, String label)"
  nameWithType: "ConfigurationClient.getSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.getSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting\\#string-string\\}"
  syntax:
    content: "public ConfigurationSetting getSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to retrieve, or optionally, null if a setting with\n label is desired."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  id: "getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  nameWithType: "ConfigurationClient.getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.getSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `asOfDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting\\#string-string-OffsetDateTime\\}"
  syntax:
    content: "public ConfigurationSetting getSetting(String key, String label, OffsetDateTime asOfDateTime)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to create or update, or optionally, null if a setting with\n label is desired."
    - id: "asOfDateTime"
      type: "java.time.OffsetDateTime"
      description: "To access a past state of the configuration setting, or optionally, null if a setting with\n <code>asOfDateTime</code> is desired."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or <code>null</code>, if the configuration value does\n not exist or the key is an invalid value (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  id: "getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged, Context context)"
  nameWithType: "ConfigurationClient.getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref>, optional `asOfDateTime` and optional ETag combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.getSettingWithResponse\\#ConfigurationSetting-OffsetDateTime-boolean-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to retrieve."
    - id: "asOfDateTime"
      type: "java.time.OffsetDateTime"
      description: "To access a past state of the configuration setting, or optionally, null if a setting with\n <code>asOfDateTime</code> is desired."
    - id: "ifChanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n If-None-Match header."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or <code>null</code>, if the\n configuration value does not exist or the key is an invalid value (which will also throw ServiceRequestException\n described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "listSettingRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listSettingRevisions(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\">lastModified</xref> date. Revisions expire after a period of time. The service maintains change history for up to 7 days. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `options`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions\\#settingSelector\\}"
  syntax:
    content: "public PagedIterable<ConfigurationSetting> listSettingRevisions(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Used to filter configuration setting revisions from the service."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> revisions."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "listSettingRevisions(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listSettingRevisions(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\">lastModified</xref> date. Revisions expire after a period of time. The service maintains change history for up to 7 days. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `options`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions\\#settingSelector-context\\}"
  syntax:
    content: "public PagedIterable<ConfigurationSetting> listSettingRevisions(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Used to filter configuration setting revisions from the service."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> revisions."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "listSettings(SettingSelector selector)"
  nameWithType: "ConfigurationClient.listSettings(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettings(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.listSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Fetches the configuration settings that match the `options`. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">configuration settings</xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings\\#settingSelector\\}"
  syntax:
    content: "public PagedIterable<ConfigurationSetting> listSettings(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Selector to filter configuration setting results from the service."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of ConfigurationSettings that matches the <code>options</code>. If no options were\n provided, the List contains all of the current settings in the service."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "listSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationClient.listSettings(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettings(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.listSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Fetches the configuration settings that match the `options`. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">configuration settings</xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings\\#settingSelector-context\\}"
  syntax:
    content: "public PagedIterable<ConfigurationSetting> listSettings(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Selector to filter configuration setting results from the service."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of ConfigurationSettings that matches the <code>options</code>. If no options were\n provided, the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> contains all of the current settings in the service."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(java.lang.String,java.lang.String)"
  id: "setReadOnly(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "setReadOnly(String key, String label)"
  nameWithType: "ConfigurationClient.setReadOnly(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching `key`, optional `label` combination.\n\n**Code Samples**\n\nLock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnly\\#string-string\\}"
  syntax:
    content: "public ConfigurationSetting setReadOnly(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to lock."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to lock, or optionally, null if a setting with label is desired."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was locked, or <code>null</code> is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> combination.\n\n**Code Samples**\n\nLock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnlyWithResponse\\#ConfigurationSetting-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> setReadOnlyWithResponse(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to lock based on its key and optional label combination."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response containing the locked ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value. (which will also throw\n HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "setSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "setSetting(String key, String label, String value)"
  nameWithType: "ConfigurationClient.setSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.setSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service with the given key and. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSetting\\#String-String-String\\}"
  syntax:
    content: "public ConfigurationSetting setSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to create or update."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to create or update, or optionally, null if a setting with\n label is desired."
    - id: "value"
      type: "java.lang.String"
      description: "The value of this configuration setting."
    return:
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, or <code>null</code> if the key is an invalid\n value (which will also throw ServiceRequestException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationClient"
  langs:
  - "java"
  name: "setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationClient.setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified, the configuration value is updated if the current setting's etag matches. If the etag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\" and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse\\#ConfigurationSetting-boolean-Context\\}"
  syntax:
    content: "public Response<ConfigurationSetting> setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to create or update based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "A boolean indicates if <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A REST response contains the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, or <code>null</code>,\n if the configuration value does not exist or the key is an invalid value (which will also throw\n ServiceRequestException described below)."
references:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  name: "ConfigurationAsyncClient"
  nameWithType: "ConfigurationAsyncClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient*"
  name: "ConfigurationClient"
  nameWithType: "ConfigurationClient.ConfigurationClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.ConfigurationClient"
  package: "com.azure.data.appconfiguration"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  name: "ConfigurationSetting"
  nameWithType: "ConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addSetting*"
  name: "addSetting"
  nameWithType: "ConfigurationClient.addSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse*"
  name: "addSettingWithResponse"
  nameWithType: "ConfigurationClient.addSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setSetting*"
  name: "setSetting"
  nameWithType: "ConfigurationClient.setSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setSetting"
  package: "com.azure.data.appconfiguration"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse*"
  name: "setSettingWithResponse"
  nameWithType: "ConfigurationClient.setSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSetting*"
  name: "getSetting"
  nameWithType: "ConfigurationClient.getSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSetting"
  package: "com.azure.data.appconfiguration"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse*"
  name: "getSettingWithResponse"
  nameWithType: "ConfigurationClient.getSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.getSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting*"
  name: "deleteSetting"
  nameWithType: "ConfigurationClient.deleteSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse*"
  name: "deleteSettingWithResponse"
  nameWithType: "ConfigurationClient.deleteSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.deleteSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly*"
  name: "setReadOnly"
  nameWithType: "ConfigurationClient.setReadOnly"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnly"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse*"
  name: "setReadOnlyWithResponse"
  nameWithType: "ConfigurationClient.setReadOnlyWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.setReadOnlyWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly*"
  name: "clearReadOnly"
  nameWithType: "ConfigurationClient.clearReadOnly"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnly"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse*"
  name: "clearReadOnlyWithResponse"
  nameWithType: "ConfigurationClient.clearReadOnlyWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.clearReadOnlyWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.models.SettingSelector"
  name: "SettingSelector"
  nameWithType: "SettingSelector"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettings*"
  name: "listSettings"
  nameWithType: "ConfigurationClient.listSettings"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettings"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions*"
  name: "listSettingRevisions"
  nameWithType: "ConfigurationClient.listSettingRevisions"
  fullName: "com.azure.data.appconfiguration.ConfigurationClient.listSettingRevisions"
  package: "com.azure.data.appconfiguration"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.core.http.rest.PagedIterable"
  name: "PagedIterable"
  nameWithType: "PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable"

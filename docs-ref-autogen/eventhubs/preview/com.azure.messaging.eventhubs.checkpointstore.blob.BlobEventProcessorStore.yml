### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  id: "BlobEventProcessorStore"
  parent: "com.azure.messaging.eventhubs.checkpointstore.blob"
  children:
  - "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore(com.azure.storage.blob.BlobContainerAsyncClient)"
  - "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership(com.azure.messaging.eventhubs.models.PartitionOwnership...)"
  - "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)"
  langs:
  - "java"
  name: "BlobEventProcessorStore"
  nameWithType: "BlobEventProcessorStore"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  type: "Class"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
  summary: "Implementation of <xref uid=\"com.azure.messaging.eventhubs.EventProcessorStore\" data-throw-if-not-resolved=\"false\">EventProcessorStore</xref> that uses [Storage Blobs][] for persisting partition ownership and checkpoint information. <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventProcessors</xref> can use this implementation to load balance and update checkpoints.\n\n\n[Storage Blobs]: https://docs.microsoft.com/en-us/azure/storage/common/storage-introduction#blob-storage"
  syntax:
    content: "public class BlobEventProcessorStore implements EventProcessorStore"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.azure.messaging.eventhubs.EventProcessorStore"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore(com.azure.storage.blob.BlobContainerAsyncClient)"
  id: "BlobEventProcessorStore(com.azure.storage.blob.BlobContainerAsyncClient)"
  parent: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  langs:
  - "java"
  name: "BlobEventProcessorStore(BlobContainerAsyncClient blobContainerAsyncClient)"
  nameWithType: "BlobEventProcessorStore.BlobEventProcessorStore(BlobContainerAsyncClient blobContainerAsyncClient)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore(BlobContainerAsyncClient blobContainerAsyncClient)"
  overload: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore*"
  type: "Constructor"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
  summary: "Creates an instance of BlobEventProcessorStore."
  syntax:
    content: "public BlobEventProcessorStore(BlobContainerAsyncClient blobContainerAsyncClient)"
    parameters:
    - id: "blobContainerAsyncClient"
      type: "com.azure.storage.blob.BlobContainerAsyncClient"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">BlobContainerAsyncClient</xref> this instance will use to read and update\n blobs in the storage container."
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership(com.azure.messaging.eventhubs.models.PartitionOwnership...)"
  id: "claimOwnership(com.azure.messaging.eventhubs.models.PartitionOwnership...)"
  parent: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  langs:
  - "java"
  name: "claimOwnership(PartitionOwnership[] requestedPartitionOwnerships)"
  nameWithType: "BlobEventProcessorStore.claimOwnership(PartitionOwnership[] requestedPartitionOwnerships)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership(PartitionOwnership[] requestedPartitionOwnerships)"
  overload: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
  summary: "This method is called by the <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> to claim ownership of a list of partitions. This will return the list of partitions that were owned successfully."
  syntax:
    content: "public Flux<PartitionOwnership> claimOwnership(PartitionOwnership[] requestedPartitionOwnerships)"
    parameters:
    - id: "requestedPartitionOwnerships"
      type: "com.azure.messaging.eventhubs.models.PartitionOwnership[]"
      description: "Array of partition ownerships this instance is requesting to own."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>"
      description: "A flux of partitions this instance successfully claimed ownership."
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership(java.lang.String,java.lang.String,java.lang.String)"
  id: "listOwnership(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  langs:
  - "java"
  name: "listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroupName)"
  nameWithType: "BlobEventProcessorStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroupName)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroupName)"
  overload: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
  summary: "This method is called by the <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventProcessor</xref> to get the list of all existing partition ownership from the Storage Blobs. Could return empty results if there are is no existing ownership information."
  syntax:
    content: "public Flux<PartitionOwnership> listOwnership(String fullyQualifiedNamespace, String eventHubName, String consumerGroupName)"
    parameters:
    - id: "fullyQualifiedNamespace"
      type: "java.lang.String"
    - id: "eventHubName"
      type: "java.lang.String"
      description: "The Event Hub name to get ownership information."
    - id: "consumerGroupName"
      type: "java.lang.String"
      description: "The consumer group name."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>"
      description: "A flux of partition ownership details of all the partitions that have/had an owner."
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)"
  id: "updateCheckpoint(com.azure.messaging.eventhubs.models.Checkpoint)"
  parent: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore"
  langs:
  - "java"
  name: "updateCheckpoint(Checkpoint checkpoint)"
  nameWithType: "BlobEventProcessorStore.updateCheckpoint(Checkpoint checkpoint)"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint(Checkpoint checkpoint)"
  overload: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint*"
  type: "Method"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
  summary: "Updates the checkpoint in Storage Blobs for a partition."
  syntax:
    content: "public Mono<String> updateCheckpoint(Checkpoint checkpoint)"
    parameters:
    - id: "checkpoint"
      type: "com.azure.messaging.eventhubs.models.Checkpoint"
      description: "Checkpoint information containing sequence number and offset to be stored for this partition."
    return:
      type: "reactor.core.publisher.Mono<java.lang.String>"
      description: "The new ETag on successful update."
references:
- uid: "com.azure.storage.blob.BlobContainerAsyncClient"
  spec.java:
  - uid: "com.azure.storage.blob.BlobContainerAsyncClient"
    name: "BlobContainerAsyncClient"
    fullName: "com.azure.storage.blob.BlobContainerAsyncClient"
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore*"
  name: "BlobEventProcessorStore"
  nameWithType: "BlobEventProcessorStore.BlobEventProcessorStore"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.BlobEventProcessorStore"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "reactor.core.publisher.Flux<com.azure.messaging.eventhubs.models.PartitionOwnership>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.eventhubs.models.PartitionOwnership"
    name: "PartitionOwnership"
    fullName: "com.azure.messaging.eventhubs.models.PartitionOwnership"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership*"
  name: "listOwnership"
  nameWithType: "BlobEventProcessorStore.listOwnership"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.listOwnership"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
- uid: "com.azure.messaging.eventhubs.models.PartitionOwnership[]"
  spec.java:
  - uid: "com.azure.messaging.eventhubs.models.PartitionOwnership"
    name: "PartitionOwnership"
    fullName: "com.azure.messaging.eventhubs.models.PartitionOwnership"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership*"
  name: "claimOwnership"
  nameWithType: "BlobEventProcessorStore.claimOwnership"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.claimOwnership"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
- uid: "com.azure.messaging.eventhubs.models.Checkpoint"
  spec.java:
  - uid: "com.azure.messaging.eventhubs.models.Checkpoint"
    name: "Checkpoint"
    fullName: "com.azure.messaging.eventhubs.models.Checkpoint"
- uid: "reactor.core.publisher.Mono<java.lang.String>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint*"
  name: "updateCheckpoint"
  nameWithType: "BlobEventProcessorStore.updateCheckpoint"
  fullName: "com.azure.messaging.eventhubs.checkpointstore.blob.BlobEventProcessorStore.updateCheckpoint"
  package: "com.azure.messaging.eventhubs.checkpointstore.blob"
- uid: "com.azure.messaging.eventhubs.EventProcessorStore"
  name: "EventProcessorStore"
  nameWithType: "EventProcessorStore"
  fullName: "com.azure.messaging.eventhubs.EventProcessorStore"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "com.azure.messaging.eventhubs.models.PartitionOwnership"
  name: "PartitionOwnership"
  nameWithType: "PartitionOwnership"
  fullName: "com.azure.messaging.eventhubs.models.PartitionOwnership"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"

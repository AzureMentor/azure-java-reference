### YamlMime:ManagedReference
items:
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  id: "ConfigurationAsyncClient"
  parent: "com.azure.data.appconfiguration"
  children:
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(java.lang.String,java.lang.String,java.lang.String)"
  - "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  langs:
  - "java"
  name: "ConfigurationAsyncClient"
  nameWithType: "ConfigurationAsyncClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  type: "Class"
  package: "com.azure.data.appconfiguration"
  summary: "This class provides a client that contains all the operations for <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> in Azure App Configuration Store. Operations allowed by the client are adding, retrieving, deleting, lock and unlock ConfigurationSettings, and listing settings or revision of a setting based on a <xref uid=\"com.azure.data.appconfiguration.models.SettingSelector\" data-throw-if-not-resolved=\"false\">filter</xref>.\n\n**Instantiating an asynchronous Configuration Client**\n\n\\{@codesnippet com.azure.data.applicationconfig.async.configurationclient.instantiation\\}\n\nView <xref uid=\"com.azure.data.appconfiguration.ConfigurationClientBuilder\" data-throw-if-not-resolved=\"false\">this</xref> for additional ways to construct the client."
  syntax:
    content: "public final class ConfigurationAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline)"
  id: "ConfigurationAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline)"
  nameWithType: "ConfigurationAsyncClient.ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient*"
  type: "Constructor"
  package: "com.azure.data.appconfiguration"
  summary: "Creates a ConfigurationAsyncClient that sends requests to the configuration service at `serviceEndpoint`. Each service call goes through the `pipeline`."
  syntax:
    content: " ConfigurationAsyncClient(String serviceEndpoint, HttpPipeline pipeline)"
    parameters:
    - id: "serviceEndpoint"
      type: "java.lang.String"
      description: "The URL string for the App Configuration service."
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "HttpPipeline that the HTTP requests and responses flow through."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  id: "addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addSetting(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.addSetting(ConfigurationSetting setting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(ConfigurationSetting setting)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key and label does not exist.The label value of the ConfigurationSetting is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSetting\\#ConfigurationSetting\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> addSetting(ConfigurationSetting setting)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to add based on its key and optional label combination."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, or an empty Mono if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "addSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addSetting(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationAsyncClient.addSetting(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> addSetting(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "addSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.addSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key does not exist. The `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\" and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSetting\\#string-string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> addSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to add."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to add, or optionally, null if a setting with\n label is desired."
    - id: "value"
      type: "java.lang.String"
      description: "The value associated with this configuration setting key."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, or <code>null</code> if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  id: "addSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "addSettingWithResponse(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.addSettingWithResponse(ConfigurationSetting setting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse(ConfigurationSetting setting)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Adds a configuration value in the service if that key and label does not exist. The label value of the ConfigurationSetting is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSettingWithResponse\\#ConfigurationSetting\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> addSettingWithResponse(ConfigurationSetting setting)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to add based on its key and optional label combination."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created, if a key collision occurs\n or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "clearReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "clearReadOnly(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationAsyncClient.clearReadOnly(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> clearReadOnly(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(java.lang.String,java.lang.String)"
  id: "clearReadOnly(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "clearReadOnly(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.clearReadOnly(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Unlock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching `key`, and optional `label` combination.\n\n**Code Samples**\n\nUnlock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.clearReadOnly\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> clearReadOnly(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to unlock."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to unlock, or optionally, null if a setting with\n label is desired."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was unlocked, or an empty Mono is also returned if a key collision\n occurs or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  id: "clearReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "clearReadOnlyWithResponse(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.clearReadOnlyWithResponse(ConfigurationSetting setting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse(ConfigurationSetting setting)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Unlock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> combination.\n\n**Code Samples**\n\nUnlock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.clearReadOnlyWithResponse\\#ConfigurationSetting\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> clearReadOnlyWithResponse(ConfigurationSetting setting)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to unlock based on its key and optional label combination."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the unlocked ConfigurationSetting, or <code>null</code> if didn't exist.\n <code>null</code> is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value. (which will\n also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "deleteSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.deleteSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> deleteSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "ifUnchanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(java.lang.String,java.lang.String)"
  id: "deleteSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.deleteSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the ConfigurationSetting with a matching `key` and optional `label` combination.\n\n**Code Samples**\n\nDelete the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.deleteSetting\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> deleteSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to delete."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to delete, or optionally, null if a setting with\n label is desired."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The deleted ConfigurationSetting or an empty Mono is also returned if the <code>key</code> is an invalid value\n (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  id: "deleteSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Deletes the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> and optional ETag combination. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified and is not the wildcard character (`\"*\"`), then the setting is **only** deleted if the etag matches the current etag; this means that no one has updated the ConfigurationSetting yet.\n\n**Code Samples**\n\nDelete the setting with the key-label \"prodDBConnection\"-\"westUS\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.deleteSettingWithResponse\\#ConfigurationSetting-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> deleteSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to delete based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the deleted ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value or\n <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is set but does not match the current etag\n (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  id: "getSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getSetting(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean onlyIfChanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.getSetting(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean onlyIfChanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean onlyIfChanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> getSetting(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean onlyIfChanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "asOfDateTime"
      type: "java.time.OffsetDateTime"
    - id: "onlyIfChanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(java.lang.String,java.lang.String)"
  id: "getSetting(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getSetting(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.getSetting(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, and the optional `label` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getSetting\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> getSetting(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to retrieve, or optionally, null if a setting with\n label is desired."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  id: "getSetting(java.lang.String,java.lang.String,java.time.OffsetDateTime)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  nameWithType: "ConfigurationAsyncClient.getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting(String key, String label, OffsetDateTime asOfDateTime)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get a ConfigurationSetting that matches the `key`, the optional `label`, and the optional `asOfDateTime` combination.\n\n**Code Samples**\n\nRetrieve the setting with the key \"prodDBConnection\" and a time that one minute before now at UTC-Zone\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getSetting\\#string-string-OffsetDateTime\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> getSetting(String key, String label, OffsetDateTime asOfDateTime)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the setting to retrieve."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to retrieve, or optionally, null if a setting with\n label is desired."
    - id: "asOfDateTime"
      type: "java.time.OffsetDateTime"
      description: "To access a past state of the configuration setting, or optionally, null if a setting with\n <code>asOfDateTime</code>  is desired."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or an empty Mono if the configuration value does\n not exist or the key is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  id: "getSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,java.time.OffsetDateTime,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged)"
  nameWithType: "ConfigurationAsyncClient.getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Attempts to get the ConfigurationSetting with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref>, optional `asOfDateTime` and optional ETag combination.\n\n**Code Samples**\n\nRetrieve the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.getSettingWithResponse\\#ConfigurationSetting-OffsetDateTime-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> getSettingWithResponse(ConfigurationSetting setting, OffsetDateTime asOfDateTime, boolean ifChanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to retrieve."
    - id: "asOfDateTime"
      type: "java.time.OffsetDateTime"
      description: "To access a past state of the configuration setting, or optionally, null if a setting with\n <code>asOfDateTime</code> is desired."
    - id: "ifChanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n If-None-Match header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> stored in the service, or <code>null</code> if\n didn't exist. <code>null</code> is also returned if the configuration value does not exist or the key is an invalid\n value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettingRevisions(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisions(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lists chronological/historical representation of <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> resource(s). Revisions are provided in descending order from their <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLastModified()\" data-throw-if-not-resolved=\"false\">lastModified</xref> date. Revisions expire after a period of time. The service maintains change history for up to 7 days. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSettings</xref> are fetched in their current state. Otherwise, the results returned match the parameters given in `options`.\n\n**Code Samples**\n\nRetrieve all revisions of the setting that has the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.listsettingrevisions\\}"
  syntax:
    content: "public PagedFlux<ConfigurationSetting> listSettingRevisions(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Used to filter configuration setting revisions from the service."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "Revisions of the ConfigurationSetting"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listSettingRevisions(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettingRevisions(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisions(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " PagedFlux<ConfigurationSetting> listSettingRevisions(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listSettingRevisionsFirstPage(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettingRevisionsFirstPage(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisionsFirstPage(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<PagedResponse<ConfigurationSetting>> listSettingRevisionsFirstPage(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  id: "listSettingRevisionsNextPage(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettingRevisionsNextPage(String nextPageLink, Context context)"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisionsNextPage(String nextPageLink, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage(String nextPageLink, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<PagedResponse<ConfigurationSetting>> listSettingRevisionsNextPage(String nextPageLink, Context context)"
    parameters:
    - id: "nextPageLink"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  id: "listSettings(com.azure.data.appconfiguration.models.SettingSelector)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettings(SettingSelector selector)"
  nameWithType: "ConfigurationAsyncClient.listSettings(SettingSelector selector)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(SettingSelector selector)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Fetches the configuration settings that match the `options`. If `options` is `null`, then all the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">configuration settings</xref> are fetched with their current values.\n\n**Code Samples**\n\nRetrieve all settings that use the key \"prodDBConnection\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.listsettings\\}"
  syntax:
    content: "public PagedFlux<ConfigurationSetting> listSettings(SettingSelector selector)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
      description: "Optional. Selector to filter configuration setting results from the service."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "A Flux of ConfigurationSettings that matches the <code>options</code>. If no options were provided, the Flux\n contains all of the current settings in the service."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  id: "listSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "listSettings(SettingSelector selector, Context context)"
  nameWithType: "ConfigurationAsyncClient.listSettings(SettingSelector selector, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings(SettingSelector selector, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " PagedFlux<ConfigurationSetting> listSettings(SettingSelector selector, Context context)"
    parameters:
    - id: "selector"
      type: "com.azure.data.appconfiguration.models.SettingSelector"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  id: "setReadOnly(com.azure.data.appconfiguration.models.ConfigurationSetting,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnly(ConfigurationSetting setting, Context context)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(ConfigurationSetting setting, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> setReadOnly(ConfigurationSetting setting, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(java.lang.String,java.lang.String)"
  id: "setReadOnly(java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnly(String key, String label)"
  nameWithType: "ConfigurationAsyncClient.setReadOnly(String key, String label)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly(String key, String label)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching `key`, and optional `label` combination.\n\n**Code Samples**\n\nLock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnly\\#string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> setReadOnly(String key, String label)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of configuration setting to lock."
    - id: "label"
      type: "java.lang.String"
      description: "The label of configuration setting to lock, or optionally, null if a setting with label is desired."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was locked, or an empty Mono if a key collision occurs or the key\n is an invalid value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  id: "setReadOnlyWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setReadOnlyWithResponse(ConfigurationSetting setting)"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse(ConfigurationSetting setting)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Lock the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> with a matching <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref>, and optional <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getLabel()\" data-throw-if-not-resolved=\"false\">label</xref> combination.\n\n**Code Samples**\n\nLock the setting with the key-label \"prodDBConnection\"-\"westUS\".\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setReadOnlyWithResponse\\#ConfigurationSetting\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> setReadOnlyWithResponse(ConfigurationSetting setting)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to lock based on its key and optional label combination."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the locked ConfigurationSetting or <code>null</code> if didn't exist. <code>null</code>\n is also returned if the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getKey()\" data-throw-if-not-resolved=\"false\">key</xref> is an invalid value. (which will also throw\n HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  id: "setSetting(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean,com.azure.core.util.Context)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  nameWithType: "ConfigurationAsyncClient.setSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  syntax:
    content: " Mono<Response<ConfigurationSetting>> setSetting(ConfigurationSetting setting, boolean ifUnchanged, Context context)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    - id: "ifUnchanged"
      type: "boolean"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(java.lang.String,java.lang.String,java.lang.String)"
  id: "setSetting(java.lang.String,java.lang.String,java.lang.String)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setSetting(String key, String label, String value)"
  nameWithType: "ConfigurationAsyncClient.setSetting(String key, String label, String value)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting(String key, String label, String value)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service with the given key. the `label` is optional.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", \"westUS\" and value \"db\\_connection\"\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSetting\\#string-string-string\\}"
  syntax:
    content: "public Mono<ConfigurationSetting> setSetting(String key, String label, String value)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the configuration setting to create or update."
    - id: "label"
      type: "java.lang.String"
      description: "The label of the configuration setting to create or update, or optionally, null if a setting with\n label is desired."
    - id: "value"
      type: "java.lang.String"
      description: "The value of this configuration setting."
    return:
      type: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
      description: "The <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, or an empty Mono if the key is an invalid\n value (which will also throw HttpResponseException described below)."
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  id: "setSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting,boolean)"
  parent: "com.azure.data.appconfiguration.ConfigurationAsyncClient"
  langs:
  - "java"
  name: "setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  nameWithType: "ConfigurationAsyncClient.setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
  overload: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse*"
  type: "Method"
  package: "com.azure.data.appconfiguration"
  summary: "Creates or updates a configuration value in the service. Partial updates are not supported and the entire configuration setting is updated. If <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag()\" data-throw-if-not-resolved=\"false\">etag</xref> is specified, the configuration value is updated if the current setting's etag matches. If the etag's value is equal to the wildcard character (`\"*\"`), the setting will always be updated.\n\n**Code Samples**\n\nAdd a setting with the key \"prodDBConnection\", label \"westUS\", and value \"db\\_connection\".\n\nUpdate setting's value \"db\\_connection\" to \"updated\\_db\\_connection\"\n\n\\{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSettingWithResponse\\#ConfigurationSetting-boolean\\}"
  syntax:
    content: "public Mono<Response<ConfigurationSetting>> setSettingWithResponse(ConfigurationSetting setting, boolean ifUnchanged)"
    parameters:
    - id: "setting"
      type: "com.azure.data.appconfiguration.models.ConfigurationSetting"
      description: "The setting to create or update based on its key, optional label and optional ETag combination."
    - id: "ifUnchanged"
      type: "boolean"
      description: "Flag indicating if the <code>setting</code> <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting.getETag*\" data-throw-if-not-resolved=\"false\">ETag</xref> is used as a\n IF-MATCH header."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
      description: "A REST response containing the <xref uid=\"com.azure.data.appconfiguration.models.ConfigurationSetting\" data-throw-if-not-resolved=\"false\">ConfigurationSetting</xref> that was created or updated, if the key is an\n invalid value, the setting is locked, or an etag was provided but does not match the service's current etag value\n (which will also throw HttpResponseException described below)."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient*"
  name: "ConfigurationAsyncClient"
  nameWithType: "ConfigurationAsyncClient.ConfigurationAsyncClient"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.ConfigurationAsyncClient"
  package: "com.azure.data.appconfiguration"
- uid: "reactor.core.publisher.Mono<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting*"
  name: "addSetting"
  nameWithType: "ConfigurationAsyncClient.addSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  name: "ConfigurationSetting"
  nameWithType: "ConfigurationSetting"
  fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse*"
  name: "addSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.addSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.addSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting*"
  name: "setSetting"
  nameWithType: "ConfigurationAsyncClient.setSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSetting"
  package: "com.azure.data.appconfiguration"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse*"
  name: "setSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.setSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting*"
  name: "getSetting"
  nameWithType: "ConfigurationAsyncClient.getSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSetting"
  package: "com.azure.data.appconfiguration"
- uid: "java.time.OffsetDateTime"
  spec.java:
  - uid: "java.time.OffsetDateTime"
    name: "OffsetDateTime"
    fullName: "java.time.OffsetDateTime"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse*"
  name: "getSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.getSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.getSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting*"
  name: "deleteSetting"
  nameWithType: "ConfigurationAsyncClient.deleteSetting"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSetting"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse*"
  name: "deleteSettingWithResponse"
  nameWithType: "ConfigurationAsyncClient.deleteSettingWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.deleteSettingWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly*"
  name: "setReadOnly"
  nameWithType: "ConfigurationAsyncClient.setReadOnly"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnly"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse*"
  name: "setReadOnlyWithResponse"
  nameWithType: "ConfigurationAsyncClient.setReadOnlyWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.setReadOnlyWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly*"
  name: "clearReadOnly"
  nameWithType: "ConfigurationAsyncClient.clearReadOnly"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnly"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse*"
  name: "clearReadOnlyWithResponse"
  nameWithType: "ConfigurationAsyncClient.clearReadOnlyWithResponse"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.clearReadOnlyWithResponse"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.models.SettingSelector"
  name: "SettingSelector"
  nameWithType: "SettingSelector"
  fullName: "com.azure.data.appconfiguration.models.SettingSelector"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.data.appconfiguration.models.ConfigurationSetting>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings*"
  name: "listSettings"
  nameWithType: "ConfigurationAsyncClient.listSettings"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettings"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions*"
  name: "listSettingRevisions"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisions"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisions"
  package: "com.azure.data.appconfiguration"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.PagedResponse<com.azure.data.appconfiguration.models.ConfigurationSetting>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.PagedResponse"
    name: "PagedResponse"
    fullName: "com.azure.core.http.rest.PagedResponse"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.data.appconfiguration.models.ConfigurationSetting"
    name: "ConfigurationSetting"
    fullName: "com.azure.data.appconfiguration.models.ConfigurationSetting"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage*"
  name: "listSettingRevisionsFirstPage"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisionsFirstPage"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsFirstPage"
  package: "com.azure.data.appconfiguration"
- uid: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage*"
  name: "listSettingRevisionsNextPage"
  nameWithType: "ConfigurationAsyncClient.listSettingRevisionsNextPage"
  fullName: "com.azure.data.appconfiguration.ConfigurationAsyncClient.listSettingRevisionsNextPage"
  package: "com.azure.data.appconfiguration"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
- uid: "com.azure.core.http.rest.PagedResponse"
  name: "PagedResponse"
  nameWithType: "PagedResponse"
  fullName: "com.azure.core.http.rest.PagedResponse"

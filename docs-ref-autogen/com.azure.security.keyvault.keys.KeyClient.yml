### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.KeyClient"
  id: "KeyClient"
  parent: "com.azure.security.keyvault.keys"
  children:
  - "com.azure.security.keyvault.keys.KeyClient.KeyClient(com.azure.security.keyvault.keys.KeyAsyncClient)"
  - "com.azure.security.keyvault.keys.KeyClient.backupKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.createEcKey(com.azure.security.keyvault.keys.models.EcKeyCreateOptions)"
  - "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.EcKeyCreateOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.createKey(com.azure.security.keyvault.keys.models.KeyCreateOptions)"
  - "com.azure.security.keyvault.keys.KeyClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.KeyType)"
  - "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.KeyCreateOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.createRsaKey(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions)"
  - "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.deleteKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.getDeletedKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.getKey(com.azure.security.keyvault.keys.models.KeyProperties)"
  - "com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.importKey(com.azure.security.keyvault.keys.models.KeyImportOptions)"
  - "com.azure.security.keyvault.keys.KeyClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.JsonWebKey)"
  - "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.KeyImportOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()"
  - "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.listKeys()"
  - "com.azure.security.keyvault.keys.KeyClient.listKeys(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(java.lang.String)"
  - "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.restoreKey(byte[])"
  - "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse(byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  - "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  langs:
  - "java"
  name: "KeyClient"
  nameWithType: "KeyClient"
  fullName: "com.azure.security.keyvault.keys.KeyClient"
  type: "Class"
  package: "com.azure.security.keyvault.keys"
  summary: "The KeyClient provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted keys</xref> for a soft-delete enabled Azure Key Vault.\n\n**Samples to construct the sync client**\n\n\\{@codesnippet com.azure.security.keyvault.keys.keyclient.instantiation\\}"
  syntax:
    content: "public final class KeyClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.KeyClient.KeyClient(com.azure.security.keyvault.keys.KeyAsyncClient)"
  id: "KeyClient(com.azure.security.keyvault.keys.KeyAsyncClient)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "KeyClient(KeyAsyncClient client)"
  nameWithType: "KeyClient.KeyClient(KeyAsyncClient client)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.KeyClient(KeyAsyncClient client)"
  overload: "com.azure.security.keyvault.keys.KeyClient.KeyClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a KeyClient that uses `pipeline` to service requests"
  syntax:
    content: " KeyClient(KeyAsyncClient client)"
    parameters:
    - id: "client"
      type: "com.azure.security.keyvault.keys.KeyAsyncClient"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient\" data-throw-if-not-resolved=\"false\">KeyAsyncClient</xref> that the client routes its request through."
- uid: "com.azure.security.keyvault.keys.KeyClient.backupKey(java.lang.String)"
  id: "backupKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "backupKey(String name)"
  nameWithType: "KeyClient.backupKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.backupKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.backupKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.\n\n**Code Samples**\n\nBacks up the key from the key vault and prints out the length of the key's backup byte array returned in the response\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.backupKey\\#string\\}"
  syntax:
    content: "public byte[] backupKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key."
    return:
      type: "byte[]"
      description: "The backed up key blob."
- uid: "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "backupKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "backupKeyWithResponse(String name, Context context)"
  nameWithType: "KeyClient.backupKeyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Requests a backup of the specified key be downloaded to the client. The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does not return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to generate a key in one Azure Key Vault instance, backup the key, and then restore it into another Azure Key Vault instance. The backup operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. Backup / Restore can be performed within geographical boundaries only; meaning that a backup from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the `key/backup` permission.\n\n**Code Samples**\n\nBacks up the key from the key vault and prints out the length of the key's backup byte array returned in the response\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.backupKeyWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<byte[]> backupKeyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<byte[]>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the backed up key blob."
- uid: "com.azure.security.keyvault.keys.KeyClient.createEcKey(com.azure.security.keyvault.keys.models.EcKeyCreateOptions)"
  id: "createEcKey(com.azure.security.keyvault.keys.models.EcKeyCreateOptions)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createEcKey(EcKeyCreateOptions ecKeyCreateOptions)"
  nameWithType: "KeyClient.createEcKey(EcKeyCreateOptions ecKeyCreateOptions)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createEcKey(EcKeyCreateOptions ecKeyCreateOptions)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createEcKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.EcKeyCreateOptions\" data-throw-if-not-resolved=\"false\">EcKeyCreateOptions</xref> parameter is required. The <xref uid=\"com.azure.security.keyvault.keys.models.EcKeyCreateOptions.getCurve()\" data-throw-if-not-resolved=\"false\">key curve</xref> can be optionally specified. If not specified, default value of <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyCurveName.P_256\" data-throw-if-not-resolved=\"false\">P-256</xref> is used by Azure Key Vault. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC\" data-throw-if-not-resolved=\"false\">EC</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC_HSM\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>.\n\n**Code Samples**\n\nCreates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createEcKey\\#keyOptions\\}"
  syntax:
    content: "public Key createEcKey(EcKeyCreateOptions ecKeyCreateOptions)"
    parameters:
    - id: "ecKeyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.EcKeyCreateOptions"
      description: "The key options object containing information about the ec key being created."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.EcKeyCreateOptions,com.azure.core.util.Context)"
  id: "createEcKeyWithResponse(com.azure.security.keyvault.keys.models.EcKeyCreateOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createEcKeyWithResponse(EcKeyCreateOptions ecKeyCreateOptions, Context context)"
  nameWithType: "KeyClient.createEcKeyWithResponse(EcKeyCreateOptions ecKeyCreateOptions, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(EcKeyCreateOptions ecKeyCreateOptions, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.EcKeyCreateOptions\" data-throw-if-not-resolved=\"false\">EcKeyCreateOptions</xref> parameter is required. The <xref uid=\"com.azure.security.keyvault.keys.models.EcKeyCreateOptions.getCurve()\" data-throw-if-not-resolved=\"false\">key curve</xref> can be optionally specified. If not specified, default value of <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyCurveName.P_256\" data-throw-if-not-resolved=\"false\">P-256</xref> is used by Azure Key Vault. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">EcKeyCreateOptions#isEnabled()</xref> enabled\\} field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC\" data-throw-if-not-resolved=\"false\">EC</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC_HSM\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>.\n\n**Code Samples**\n\nCreates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createEcKeyWithResponse\\#keyOptions-Context\\}"
  syntax:
    content: "public Response<Key> createEcKeyWithResponse(EcKeyCreateOptions ecKeyCreateOptions, Context context)"
    parameters:
    - id: "ecKeyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.EcKeyCreateOptions"
      description: "The key options object containing information about the ec key being created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createKey(com.azure.security.keyvault.keys.models.KeyCreateOptions)"
  id: "createKey(com.azure.security.keyvault.keys.models.KeyCreateOptions)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createKey(KeyCreateOptions keyCreateOptions)"
  nameWithType: "KeyClient.createKey(KeyCreateOptions keyCreateOptions)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createKey(KeyCreateOptions keyCreateOptions)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions\" data-throw-if-not-resolved=\"false\">KeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getExpires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.isEnabled()\" data-throw-if-not-resolved=\"false\">KeyCreateOptions#isEnabled()</xref> enabled\\} field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getKeyType()\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC\" data-throw-if-not-resolved=\"false\">EC</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC_HSM\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA\" data-throw-if-not-resolved=\"false\">RSA</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA_HSM\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.OCT\" data-throw-if-not-resolved=\"false\">OCT</xref>.\n\n**Code Samples**\n\nCreates a new RSA key which activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createKey\\#keyOptions\\}"
  syntax:
    content: "public Key createKey(KeyCreateOptions keyCreateOptions)"
    parameters:
    - id: "keyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.KeyCreateOptions"
      description: "The key options object containing information about the key being created."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.KeyType)"
  id: "createKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.KeyType)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createKey(String name, KeyType keyType)"
  nameWithType: "KeyClient.createKey(String name, KeyType keyType)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createKey(String name, KeyType keyType)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC\" data-throw-if-not-resolved=\"false\">EC</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC_HSM\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA\" data-throw-if-not-resolved=\"false\">RSA</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA_HSM\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.OCT\" data-throw-if-not-resolved=\"false\">OCT</xref>.\n\n**Code Samples**\n\nCreates a new EC key. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createKey\\#string-keyType\\}"
  syntax:
    content: "public Key createKey(String name, KeyType keyType)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key being created."
    - id: "keyType"
      type: "com.azure.security.keyvault.keys.models.webkey.KeyType"
      description: "The type of key to create. For valid values, see <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType\" data-throw-if-not-resolved=\"false\">KeyType</xref>."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(com.azure.security.keyvault.keys.models.KeyCreateOptions,com.azure.core.util.Context)"
  id: "createKeyWithResponse(com.azure.security.keyvault.keys.models.KeyCreateOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createKeyWithResponse(KeyCreateOptions keyCreateOptions, Context context)"
  nameWithType: "KeyClient.createKeyWithResponse(KeyCreateOptions keyCreateOptions, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse(KeyCreateOptions keyCreateOptions, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new key and stores it in the key vault. The create key operation can be used to create any key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions\" data-throw-if-not-resolved=\"false\">KeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getExpires()\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.KeyCreateOptions.getKeyType()\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC\" data-throw-if-not-resolved=\"false\">EC</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.EC_HSM\" data-throw-if-not-resolved=\"false\">EC-HSM</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA\" data-throw-if-not-resolved=\"false\">RSA</xref>, <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA_HSM\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.OCT\" data-throw-if-not-resolved=\"false\">OCT</xref>.\n\n**Code Samples**\n\nCreates a new RSA key which activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createKeyWithResponse\\#keyCreateOptions-Context\\}"
  syntax:
    content: "public Response<Key> createKeyWithResponse(KeyCreateOptions keyCreateOptions, Context context)"
    parameters:
    - id: "keyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.KeyCreateOptions"
      description: "The key options object containing information about the key being created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createRsaKey(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions)"
  id: "createRsaKey(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)"
  nameWithType: "KeyClient.createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createRsaKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.RsaKeyCreateOptions\" data-throw-if-not-resolved=\"false\">RsaKeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.getKeySize()\" data-throw-if-not-resolved=\"false\">keySize</xref> can be optionally specified. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA\" data-throw-if-not-resolved=\"false\">RSA</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA_HSM\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref>.\n\n**Code Samples**\n\nCreates a new RSA key with size 2048 which activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createRsaKey\\#keyOptions\\}"
  syntax:
    content: "public Key createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions)"
    parameters:
    - id: "rsaKeyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.RsaKeyCreateOptions"
      description: "The key options object containing information about the rsa key being created."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions,com.azure.core.util.Context)"
  id: "createRsaKeyWithResponse(com.azure.security.keyvault.keys.models.RsaKeyCreateOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "createRsaKeyWithResponse(RsaKeyCreateOptions rsaKeyCreateOptions, Context context)"
  nameWithType: "KeyClient.createRsaKeyWithResponse(RsaKeyCreateOptions rsaKeyCreateOptions, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse(RsaKeyCreateOptions rsaKeyCreateOptions, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Creates a new Rsa key and stores it in the key vault. The create Rsa key operation can be used to create any Rsa key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the `keys/create` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.keys.models.RsaKeyCreateOptions\" data-throw-if-not-resolved=\"false\">RsaKeyCreateOptions</xref> is required. The <xref uid=\"com.azure.security.keyvault.keys.models.RsaKeyCreateOptions.getKeySize()\" data-throw-if-not-resolved=\"false\">keySize</xref> can be optionally specified. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values are optional. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by Azure Key Vault, if not specified.\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">keyType</xref> indicates the type of key to create. Possible values include: <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA\" data-throw-if-not-resolved=\"false\">RSA</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.webkey.KeyType.RSA_HSM\" data-throw-if-not-resolved=\"false\">RSA-HSM</xref>.\n\n**Code Samples**\n\nCreates a new RSA key with size 2048 which activates in one day and expires in one year. Prints out the details of the created key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.createRsaKeyWithResponse\\#keyOptions-Context\\}"
  syntax:
    content: "public Response<Key> createRsaKeyWithResponse(RsaKeyCreateOptions rsaKeyCreateOptions, Context context)"
    parameters:
    - id: "rsaKeyCreateOptions"
      type: "com.azure.security.keyvault.keys.models.RsaKeyCreateOptions"
      description: "The key options object containing information about the rsa key being created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">created key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.deleteKey(java.lang.String)"
  id: "deleteKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "deleteKey(String name)"
  nameWithType: "KeyClient.deleteKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.deleteKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.deleteKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Deletes a key of any type from the key vault. If soft-delete is enabled on the key vault then the key is placed in the deleted state and requires to be purged for permanent deletion else the key is permanently deleted. The delete operation applies to any key stored in Azure Key Vault but it cannot be applied to an individual version of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the `keys/delete` permission.\n\n**Code Samples**\n\nDeletes the key from the keyvault. Prints out the recovery id of the deleted key returned in the response.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.deleteKey\\#string\\}"
  syntax:
    content: "public DeletedKey deleteKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key to be deleted."
    return:
      type: "com.azure.security.keyvault.keys.models.DeletedKey"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "deleteKeyWithResponse(String name, Context context)"
  nameWithType: "KeyClient.deleteKeyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Deletes a key of any type from the key vault. If soft-delete is enabled on the key vault then the key is placed in the deleted state and requires to be purged for permanent deletion else the key is permanently deleted. The delete operation applies to any key stored in Azure Key Vault but it cannot be applied to an individual version of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the `keys/delete` permission.\n\n**Code Samples**\n\nDeletes the key from the keyvault. Prints out the recovery id of the deleted key returned in the response.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.deleteKeyWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<DeletedKey> deleteKeyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key to be deleted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getDeletedKey(java.lang.String)"
  id: "getDeletedKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getDeletedKey(String name)"
  nameWithType: "KeyClient.getDeletedKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getDeletedKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getDeletedKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the deleted key from the key vault enabled for soft-delete. Prints out the details of the deleted key returned in the response.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.getDeletedKey\\#string\\}"
  syntax:
    content: "public DeletedKey getDeletedKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key."
    return:
      type: "com.azure.security.keyvault.keys.models.DeletedKey"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getDeletedKeyWithResponse(String name, Context context)"
  nameWithType: "KeyClient.getDeletedKeyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Gets the public part of a deleted key. The Get Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the deleted key from the key vault enabled for soft-delete. Prints out the details of the deleted key returned in the response.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.getDeletedKeyWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<DeletedKey> getDeletedKeyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getKey(com.azure.security.keyvault.keys.models.KeyProperties)"
  id: "getKey(com.azure.security.keyvault.keys.models.KeyProperties)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getKey(KeyProperties keyProperties)"
  nameWithType: "KeyClient.getKey(KeyProperties keyProperties)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKey(KeyProperties keyProperties)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Get public part of the key which represents <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">keyProperties</xref> from the key vault. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeys()\" data-throw-if-not-resolved=\"false\">KeyClient#listKeys()</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">KeyClient#listKeyVersions(String)</xref> return the <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> as output excluding the key material of the key. This operation can then be used to get the full key with its key material from `keyProperties`.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.getKey\\#KeyProperties\\}"
  syntax:
    content: "public Key getKey(KeyProperties keyProperties)"
    parameters:
    - id: "keyProperties"
      type: "com.azure.security.keyvault.keys.models.KeyProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> holding attributes of the key being requested."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The requested <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)"
  id: "getKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getKey(String name)"
  nameWithType: "KeyClient.getKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Get the public part of the latest version of the specified key from the key vault. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets the latest version of the key in the key vault. Prints out the details of the returned key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.getKey\\#string\\}"
  syntax:
    content: "public Key getKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The requested <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)"
  id: "getKey(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getKey(String name, String version)"
  nameWithType: "KeyClient.getKey(String name, String version)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKey(String name, String version)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets a specific version of the key in the key vault. Prints out the details of the returned key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.getKey\\#string-string\\}"
  syntax:
    content: "public Key getKey(String name, String version)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the key to retrieve. If this is an empty String or null, this call is\n     equivalent to calling <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String)</xref>, with the latest version being retrieved."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The requested <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context)"
  id: "getKeyWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getKeyWithResponse(KeyProperties keyProperties, Context context)"
  nameWithType: "KeyClient.getKeyWithResponse(KeyProperties keyProperties, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(KeyProperties keyProperties, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Get public part of the key which represents <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">keyProperties</xref> from the key vault. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeys()\" data-throw-if-not-resolved=\"false\">KeyClient#listKeys()</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">KeyClient#listKeyVersions(String)</xref> return the <xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> as output excluding the key material of the key. This operation can then be used to get the full key with its key material from `keyProperties`.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.getKeyWithResponse\\#KeyProperties-Context\\}"
  syntax:
    content: "public Response<Key> getKeyWithResponse(KeyProperties keyProperties, Context context)"
    parameters:
    - id: "keyProperties"
      type: "com.azure.security.keyvault.keys.models.KeyProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> holding attributes of the key being requested."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getKeyWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "getKeyWithResponse(String name, String version, Context context)"
  nameWithType: "KeyClient.getKeyWithResponse(String name, String version, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse(String name, String version, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Gets the public part of the specified key and key version. The get key operation is applicable to all key types and it requires the `keys/get` permission.\n\n**Code Samples**\n\nGets a specific version of the key in the key vault. Prints out the details of the returned key.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.getKeyWithResponse\\#string-string-Context\\}"
  syntax:
    content: "public Response<Key> getKeyWithResponse(String name, String version, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the key to retrieve. If this is an empty String or null, this call is\n     equivalent to calling <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String)</xref>, with the latest version being retrieved."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.importKey(com.azure.security.keyvault.keys.models.KeyImportOptions)"
  id: "importKey(com.azure.security.keyvault.keys.models.KeyImportOptions)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "importKey(KeyImportOptions keyImportOptions)"
  nameWithType: "KeyClient.importKey(KeyImportOptions keyImportOptions)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.importKey(KeyImportOptions keyImportOptions)"
  overload: "com.azure.security.keyvault.keys.KeyClient.importKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\nThe `keyImportOptions` is required and its fields <xref uid=\"\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.getKeyMaterial()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.isHsm()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.\n\n**Code Samples**\n\nImports a new key into key vault. Prints out the details of the imported key.\n\n```java\nKeyImportOptions keyImportOptions = new KeyImportOptions(\"keyName\", jsonWebKeyToImport)\n   .hsm(true)\n   .setExpires(OffsetDateTime.now().plusDays(60));\n\n Key importedKey = keyClient.importKey(keyImportOptions);\n System.out.printf(\"Key is imported with name %s and id %s \\n\", importedKey.getName(), importedKey.getId());\n```"
  syntax:
    content: "public Key importKey(KeyImportOptions keyImportOptions)"
    parameters:
    - id: "keyImportOptions"
      type: "com.azure.security.keyvault.keys.models.KeyImportOptions"
      description: "The key import configuration object containing information about the json web key\n     being imported."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">imported key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.importKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.JsonWebKey)"
  id: "importKey(java.lang.String,com.azure.security.keyvault.keys.models.webkey.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "importKey(String name, JsonWebKey keyMaterial)"
  nameWithType: "KeyClient.importKey(String name, JsonWebKey keyMaterial)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.importKey(String name, JsonWebKey keyMaterial)"
  overload: "com.azure.security.keyvault.keys.KeyClient.importKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\n**Code Samples**\n\nImports a new key into key vault. Prints out the details of the imported key.\n\n```java\nKey importedKey = keyClient.importKey(\"keyName\", jsonWebKeyToImport);\n System.out.printf(\"Key is imported with name %s and id %s \\n\", importedKey.getName(), importedKey.getId());\n```"
  syntax:
    content: "public Key importKey(String name, JsonWebKey keyMaterial)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name for the imported key."
    - id: "keyMaterial"
      type: "com.azure.security.keyvault.keys.models.webkey.JsonWebKey"
      description: "The Json web key being imported."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">imported key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.KeyImportOptions,com.azure.core.util.Context)"
  id: "importKeyWithResponse(com.azure.security.keyvault.keys.models.KeyImportOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "importKeyWithResponse(KeyImportOptions keyImportOptions, Context context)"
  nameWithType: "KeyClient.importKeyWithResponse(KeyImportOptions keyImportOptions, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(KeyImportOptions keyImportOptions, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the `keys/import` permission.\n\nThe `keyImportOptions` is required and its fields <xref uid=\"\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.getKeyMaterial()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">expires</xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `keyImportOptions` are optional. If not specified, no values are set for the fields. The <xref uid=\"\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the <xref uid=\"com.azure.security.keyvault.keys.models.KeyImportOptions.isHsm()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.\n\n**Code Samples**\n\nImports a new key into key vault. Prints out the details of the imported key.\n\n```java\nKeyImportOptions keyImportOptions = new KeyImportOptions(\"keyName\", jsonWebKeyToImport)\n   .hsm(true)\n   .setExpires(OffsetDateTime.now().plusDays(60));\n\n Key importedKey = keyClient.importKey(keyImportOptions, new Context(key1, value1)).value();\n System.out.printf(\"Key is imported with name %s and id %s \\n\", importedKey.getName(), importedKey.getId());\n```"
  syntax:
    content: "public Response<Key> importKeyWithResponse(KeyImportOptions keyImportOptions, Context context)"
    parameters:
    - id: "keyImportOptions"
      type: "com.azure.security.keyvault.keys.models.KeyImportOptions"
      description: "The key import configuration object containing information about the json web key\n     being imported."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">imported key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()"
  id: "listDeletedKeys()"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listDeletedKeys()"
  nameWithType: "KeyClient.listDeletedKeys()"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys()"
  overload: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the `keys/list` permission.\n\n**Code Samples**\n\nLists the deleted keys in the key vault and for each deleted key prints out its recovery id.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listDeletedKeys\\}\n\n**Code Samples to iterate over deleted keys by page**\n\nIterate over the lists the deleted keys by each page in the key vault and for each deleted key prints out its recovery id.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listDeletedKeys.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<DeletedKey> listDeletedKeys()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of all of the <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted keys</xref> in the vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(com.azure.core.util.Context)"
  id: "listDeletedKeys(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listDeletedKeys(Context context)"
  nameWithType: "KeyClient.listDeletedKeys(Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys(Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted keys</xref> of the key vault. The deleted keys are retrieved as JSON Web Key structures that contain the public part of a deleted key. The Get Deleted Keys operation is applicable for vaults enabled for soft-delete. This operation requires the `keys/list` permission.\n\n**Code Samples**\n\nLists the deleted keys in the key vault and for each deleted key prints out its recovery id.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listDeletedKeys\\#Context\\}\n\n**Code Samples to iterate over deleted keys by page**\n\nIterate over the lists the deleted keys by each page in the key vault and for each deleted key prints out its recovery id.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listDeletedKeys.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<DeletedKey> listDeletedKeys(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of all of the <xref uid=\"com.azure.security.keyvault.keys.models.DeletedKey\" data-throw-if-not-resolved=\"false\">deleted keys</xref> in the vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String)"
  id: "listKeyVersions(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listKeyVersions(String name)"
  nameWithType: "KeyClient.listKeyVersions(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "List all versions of the specified key. The individual key response in the flux is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get full keys with key material for each version from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeyVersions\\}\n\n**Code Samples to iterate over key versions by page**\n\nIt is possible to get full keys with key material for each version from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeyVersions.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<KeyProperties> listKeyVersions(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the versions of the specified key in the vault. List\n     is empty if key with <code>name</code> does not exist in key vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(java.lang.String,com.azure.core.util.Context)"
  id: "listKeyVersions(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listKeyVersions(String name, Context context)"
  nameWithType: "KeyClient.listKeyVersions(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "List all versions of the specified key. The individual key response in the flux is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material values are not provided in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get full keys with key material for each version from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeyVersions\\}\n\n**Code Samples to iterate over key versions by page**\n\nIt is possible to get full keys with key material for each version from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">keys</xref> with key material included of the specified versions.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeyVersions.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<KeyProperties> listKeyVersions(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the key."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the versions of the specified key in the vault. List\n     is empty if key with <code>name</code> does not exist in key vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeys()"
  id: "listKeys()"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listKeys()"
  nameWithType: "KeyClient.listKeys()"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeys()"
  overload: "com.azure.security.keyvault.keys.KeyClient.listKeys*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get full keys with key material from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeys\\}\n\n**Code Samples to iterate keys by page**\n\nIt is possible to get full keys with key material from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeys.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<KeyProperties> listKeys()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the keys in the vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeys(com.azure.core.util.Context)"
  id: "listKeys(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "listKeys(Context context)"
  nameWithType: "KeyClient.listKeys(Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeys(Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.listKeys*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The List operation is applicable to all key types and the individual key response in the list is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get full keys with key material from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeys\\#Context\\}\n\n**Code Samples to iterate keys by page**\n\nIt is possible to get full keys with key material from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call \\{@link KeyClient\\#getKey(KeyProperties key properties)\\}. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">key</xref> with key material included of its latest version.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.listKeys.iterableByPage\\}"
  syntax:
    content: "public PagedIterable<KeyProperties> listKeys(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>"
      description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the keys in the vault."
- uid: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(java.lang.String)"
  id: "purgeDeletedKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "purgeDeletedKey(String name)"
  nameWithType: "KeyClient.purgeDeletedKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.\n\n**Code Samples**\n\nPurges the deleted key from the key vault enabled for soft-delete. Prints out the status code from the server response.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.purgeDeletedKey\\#string\\}"
  syntax:
    content: "public void purgeDeletedKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key."
- uid: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "purgeDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "purgeDeletedKeyWithResponse(String name, Context context)"
  nameWithType: "KeyClient.purgeDeletedKeyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Permanently deletes the specified key without the possibility of recovery. The Purge Deleted Key operation is applicable for soft-delete enabled vaults. This operation requires the `keys/purge` permission.\n\n**Code Samples**\n\nPurges the deleted key from the key vault enabled for soft-delete. Prints out the status code from the server response.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.purgeDeletedKeyWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<Void> purgeDeletedKeyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response containing status code and HTTP headers."
- uid: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(java.lang.String)"
  id: "recoverDeletedKey(java.lang.String)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "recoverDeletedKey(String name)"
  nameWithType: "KeyClient.recoverDeletedKey(String name)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey(String name)"
  overload: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Recovers the deleted key in the key vault to its latest version and can only be performed on a soft-delete enabled vault. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the `keys/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted key from the key vault enabled for soft-delete.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.recoverDeletedKey\\#string\\}"
  syntax:
    content: "public Key recoverDeletedKey(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key to be recovered."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">recovered key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "recoverDeletedKeyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "recoverDeletedKeyWithResponse(String name, Context context)"
  nameWithType: "KeyClient.recoverDeletedKeyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Recovers the deleted key in the key vault to its latest version and can only be performed on a soft-delete enabled vault. An attempt to recover an non-deleted key will return an error. Consider this the inverse of the delete operation on soft-delete enabled vaults. This operation requires the `keys/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted key from the key vault enabled for soft-delete.\n\n//Assuming key is deleted on a soft-delete enabled key vault. \\{@codesnippet com.azure.keyvault.keys.keyclient.recoverDeletedKeyWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<Key> recoverDeletedKeyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted key to be recovered."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">recovered key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.restoreKey(byte[])"
  id: "restoreKey(byte[])"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "restoreKey(byte[] backup)"
  nameWithType: "KeyClient.restoreKey(byte[] backup)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.restoreKey(byte[] backup)"
  overload: "com.azure.security.keyvault.keys.KeyClient.restoreKey*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.\n\n**Code Samples**\n\nRestores the key in the key vault from its backup. Prints out the details of the restored key returned in the response.\n\n//Pass the Key Backup Byte array to the restore operation. \\{@codesnippet com.azure.keyvault.keys.keyclient.restoreKey\\#byte\\}"
  syntax:
    content: "public Key restoreKey(byte[] backup)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the key."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">restored key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse(byte[],com.azure.core.util.Context)"
  id: "restoreKeyWithResponse(byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "restoreKeyWithResponse(byte[] backup, Context context)"
  nameWithType: "KeyClient.restoreKeyWithResponse(byte[] backup, Context context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse(byte[] backup, Context context)"
  overload: "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Restores a backed up key to a vault. Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The restore operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the restore operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The restore operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have restore permission in the target Key Vault. This operation requires the `keys/restore` permission.\n\n**Code Samples**\n\nRestores the key in the key vault from its backup. Prints out the details of the restored key returned in the response.\n\n//Pass the Key Backup Byte array to the restore operation. \\{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyWithResponse\\#byte-Context\\}"
  syntax:
    content: "public Response<Key> restoreKeyWithResponse(byte[] backup, Context context)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the key."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">restored key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  id: "updateKeyProperties(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)"
  nameWithType: "KeyClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)"
  overload: "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.\n\n**Code Samples**\n\nGets the latest version of the key, changes its expiry time and key operations and the updates the key in the key vault.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.updateKeyProperties\\#KeyProperties-keyOperations\\}"
  syntax:
    content: "public Key updateKeyProperties(KeyProperties keyProperties, KeyOperation[] keyOperations)"
    parameters:
    - id: "keyProperties"
      type: "com.azure.security.keyvault.keys.models.KeyProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> object with updated properties."
    - id: "keyOperations"
      type: "com.azure.security.keyvault.keys.models.webkey.KeyOperation[]"
      description: "The updated key operations to associate with the key."
    return:
      type: "com.azure.security.keyvault.keys.models.Key"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">updated key</xref>."
- uid: "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  id: "updateKeyPropertiesWithResponse(com.azure.security.keyvault.keys.models.KeyProperties,com.azure.core.util.Context,com.azure.security.keyvault.keys.models.webkey.KeyOperation...)"
  parent: "com.azure.security.keyvault.keys.KeyClient"
  langs:
  - "java"
  name: "updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)"
  nameWithType: "KeyClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)"
  overload: "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.keys"
  summary: "Updates the attributes and key operations associated with the specified key, but not the cryptographic key material of the specified key in the key vault. The update operation changes specified attributes of an existing stored key and attributes that are not specified in the request are left unchanged. The cryptographic key material of a key itself cannot be changed. This operation requires the `keys/set` permission.\n\n**Code Samples**\n\nGets the latest version of the key, changes its expiry time and key operations and the updates the key in the key vault.\n\n\\{@codesnippet com.azure.keyvault.keys.keyclient.updateKeyPropertiesWithResponse\\#KeyProperties-keyOperations-Context\\}"
  syntax:
    content: "public Response<Key> updateKeyPropertiesWithResponse(KeyProperties keyProperties, Context context, KeyOperation[] keyOperations)"
    parameters:
    - id: "keyProperties"
      type: "com.azure.security.keyvault.keys.models.KeyProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key properties</xref> object with updated properties."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    - id: "keyOperations"
      type: "com.azure.security.keyvault.keys.models.webkey.KeyOperation[]"
      description: "The updated key operations to associate with the key."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.keys.models.Key\" data-throw-if-not-resolved=\"false\">updated key</xref>."
references:
- uid: "com.azure.security.keyvault.keys.KeyAsyncClient"
  name: "KeyAsyncClient"
  nameWithType: "KeyAsyncClient"
  fullName: "com.azure.security.keyvault.keys.KeyAsyncClient"
- uid: "com.azure.security.keyvault.keys.KeyClient.KeyClient*"
  name: "KeyClient"
  nameWithType: "KeyClient.KeyClient"
  fullName: "com.azure.security.keyvault.keys.KeyClient.KeyClient"
  package: "com.azure.security.keyvault.keys"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.security.keyvault.keys.models.webkey.KeyType"
  name: "KeyType"
  nameWithType: "KeyType"
  fullName: "com.azure.security.keyvault.keys.models.webkey.KeyType"
- uid: "com.azure.security.keyvault.keys.models.Key"
  name: "Key"
  nameWithType: "Key"
  fullName: "com.azure.security.keyvault.keys.models.Key"
- uid: "com.azure.security.keyvault.keys.KeyClient.createKey*"
  name: "createKey"
  nameWithType: "KeyClient.createKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.KeyCreateOptions"
  name: "KeyCreateOptions"
  nameWithType: "KeyCreateOptions"
  fullName: "com.azure.security.keyvault.keys.models.KeyCreateOptions"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.Key>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.Key"
    name: "Key"
    fullName: "com.azure.security.keyvault.keys.models.Key"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse*"
  name: "createKeyWithResponse"
  nameWithType: "KeyClient.createKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.RsaKeyCreateOptions"
  name: "RsaKeyCreateOptions"
  nameWithType: "RsaKeyCreateOptions"
  fullName: "com.azure.security.keyvault.keys.models.RsaKeyCreateOptions"
- uid: "com.azure.security.keyvault.keys.KeyClient.createRsaKey*"
  name: "createRsaKey"
  nameWithType: "KeyClient.createRsaKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createRsaKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse*"
  name: "createRsaKeyWithResponse"
  nameWithType: "KeyClient.createRsaKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createRsaKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.EcKeyCreateOptions"
  name: "EcKeyCreateOptions"
  nameWithType: "EcKeyCreateOptions"
  fullName: "com.azure.security.keyvault.keys.models.EcKeyCreateOptions"
- uid: "com.azure.security.keyvault.keys.KeyClient.createEcKey*"
  name: "createEcKey"
  nameWithType: "KeyClient.createEcKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createEcKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse*"
  name: "createEcKeyWithResponse"
  nameWithType: "KeyClient.createEcKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.webkey.JsonWebKey"
  name: "JsonWebKey"
  nameWithType: "JsonWebKey"
  fullName: "com.azure.security.keyvault.keys.models.webkey.JsonWebKey"
- uid: "com.azure.security.keyvault.keys.KeyClient.importKey*"
  name: "importKey"
  nameWithType: "KeyClient.importKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.importKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.KeyImportOptions"
  name: "KeyImportOptions"
  nameWithType: "KeyImportOptions"
  fullName: "com.azure.security.keyvault.keys.models.KeyImportOptions"
- uid: "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse*"
  name: "importKeyWithResponse"
  nameWithType: "KeyClient.importKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.getKey*"
  name: "getKey"
  nameWithType: "KeyClient.getKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse*"
  name: "getKeyWithResponse"
  nameWithType: "KeyClient.getKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.KeyProperties"
  name: "KeyProperties"
  nameWithType: "KeyProperties"
  fullName: "com.azure.security.keyvault.keys.models.KeyProperties"
- uid: "com.azure.security.keyvault.keys.models.webkey.KeyOperation[]"
  spec.java:
  - uid: "com.azure.security.keyvault.keys.models.webkey.KeyOperation"
    name: "KeyOperation"
    fullName: "com.azure.security.keyvault.keys.models.webkey.KeyOperation"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties*"
  name: "updateKeyProperties"
  nameWithType: "KeyClient.updateKeyProperties"
  fullName: "com.azure.security.keyvault.keys.KeyClient.updateKeyProperties"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse*"
  name: "updateKeyPropertiesWithResponse"
  nameWithType: "KeyClient.updateKeyPropertiesWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.updateKeyPropertiesWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.models.DeletedKey"
  name: "DeletedKey"
  nameWithType: "DeletedKey"
  fullName: "com.azure.security.keyvault.keys.models.DeletedKey"
- uid: "com.azure.security.keyvault.keys.KeyClient.deleteKey*"
  name: "deleteKey"
  nameWithType: "KeyClient.deleteKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.deleteKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.keys.models.DeletedKey>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.DeletedKey"
    name: "DeletedKey"
    fullName: "com.azure.security.keyvault.keys.models.DeletedKey"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse*"
  name: "deleteKeyWithResponse"
  nameWithType: "KeyClient.deleteKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.deleteKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.getDeletedKey*"
  name: "getDeletedKey"
  nameWithType: "KeyClient.getDeletedKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getDeletedKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse*"
  name: "getDeletedKeyWithResponse"
  nameWithType: "KeyClient.getDeletedKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.getDeletedKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey*"
  name: "purgeDeletedKey"
  nameWithType: "KeyClient.purgeDeletedKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.core.http.rest.Response<java.lang.Void>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse*"
  name: "purgeDeletedKeyWithResponse"
  nameWithType: "KeyClient.purgeDeletedKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.purgeDeletedKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey*"
  name: "recoverDeletedKey"
  nameWithType: "KeyClient.recoverDeletedKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse*"
  name: "recoverDeletedKeyWithResponse"
  nameWithType: "KeyClient.recoverDeletedKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.recoverDeletedKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.keys.KeyClient.backupKey*"
  name: "backupKey"
  nameWithType: "KeyClient.backupKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.backupKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.core.http.rest.Response<byte[]>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse*"
  name: "backupKeyWithResponse"
  nameWithType: "KeyClient.backupKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.backupKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.restoreKey*"
  name: "restoreKey"
  nameWithType: "KeyClient.restoreKey"
  fullName: "com.azure.security.keyvault.keys.KeyClient.restoreKey"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse*"
  name: "restoreKeyWithResponse"
  nameWithType: "KeyClient.restoreKeyWithResponse"
  fullName: "com.azure.security.keyvault.keys.KeyClient.restoreKeyWithResponse"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.KeyProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.KeyProperties"
    name: "KeyProperties"
    fullName: "com.azure.security.keyvault.keys.models.KeyProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeys*"
  name: "listKeys"
  nameWithType: "KeyClient.listKeys"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeys"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.keys.models.DeletedKey>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.models.DeletedKey"
    name: "DeletedKey"
    fullName: "com.azure.security.keyvault.keys.models.DeletedKey"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys*"
  name: "listDeletedKeys"
  nameWithType: "KeyClient.listDeletedKeys"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listDeletedKeys"
  package: "com.azure.security.keyvault.keys"
- uid: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions*"
  name: "listKeyVersions"
  nameWithType: "KeyClient.listKeyVersions"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listKeyVersions"
  package: "com.azure.security.keyvault.keys"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.core.http.rest.PagedIterable"
  name: "PagedIterable"
  nameWithType: "PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable"

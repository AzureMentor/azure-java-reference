### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.certificates.CertificateClient"
  id: "CertificateClient"
  parent: "com.azure.security.keyvault.certificates"
  children:
  - "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient(com.azure.security.keyvault.certificates.CertificateAsyncClient)"
  - "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  - "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.util.Map<java.lang.String,java.lang.String>)"
  - "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  - "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(com.azure.security.keyvault.certificates.models.IssuerProperties)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(com.azure.security.keyvault.certificates.models.IssuerProperties,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.importCertificate(com.azure.security.keyvault.certificates.models.CertificateImportOptions)"
  - "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.CertificateImportOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listCertificates()"
  - "com.azure.security.keyvault.certificates.CertificateClient.listCertificates(boolean,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listContacts()"
  - "com.azure.security.keyvault.certificates.CertificateClient.listContacts(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()"
  - "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.listIssuers()"
  - "com.azure.security.keyvault.certificates.CertificateClient.listIssuers(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  - "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(java.lang.String,java.util.List<byte[]>)"
  - "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(java.lang.String,java.util.List<byte[]>,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate(java.lang.String)"
  - "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate(byte[])"
  - "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse(byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>)"
  - "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  - "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "CertificateClient"
  nameWithType: "CertificateClient"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient"
  type: "Class"
  package: "com.azure.security.keyvault.certificates"
  summary: "The CertificateClient provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certifcates</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, merging, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificates</xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificates</xref> for a soft-delete enabled Azure Key Vault.\n\nThe client further allows creating, retrieving, updating, deleting and listing the <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuers</xref>. The client also supports creating, listing and deleting <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref>\n\n**Samples to construct the sync client**\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.instantiation\\}"
  syntax:
    content: "public class CertificateClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient(com.azure.security.keyvault.certificates.CertificateAsyncClient)"
  id: "CertificateClient(com.azure.security.keyvault.certificates.CertificateAsyncClient)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "CertificateClient(CertificateAsyncClient client)"
  nameWithType: "CertificateClient.CertificateClient(CertificateAsyncClient client)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient(CertificateAsyncClient client)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates a CertificateClient that uses `pipeline` to service requests"
  syntax:
    content: " CertificateClient(CertificateAsyncClient client)"
    parameters:
    - id: "client"
      type: "com.azure.security.keyvault.certificates.CertificateAsyncClient"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.CertificateAsyncClient\" data-throw-if-not-resolved=\"false\">CertificateAsyncClient</xref> that the client routes its request through."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(java.lang.String)"
  id: "backupCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "backupCertificate(String name)"
  nameWithType: "CertificateClient.backupCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.backupCertificate\\#string\\}"
  syntax:
    content: "public byte[] backupCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate."
    return:
      type: "byte[]"
      description: "The backed up certificate blob."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "backupCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "backupCertificateWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.backupCertificateWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.\n\n**Code Samples**\n\nBacks up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse\\#String-Context\\}"
  syntax:
    content: "public Response<byte[]> backupCertificateWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<byte[]>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the backed up certificate blob."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String)"
  id: "beginCreateCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "beginCreateCertificate(String name)"
  nameWithType: "CertificateClient.beginCreateCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates a new certificate with the default policy. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createCertificate\\#String-CertificatePolicy\\}"
  syntax:
    content: "public Poller<CertificateOperation,Certificate> beginCreateCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to be created."
    return:
      type: "com.azure.security.keyvault.certificates.Poller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> polling on the create certificate operation status."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  id: "beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "beginCreateCertificate(String name, CertificatePolicy policy)"
  nameWithType: "CertificateClient.beginCreateCertificate(String name, CertificatePolicy policy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String name, CertificatePolicy policy)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createCertificate\\#String-CertificatePolicy\\}"
  syntax:
    content: "public Poller<CertificateOperation,Certificate> beginCreateCertificate(String name, CertificatePolicy policy)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to be created."
    - id: "policy"
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The policy of the certificate to be created."
    return:
      type: "com.azure.security.keyvault.certificates.Poller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> polling on the create certificate operation status."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.util.Map<java.lang.String,java.lang.String>)"
  id: "beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.util.Map<java.lang.String,java.lang.String>)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "beginCreateCertificate(String name, CertificatePolicy policy, Map<String,String> tags)"
  nameWithType: "CertificateClient.beginCreateCertificate(String name, CertificatePolicy policy, Map<String,String> tags)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String name, CertificatePolicy policy, Map<String,String> tags)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createCertificate\\#String-CertificatePolicy-Map\\}"
  syntax:
    content: "public Poller<CertificateOperation,Certificate> beginCreateCertificate(String name, CertificatePolicy policy, Map<String,String> tags)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to be created."
    - id: "policy"
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The policy of the certificate to be created."
    - id: "tags"
      type: "java.util.Map<java.lang.String,java.lang.String>"
      description: "The application specific metadata to set."
    return:
      type: "com.azure.security.keyvault.certificates.Poller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.security.keyvault.certificates.Poller\" data-throw-if-not-resolved=\"false\">Poller</xref> polling on the create certificate operation status."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(java.lang.String)"
  id: "cancelCertificateOperation(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "cancelCertificateOperation(String certificateName)"
  nameWithType: "CertificateClient.cancelCertificateOperation(String certificateName)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation(String certificateName)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation\\#string\\}"
  syntax:
    content: "public CertificateOperation cancelCertificateOperation(String certificateName)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate which is in the process of being created."
    return:
      type: "com.azure.security.keyvault.certificates.models.CertificateOperation"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\">cancelled certificate operation</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "cancelCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "cancelCertificateOperationWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse(String certificateName, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nTriggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the updated certificate operation details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse\\#string\\}"
  syntax:
    content: "public Response<CertificateOperation> cancelCertificateOperationWithResponse(String certificateName, Context context)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate which is in the process of being created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\">cancelled certificate operation</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  id: "createIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "createIssuer(Issuer issuer)"
  nameWithType: "CertificateClient.createIssuer(Issuer issuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(Issuer issuer)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createIssuer\\#issuer\\}"
  syntax:
    content: "public Issuer createIssuer(Issuer issuer)"
    parameters:
    - id: "issuer"
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The configuration of the certificate issuer to be created."
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The created <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(java.lang.String,java.lang.String)"
  id: "createIssuer(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "createIssuer(String name, String provider)"
  nameWithType: "CertificateClient.createIssuer(String name, String provider)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer(String name, String provider)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createIssuer\\#String-String\\}"
  syntax:
    content: "public Issuer createIssuer(String name, String provider)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate issuer to be created."
    - id: "provider"
      type: "java.lang.String"
      description: "The provider of the certificate issuer to be created."
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The created <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  id: "createIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "createIssuerWithResponse(Issuer issuer, Context context)"
  nameWithType: "CertificateClient.createIssuerWithResponse(Issuer issuer, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse(Issuer issuer, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nCreates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse\\#Issuer-Context\\}"
  syntax:
    content: "public Response<Issuer> createIssuerWithResponse(Issuer issuer, Context context)"
    parameters:
    - id: "issuer"
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The configuration of the certificate issuer to be created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the created <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate(java.lang.String)"
  id: "deleteCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteCertificate(String name)"
  nameWithType: "CertificateClient.deleteCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.\n\n**Code Samples**\n\nDeletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate\\#string\\}"
  syntax:
    content: "public DeletedCertificate deleteCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to be deleted."
    return:
      type: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(java.lang.String)"
  id: "deleteCertificateOperation(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteCertificateOperation(String certificateName)"
  nameWithType: "CertificateClient.deleteCertificateOperation(String certificateName)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation(String certificateName)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation\\#string\\}"
  syntax:
    content: "public CertificateOperation deleteCertificateOperation(String certificateName)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate which is in the process of being created."
    return:
      type: "com.azure.security.keyvault.certificates.models.CertificateOperation"
      description: "The deleted <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\">certificate operation</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteCertificateOperationWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteCertificateOperationWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse(String certificateName, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.\n\n**Code Samples**\n\nTriggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Subscribes to the call and prints out the deleted certificate operation details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse\\#string\\}"
  syntax:
    content: "public Response<CertificateOperation> deleteCertificateOperationWithResponse(String certificateName, Context context)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate which is in the process of being created."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateOperation\" data-throw-if-not-resolved=\"false\">deleted certificate operation</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteCertificateWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.deleteCertificateWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.\n\n**Code Samples**\n\nDeletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse\\#String-Context\\}"
  syntax:
    content: "public Response<DeletedCertificate> deleteCertificateWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to be deleted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()"
  id: "deleteContacts()"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteContacts()"
  nameWithType: "CertificateClient.deleteContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts()"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.\n\n**Code Samples**\n\nDeletes the certificate contacts in the Azure Key Vault. Subscribes to the call and prints out the deleted contacts details.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteContacts\\}"
  syntax:
    content: "public PagedIterable<Contact> deleteContacts()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the deleted <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(com.azure.core.util.Context)"
  id: "deleteContacts(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteContacts(Context context)"
  nameWithType: "CertificateClient.deleteContacts(Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts(Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.\n\n**Code Samples**\n\nDeletes the certificate contacts in the Azure Key Vault. Prints out the deleted contacts details in the response.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteContacts\\#context\\}"
  syntax:
    content: "public PagedIterable<Contact> deleteContacts(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the deleted <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(java.lang.String)"
  id: "deleteIssuer(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteIssuer(String name)"
  nameWithType: "CertificateClient.deleteIssuer(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer\\#string\\}"
  syntax:
    content: "public Issuer deleteIssuer(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate issuer to be deleted."
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">deleted issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "deleteIssuerWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.deleteIssuerWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.\n\n**Code Samples**\n\nDeletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse\\#string-context\\}"
  syntax:
    content: "public Response<Issuer> deleteIssuerWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate issuer to be deleted."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">deleted issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  id: "getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificate(CertificateProperties certificateProperties)"
  nameWithType: "CertificateClient.getCertificate(CertificateProperties certificateProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(CertificateProperties certificateProperties)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the certificate which represents the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> from the key vault. This operation requires the certificates/get permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.listCertificates()\" data-throw-if-not-resolved=\"false\">CertificateClient#listCertificates()</xref> and <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">CertificateClient#listCertificateVersions(String)</xref> return the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> as output excluding the properties like secretId and keyId of the certificate. This operation can then be used to get the full certificate with its properties excluding the policy from `certificateProperties`.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificate\\#CertificateProperties\\}"
  syntax:
    content: "public Certificate getCertificate(CertificateProperties certificateProperties)"
    parameters:
    - id: "certificateProperties"
      type: "com.azure.security.keyvault.certificates.models.CertificateProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> holding attributes of the certificate being requested."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(java.lang.String,java.lang.String)"
  id: "getCertificate(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificate(String name, String version)"
  nameWithType: "CertificateClient.getCertificate(String name, String version)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate(String name, String version)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the specified version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the key in the key vault. Prints out the returned certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificate\\#String-String\\}"
  syntax:
    content: "public Certificate getCertificate(String name, String version)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to retrieve, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the certificate to retrieve. If this is an empty String or null, this call is equivalent to calling <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy(java.lang.String)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificateWithPolicy(String)</xref>, with the latest version being retrieved."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(java.lang.String)"
  id: "getCertificatePolicy(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificatePolicy(String name)"
  nameWithType: "CertificateClient.getCertificatePolicy(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy\\#string\\}"
  syntax:
    content: "public CertificatePolicy getCertificatePolicy(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    return:
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">certificate policy</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getCertificatePolicyWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificatePolicyWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.getCertificatePolicyWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.\n\n**Code Samples**\n\nGets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse\\#string\\}"
  syntax:
    content: "public Response<CertificatePolicy> getCertificatePolicyWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate whose policy is to be retrieved, cannot be null"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">certificate policy</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy(java.lang.String)"
  id: "getCertificateWithPolicy(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificateWithPolicy(String name)"
  nameWithType: "CertificateClient.getCertificateWithPolicy(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the key in the key vault. Prints out the returned certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy\\#String\\}"
  syntax:
    content: "public Certificate getCertificateWithPolicy(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to retrieve, cannot be null"
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getCertificateWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getCertificateWithResponse(String name, String version, Context context)"
  nameWithType: "CertificateClient.getCertificateWithResponse(String name, String version, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse(String name, String version, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets a specific version of the key in the key vault. Prints out the returned certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse\\#String-String-Context\\}"
  syntax:
    content: "public Response<Certificate> getCertificateWithResponse(String name, String version, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to retrieve, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the certificate to retrieve. If this is an empty String or null, this call is equivalent to calling <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy(java.lang.String)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificateWithPolicy(String)</xref>, with the latest version being retrieved."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(java.lang.String)"
  id: "getDeletedCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getDeletedCertificate(String name)"
  nameWithType: "CertificateClient.getDeletedCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate\\#string\\}"
  syntax:
    content: "public DeletedCertificate getDeletedCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate."
    return:
      type: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getDeletedCertificateWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.getDeletedCertificateWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.\n\n**Code Samples**\n\nGets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse\\#String-Context\\}"
  syntax:
    content: "public Response<DeletedCertificate> getDeletedCertificateWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(com.azure.security.keyvault.certificates.models.IssuerProperties)"
  id: "getIssuer(com.azure.security.keyvault.certificates.models.IssuerProperties)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getIssuer(IssuerProperties issuerProperties)"
  nameWithType: "CertificateClient.getIssuer(IssuerProperties issuerProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(IssuerProperties issuerProperties)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the certificate issuer which represents the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">IssuerProperties</xref> from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.listIssuers()\" data-throw-if-not-resolved=\"false\">CertificateClient#listIssuers()</xref> return the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> as output excluding the properties like accountId and organization details of the certificate issuer. This operation can then be used to get the full certificate issuer with its properties from `issuerProperties`.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuer\\#issuerProperties\\}"
  syntax:
    content: "public Issuer getIssuer(IssuerProperties issuerProperties)"
    parameters:
    - id: "issuerProperties"
      type: "com.azure.security.keyvault.certificates.models.IssuerProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> holding attributes of the certificate issuer being requested."
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(java.lang.String)"
  id: "getIssuer(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getIssuer(String name)"
  nameWithType: "CertificateClient.getIssuer(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specified certificate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuer\\#string\\}"
  syntax:
    content: "public Issuer getIssuer(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to retrieve, cannot be null"
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The requested <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(com.azure.security.keyvault.certificates.models.IssuerProperties,com.azure.core.util.Context)"
  id: "getIssuerWithResponse(com.azure.security.keyvault.certificates.models.IssuerProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getIssuerWithResponse(IssuerProperties issuerProperties, Context context)"
  nameWithType: "CertificateClient.getIssuerWithResponse(IssuerProperties issuerProperties, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(IssuerProperties issuerProperties, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets information about the certificate issuer which represents the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">IssuerProperties</xref> from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.listIssuers()\" data-throw-if-not-resolved=\"false\">CertificateClient#listIssuers()</xref> return the <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> as output excluding the properties like accountId and organization details of the certificate issuer. This operation can then be used to get the full certificate issuer with its properties from `issuerProperties`.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse\\#issuerProperties-context\\}"
  syntax:
    content: "public Response<Issuer> getIssuerWithResponse(IssuerProperties issuerProperties, Context context)"
    parameters:
    - id: "issuerProperties"
      type: "com.azure.security.keyvault.certificates.models.IssuerProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> holding attributes of the certificate issuer being requested."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getIssuerWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getIssuerWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.getIssuerWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.\n\n**Code Samples**\n\nGets the specificed certifcate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse\\#string-context\\}"
  syntax:
    content: "public Response<Issuer> getIssuerWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate to retrieve, cannot be null"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">certificate issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest(java.lang.String)"
  id: "getPendingCertificateSigningRequest(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getPendingCertificateSigningRequest(String certificateName)"
  nameWithType: "CertificateClient.getPendingCertificateSigningRequest(String certificateName)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest(String certificateName)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets the pending certificate signing request for the specified certificate under pending status.\n\n**Code Samples**\n\nGets the pending signing request of a certificate created with third party issuer. Prints out the returned certificate signing request details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest\\#String\\}"
  syntax:
    content: "public byte[] getPendingCertificateSigningRequest(String certificateName)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "the certificate for whom certifcate signing request is needed"
    return:
      type: "byte[]"
      description: "The cerficate signing request blob."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getPendingCertificateSigningRequestWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "getPendingCertificateSigningRequestWithResponse(String certificateName, Context context)"
  nameWithType: "CertificateClient.getPendingCertificateSigningRequestWithResponse(String certificateName, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse(String certificateName, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Gets the pending certificate signing request for the specified certificate under pending status.\n\n**Code Samples**\n\nGets the pending signing request of a certificate created with third party issuer. Prints out the returned certificate signing request details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse\\#String-Context\\}"
  syntax:
    content: "public Response<byte[]> getPendingCertificateSigningRequestWithResponse(String certificateName, Context context)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "the certificate for whom certifcate signing request is needed"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<byte[]>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the certificate signing request blob."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate(com.azure.security.keyvault.certificates.models.CertificateImportOptions)"
  id: "importCertificate(com.azure.security.keyvault.certificates.models.CertificateImportOptions)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "importCertificate(CertificateImportOptions importOptions)"
  nameWithType: "CertificateClient.importCertificate(CertificateImportOptions importOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate(CertificateImportOptions importOptions)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission."
  syntax:
    content: "public Certificate importCertificate(CertificateImportOptions importOptions)"
    parameters:
    - id: "importOptions"
      type: "com.azure.security.keyvault.certificates.models.CertificateImportOptions"
      description: "The details of the certificate to import to the key vault"
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">imported certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.CertificateImportOptions,com.azure.core.util.Context)"
  id: "importCertificateWithResponse(com.azure.security.keyvault.certificates.models.CertificateImportOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "importCertificateWithResponse(CertificateImportOptions importOptions, Context context)"
  nameWithType: "CertificateClient.importCertificateWithResponse(CertificateImportOptions importOptions, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse(CertificateImportOptions importOptions, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission."
  syntax:
    content: "public Response<Certificate> importCertificateWithResponse(CertificateImportOptions importOptions, Context context)"
    parameters:
    - id: "importOptions"
      type: "com.azure.security.keyvault.certificates.models.CertificateImportOptions"
      description: "The details of the certificate to import to the key vault"
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">imported certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(java.lang.String)"
  id: "listCertificateVersions(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listCertificateVersions(String name)"
  nameWithType: "CertificateClient.listCertificateVersions(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificate(CertificateProperties)</xref>. This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref> with all its properties excluding the policy.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions\\}"
  syntax:
    content: "public PagedIterable<CertificateProperties> listCertificateVersions(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">certificate</xref> of all the versions of the specified certificate in the vault. Paged Iterable is empty if certificate with <code>name</code> does not exist in key vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(java.lang.String,com.azure.core.util.Context)"
  id: "listCertificateVersions(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listCertificateVersions(String name, Context context)"
  nameWithType: "CertificateClient.listCertificateVersions(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificate(CertificateProperties)</xref>. This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref> with all its properties excluding the policy.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions\\#context\\}"
  syntax:
    content: "public PagedIterable<CertificateProperties> listCertificateVersions(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the certificate."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">certificate</xref> of all the versions of the specified certificate in the vault. Iterable is empty if certificate with <code>name</code> does not exist in key vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates()"
  id: "listCertificates()"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listCertificates()"
  nameWithType: "CertificateClient.listCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates()"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificate(CertificateProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref> with all its properties excluding the policy.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listCertificates\\}"
  syntax:
    content: "public PagedIterable<CertificateProperties> listCertificates()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">certificate</xref> for all the certificates in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates(boolean,com.azure.core.util.Context)"
  id: "listCertificates(boolean,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listCertificates(boolean includePending, Context context)"
  nameWithType: "CertificateClient.listCertificates(boolean includePending, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates(boolean includePending, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.\n\nIt is possible to get certificates with all the properties excluding the policy from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getCertificate(com.azure.security.keyvault.certificates.models.CertificateProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getCertificate(CertificateProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">certificate</xref> with all its properties excluding the policy.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listCertificates\\#context\\}"
  syntax:
    content: "public PagedIterable<CertificateProperties> listCertificates(boolean includePending, Context context)"
    parameters:
    - id: "includePending"
      type: "boolean"
      description: "indicate if pending certificates should be included in the results."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">certificate</xref> for all the certificates in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listContacts()"
  id: "listContacts()"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listContacts()"
  nameWithType: "CertificateClient.listContacts()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listContacts()"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.\n\n**Code Samples**\n\nLists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listContacts\\}"
  syntax:
    content: "public PagedIterable<Contact> listContacts()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listContacts(com.azure.core.util.Context)"
  id: "listContacts(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listContacts(Context context)"
  nameWithType: "CertificateClient.listContacts(Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listContacts(Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.\n\n**Code Samples**\n\nLists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details in the response.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listContacts\\#context\\}"
  syntax:
    content: "public PagedIterable<Contact> listContacts(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()"
  id: "listDeletedCertificates()"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listDeletedCertificates()"
  nameWithType: "CertificateClient.listDeletedCertificates()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates()"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates\\}"
  syntax:
    content: "public PagedIterable<DeletedCertificate> listDeletedCertificates()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificates</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(com.azure.core.util.Context)"
  id: "listDeletedCertificates(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listDeletedCertificates(Context context)"
  nameWithType: "CertificateClient.listDeletedCertificates(Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates(Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Lists the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.\n\n**Code Samples**\n\nLists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates\\#context\\}"
  syntax:
    content: "public PagedIterable<DeletedCertificate> listDeletedCertificates(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.DeletedCertificate\" data-throw-if-not-resolved=\"false\">deleted certificates</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers()"
  id: "listIssuers()"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listIssuers()"
  nameWithType: "CertificateClient.listIssuers()"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers()"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">IssuerProperties</xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.\n\nIt is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getIssuer(com.azure.security.keyvault.certificates.models.IssuerProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getIssuer(IssuerProperties issuerProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">issuer</xref> with all its properties.\n\n. \\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listIssuers\\}"
  syntax:
    content: "public PagedIterable<IssuerProperties> listIssuers()"
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">certificate issuers</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers(com.azure.core.util.Context)"
  id: "listIssuers(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "listIssuers(Context context)"
  nameWithType: "CertificateClient.listIssuers(Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers(Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "List all the certificate issuers resources in the key vault. The individual certificate issuer response in the iterable is represented by <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">IssuerProperties</xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.\n\nIt is possible to get the certificate issuer with all of its properties from this information. Loop over the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">issuerProperties</xref> and call <xref uid=\"com.azure.security.keyvault.certificates.CertificateClient.getIssuer(com.azure.security.keyvault.certificates.models.IssuerProperties)\" data-throw-if-not-resolved=\"false\">CertificateClient#getIssuer(IssuerProperties issuerProperties)</xref> . This will return the <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">issuer</xref> with all its properties.\n\n. \\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listIssuers\\#context\\}"
  syntax:
    content: "public PagedIterable<IssuerProperties> listIssuers(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.IssuerProperties\" data-throw-if-not-resolved=\"false\">certificate issuers</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  id: "mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "mergeCertificate(MergeCertificateOptions mergeCertificateConfig)"
  nameWithType: "CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateConfig)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(MergeCertificateOptions mergeCertificateConfig)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate\\#config\\}"
  syntax:
    content: "public Certificate mergeCertificate(MergeCertificateOptions mergeCertificateConfig)"
    parameters:
    - id: "mergeCertificateConfig"
      type: "com.azure.security.keyvault.certificates.models.MergeCertificateOptions"
      description: "the merge certificate configuration holding the x509 certificates."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The merged certificate."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(java.lang.String,java.util.List<byte[]>)"
  id: "mergeCertificate(java.lang.String,java.util.List<byte[]>)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "mergeCertificate(String name, List<byte[]> x509Certificates)"
  nameWithType: "CertificateClient.mergeCertificate(String name, List<byte[]> x509Certificates)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate(String name, List<byte[]> x509Certificates)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate\\#String-List\\}"
  syntax:
    content: "public Certificate mergeCertificate(String name, List<byte[]> x509Certificates)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "the name of the certificate."
    - id: "x509Certificates"
      type: "java.util.List<byte[]>"
      description: "the certificate or certificate chain to merge."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The merged certificate."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)"
  id: "mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateConfig, Context context)"
  nameWithType: "CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateConfig, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateConfig, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse\\#config\\}"
  syntax:
    content: "public Response<Certificate> mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateConfig, Context context)"
    parameters:
    - id: "mergeCertificateConfig"
      type: "com.azure.security.keyvault.certificates.models.MergeCertificateOptions"
      description: "the merge certificate configuration holding the x509 certificates."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the merged certificate."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(java.lang.String,java.util.List<byte[]>,com.azure.core.util.Context)"
  id: "mergeCertificateWithResponse(java.lang.String,java.util.List<byte[]>,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "mergeCertificateWithResponse(String name, List<byte[]> x509Certificates, Context context)"
  nameWithType: "CertificateClient.mergeCertificateWithResponse(String name, List<byte[]> x509Certificates, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse(String name, List<byte[]> x509Certificates, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.\n\n**Code Samples**\n\nMerges a certificate with a kay pair available in the service.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse\\#String-List-Context\\}"
  syntax:
    content: "public Response<Certificate> mergeCertificateWithResponse(String name, List<byte[]> x509Certificates, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "the name of the certificate."
    - id: "x509Certificates"
      type: "java.util.List<byte[]>"
      description: "the certificate or certificate chain to merge."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "The merged certificate."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(java.lang.String)"
  id: "purgeDeletedCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "purgeDeletedCertificate(String name)"
  nameWithType: "CertificateClient.purgeDeletedCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate\\#string\\}"
  syntax:
    content: "public void purgeDeletedCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "purgeDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "purgeDeletedCertificateWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.purgeDeletedCertificateWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.\n\n**Code Samples**\n\nPurges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse\\#string-Context\\}"
  syntax:
    content: "public Response<Void> purgeDeletedCertificateWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<java.lang.Void>"
      description: "A response containing status code and HTTP headers."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate(java.lang.String)"
  id: "recoverDeletedCertificate(java.lang.String)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "recoverDeletedCertificate(String name)"
  nameWithType: "CertificateClient.recoverDeletedCertificate(String name)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate(String name)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.\n\n**Code Samples**\n\nRecovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.certificatevault.certificates.CertificateClient.recoverDeletedCertificate\\#string\\}"
  syntax:
    content: "public Certificate recoverDeletedCertificate(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate to be recovered."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">recovered certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "recoverDeletedCertificateWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "recoverDeletedCertificateWithResponse(String name, Context context)"
  nameWithType: "CertificateClient.recoverDeletedCertificateWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.\n\n**Code Samples**\n\nRecovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.certificatevault.certificates.CertificateClient.recoverDeletedCertificateWithResponse\\#String-Context\\}"
  syntax:
    content: "public Response<Certificate> recoverDeletedCertificateWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted certificate to be recovered."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">recovered certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate(byte[])"
  id: "restoreCertificate(byte[])"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "restoreCertificate(byte[] backup)"
  nameWithType: "CertificateClient.restoreCertificate(byte[] backup)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate(byte[] backup)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate\\#byte\\}"
  syntax:
    content: "public Certificate restoreCertificate(byte[] backup)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the certificate."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">restored certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse(byte[],com.azure.core.util.Context)"
  id: "restoreCertificateWithResponse(byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "restoreCertificateWithResponse(byte[] backup, Context context)"
  nameWithType: "CertificateClient.restoreCertificateWithResponse(byte[] backup, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse(byte[] backup, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.\n\n**Code Samples**\n\nRestores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse\\#byte-Context\\}"
  syntax:
    content: "public Response<Certificate> restoreCertificateWithResponse(byte[] backup, Context context)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the certificate."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.Certificate\" data-throw-if-not-resolved=\"false\">restored certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>)"
  id: "setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "setContacts(List<Contact> contacts)"
  nameWithType: "CertificateClient.setContacts(List<Contact> contacts)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<Contact> contacts)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.setContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeAction\" data-throw-if-not-resolved=\"false\">LifetimeAction</xref> of type <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeActionType.EMAIL_CONTACTS\" data-throw-if-not-resolved=\"false\">LifetimeActionType#EMAIL_CONTACTS</xref> set on a <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">CertificatePolicy</xref> emails the contacts set on the vault when triggered.\n\n**Code Samples**\n\nSets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.setContacts\\#contacts\\}"
  syntax:
    content: "public PagedIterable<Contact> setContacts(List<Contact> contacts)"
    parameters:
    - id: "contacts"
      type: "java.util.List<com.azure.security.keyvault.certificates.models.Contact>"
      description: "The list of contacts to set on the vault."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>,com.azure.core.util.Context)"
  id: "setContacts(java.util.List<com.azure.security.keyvault.certificates.models.Contact>,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "setContacts(List<Contact> contacts, Context context)"
  nameWithType: "CertificateClient.setContacts(List<Contact> contacts, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.setContacts(List<Contact> contacts, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.setContacts*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeAction\" data-throw-if-not-resolved=\"false\">LifetimeAction</xref> of type <xref uid=\"com.azure.security.keyvault.certificates.models.LifetimeActionType.EMAIL_CONTACTS\" data-throw-if-not-resolved=\"false\">LifetimeActionType#EMAIL_CONTACTS</xref> set on a <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">CertificatePolicy</xref> emails the contacts set on the vault when triggered.\n\n**Code Samples**\n\nSets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.setContacts\\#contacts-context\\}"
  syntax:
    content: "public PagedIterable<Contact> setContacts(List<Contact> contacts, Context context)"
    parameters:
    - id: "contacts"
      type: "java.util.List<com.azure.security.keyvault.certificates.models.Contact>"
      description: "The list of contacts to set on the vault."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> containing all of the <xref uid=\"com.azure.security.keyvault.certificates.models.Contact\" data-throw-if-not-resolved=\"false\">certificate contacts</xref> in the vault."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  id: "updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy\\#string\\}"
  syntax:
    content: "public CertificatePolicy updateCertificatePolicy(String certificateName, CertificatePolicy policy)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate whose policy is to be updated."
    - id: "policy"
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The certificate policy to be updated."
    return:
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">certificate policy</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)"
  id: "updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  nameWithType: "CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.\n\n**Code Samples**\n\nGets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse\\#string\\}"
  syntax:
    content: "public Response<CertificatePolicy> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy, Context context)"
    parameters:
    - id: "certificateName"
      type: "java.lang.String"
      description: "The name of the certificate whose policy is to be updated."
    - id: "policy"
      type: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
      description: "The certificate policy to be updated."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the updated <xref uid=\"com.azure.security.keyvault.certificates.models.CertificatePolicy\" data-throw-if-not-resolved=\"false\">certificate policy</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  id: "updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateCertificateProperties(CertificateProperties certificateProperties)"
  nameWithType: "CertificateClient.updateCertificateProperties(CertificateProperties certificateProperties)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties(CertificateProperties certificateProperties)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties\\#CertificateProperties\\}"
  syntax:
    content: "public Certificate updateCertificateProperties(CertificateProperties certificateProperties)"
    parameters:
    - id: "certificateProperties"
      type: "com.azure.security.keyvault.certificates.models.CertificateProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> object with updated properties."
    return:
      type: "com.azure.security.keyvault.certificates.models.Certificate"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">updated certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)"
  id: "updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateCertificatePropertiesWithResponse(CertificateProperties certificateProperties, Context context)"
  nameWithType: "CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties certificateProperties, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse(CertificateProperties certificateProperties, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.\n\n**Code Samples**\n\nGets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse\\#CertificateProperties-Context\\}"
  syntax:
    content: "public Response<Certificate> updateCertificatePropertiesWithResponse(CertificateProperties certificateProperties, Context context)"
    parameters:
    - id: "certificateProperties"
      type: "com.azure.security.keyvault.certificates.models.CertificateProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">CertificateProperties</xref> object with updated properties."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.CertificateProperties\" data-throw-if-not-resolved=\"false\">updated certificate</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  id: "updateIssuer(com.azure.security.keyvault.certificates.models.Issuer)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateIssuer(Issuer issuer)"
  nameWithType: "CertificateClient.updateIssuer(Issuer issuer)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer(Issuer issuer)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateIssuer\\#issuer\\}"
  syntax:
    content: "public Issuer updateIssuer(Issuer issuer)"
    parameters:
    - id: "issuer"
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">issuer</xref> with updated properties."
    return:
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">updated issuer</xref>."
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  id: "updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.Issuer,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.certificates.CertificateClient"
  langs:
  - "java"
  name: "updateIssuerWithResponse(Issuer issuer, Context context)"
  nameWithType: "CertificateClient.updateIssuerWithResponse(Issuer issuer, Context context)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse(Issuer issuer, Context context)"
  overload: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.certificates"
  summary: "Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.\n\n**Code Samples**\n\nGets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.\n\n\\{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse\\#Issuer-Context\\}"
  syntax:
    content: "public Response<Issuer> updateIssuerWithResponse(Issuer issuer, Context context)"
    parameters:
    - id: "issuer"
      type: "com.azure.security.keyvault.certificates.models.Issuer"
      description: "The <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">issuer</xref> with updated properties."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional context that is passed through the Http pipeline during the service call."
    return:
      type: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.Issuer\" data-throw-if-not-resolved=\"false\">updated issuer</xref>."
references:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient"
  name: "CertificateAsyncClient"
  nameWithType: "CertificateAsyncClient"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient*"
  name: "CertificateClient"
  nameWithType: "CertificateClient.CertificateClient"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.CertificateClient"
  package: "com.azure.security.keyvault.certificates"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
  name: "CertificatePolicy"
  nameWithType: "CertificatePolicy"
  fullName: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
- uid: "java.util.Map<java.lang.String,java.lang.String>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.Poller<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate>"
  spec.java:
  - uid: "com.azure.security.keyvault.certificates.Poller"
    name: "Poller"
    fullName: "com.azure.security.keyvault.certificates.Poller"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.CertificateOperation"
    name: "CertificateOperation"
    fullName: "com.azure.security.keyvault.certificates.models.CertificateOperation"
  - name: ","
    fullName: ","
  - uid: "com.azure.security.keyvault.certificates.models.Certificate"
    name: "Certificate"
    fullName: "com.azure.security.keyvault.certificates.models.Certificate"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*"
  name: "beginCreateCertificate"
  nameWithType: "CertificateClient.beginCreateCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.Certificate"
  name: "Certificate"
  nameWithType: "Certificate"
  fullName: "com.azure.security.keyvault.certificates.models.Certificate"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy*"
  name: "getCertificateWithPolicy"
  nameWithType: "CertificateClient.getCertificateWithPolicy"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithPolicy"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.CertificateProperties"
  name: "CertificateProperties"
  nameWithType: "CertificateProperties"
  fullName: "com.azure.security.keyvault.certificates.models.CertificateProperties"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate*"
  name: "getCertificate"
  nameWithType: "CertificateClient.getCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Certificate>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.Certificate"
    name: "Certificate"
    fullName: "com.azure.security.keyvault.certificates.models.Certificate"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse*"
  name: "getCertificateWithResponse"
  nameWithType: "CertificateClient.getCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties*"
  name: "updateCertificateProperties"
  nameWithType: "CertificateClient.updateCertificateProperties"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificateProperties"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse*"
  name: "updateCertificatePropertiesWithResponse"
  nameWithType: "CertificateClient.updateCertificatePropertiesWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePropertiesWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
  name: "DeletedCertificate"
  nameWithType: "DeletedCertificate"
  fullName: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate*"
  name: "deleteCertificate"
  nameWithType: "CertificateClient.deleteCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
    name: "DeletedCertificate"
    fullName: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse*"
  name: "deleteCertificateWithResponse"
  nameWithType: "CertificateClient.deleteCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate*"
  name: "getDeletedCertificate"
  nameWithType: "CertificateClient.getDeletedCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse*"
  name: "getDeletedCertificateWithResponse"
  nameWithType: "CertificateClient.getDeletedCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getDeletedCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate*"
  name: "purgeDeletedCertificate"
  nameWithType: "CertificateClient.purgeDeletedCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<java.lang.Void>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse*"
  name: "purgeDeletedCertificateWithResponse"
  nameWithType: "CertificateClient.purgeDeletedCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate*"
  name: "recoverDeletedCertificate"
  nameWithType: "CertificateClient.recoverDeletedCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse*"
  name: "recoverDeletedCertificateWithResponse"
  nameWithType: "CertificateClient.recoverDeletedCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.recoverDeletedCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate*"
  name: "backupCertificate"
  nameWithType: "CertificateClient.backupCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<byte[]>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse*"
  name: "backupCertificateWithResponse"
  nameWithType: "CertificateClient.backupCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.backupCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate*"
  name: "restoreCertificate"
  nameWithType: "CertificateClient.restoreCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse*"
  name: "restoreCertificateWithResponse"
  nameWithType: "CertificateClient.restoreCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.restoreCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.CertificateProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.CertificateProperties"
    name: "CertificateProperties"
    fullName: "com.azure.security.keyvault.certificates.models.CertificateProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates*"
  name: "listCertificates"
  nameWithType: "CertificateClient.listCertificates"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificates"
  package: "com.azure.security.keyvault.certificates"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.DeletedCertificate>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
    name: "DeletedCertificate"
    fullName: "com.azure.security.keyvault.certificates.models.DeletedCertificate"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates*"
  name: "listDeletedCertificates"
  nameWithType: "CertificateClient.listDeletedCertificates"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listDeletedCertificates"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions*"
  name: "listCertificateVersions"
  nameWithType: "CertificateClient.listCertificateVersions"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listCertificateVersions"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy*"
  name: "getCertificatePolicy"
  nameWithType: "CertificateClient.getCertificatePolicy"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicy"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
    name: "CertificatePolicy"
    fullName: "com.azure.security.keyvault.certificates.models.CertificatePolicy"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse*"
  name: "getCertificatePolicyWithResponse"
  nameWithType: "CertificateClient.getCertificatePolicyWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getCertificatePolicyWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy*"
  name: "updateCertificatePolicy"
  nameWithType: "CertificateClient.updateCertificatePolicy"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicy"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse*"
  name: "updateCertificatePolicyWithResponse"
  nameWithType: "CertificateClient.updateCertificatePolicyWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateCertificatePolicyWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.Issuer"
  name: "Issuer"
  nameWithType: "Issuer"
  fullName: "com.azure.security.keyvault.certificates.models.Issuer"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer*"
  name: "createIssuer"
  nameWithType: "CertificateClient.createIssuer"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuer"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.Issuer>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.Issuer"
    name: "Issuer"
    fullName: "com.azure.security.keyvault.certificates.models.Issuer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse*"
  name: "createIssuerWithResponse"
  nameWithType: "CertificateClient.createIssuerWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.createIssuerWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse*"
  name: "getIssuerWithResponse"
  nameWithType: "CertificateClient.getIssuerWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer*"
  name: "getIssuer"
  nameWithType: "CertificateClient.getIssuer"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getIssuer"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.IssuerProperties"
  name: "IssuerProperties"
  nameWithType: "IssuerProperties"
  fullName: "com.azure.security.keyvault.certificates.models.IssuerProperties"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse*"
  name: "deleteIssuerWithResponse"
  nameWithType: "CertificateClient.deleteIssuerWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer*"
  name: "deleteIssuer"
  nameWithType: "CertificateClient.deleteIssuer"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteIssuer"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.IssuerProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.IssuerProperties"
    name: "IssuerProperties"
    fullName: "com.azure.security.keyvault.certificates.models.IssuerProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers*"
  name: "listIssuers"
  nameWithType: "CertificateClient.listIssuers"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listIssuers"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer*"
  name: "updateIssuer"
  nameWithType: "CertificateClient.updateIssuer"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuer"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse*"
  name: "updateIssuerWithResponse"
  nameWithType: "CertificateClient.updateIssuerWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.updateIssuerWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "java.util.List<com.azure.security.keyvault.certificates.models.Contact>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.Contact"
    name: "Contact"
    fullName: "com.azure.security.keyvault.certificates.models.Contact"
  - name: ">"
    fullName: ">"
- uid: "com.azure.core.http.rest.PagedIterable<com.azure.security.keyvault.certificates.models.Contact>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedIterable"
    name: "PagedIterable"
    fullName: "com.azure.core.http.rest.PagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.Contact"
    name: "Contact"
    fullName: "com.azure.security.keyvault.certificates.models.Contact"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.setContacts*"
  name: "setContacts"
  nameWithType: "CertificateClient.setContacts"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.setContacts"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.listContacts*"
  name: "listContacts"
  nameWithType: "CertificateClient.listContacts"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.listContacts"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts*"
  name: "deleteContacts"
  nameWithType: "CertificateClient.deleteContacts"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteContacts"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.CertificateOperation"
  name: "CertificateOperation"
  nameWithType: "CertificateOperation"
  fullName: "com.azure.security.keyvault.certificates.models.CertificateOperation"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation*"
  name: "deleteCertificateOperation"
  nameWithType: "CertificateClient.deleteCertificateOperation"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperation"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>"
  spec.java:
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.certificates.models.CertificateOperation"
    name: "CertificateOperation"
    fullName: "com.azure.security.keyvault.certificates.models.CertificateOperation"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse*"
  name: "deleteCertificateOperationWithResponse"
  nameWithType: "CertificateClient.deleteCertificateOperationWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateOperationWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation*"
  name: "cancelCertificateOperation"
  nameWithType: "CertificateClient.cancelCertificateOperation"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse*"
  name: "cancelCertificateOperationWithResponse"
  nameWithType: "CertificateClient.cancelCertificateOperationWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperationWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest*"
  name: "getPendingCertificateSigningRequest"
  nameWithType: "CertificateClient.getPendingCertificateSigningRequest"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequest"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse*"
  name: "getPendingCertificateSigningRequestWithResponse"
  nameWithType: "CertificateClient.getPendingCertificateSigningRequestWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.getPendingCertificateSigningRequestWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "java.util.List<byte[]>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate*"
  name: "mergeCertificate"
  nameWithType: "CertificateClient.mergeCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse*"
  name: "mergeCertificateWithResponse"
  nameWithType: "CertificateClient.mergeCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.mergeCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.models.MergeCertificateOptions"
  name: "MergeCertificateOptions"
  nameWithType: "MergeCertificateOptions"
  fullName: "com.azure.security.keyvault.certificates.models.MergeCertificateOptions"
- uid: "com.azure.security.keyvault.certificates.models.CertificateImportOptions"
  name: "CertificateImportOptions"
  nameWithType: "CertificateImportOptions"
  fullName: "com.azure.security.keyvault.certificates.models.CertificateImportOptions"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate*"
  name: "importCertificate"
  nameWithType: "CertificateClient.importCertificate"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificate"
  package: "com.azure.security.keyvault.certificates"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse*"
  name: "importCertificateWithResponse"
  nameWithType: "CertificateClient.importCertificateWithResponse"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.importCertificateWithResponse"
  package: "com.azure.security.keyvault.certificates"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.String,java.lang.String"
  name: "String,String"
  nameWithType: "String,String"
  fullName: "java.lang.String,java.lang.String"
- uid: "com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate"
  name: "CertificateOperation,Certificate"
  nameWithType: "CertificateOperation,Certificate"
  fullName: "com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.Certificate"
- uid: "com.azure.security.keyvault.certificates.Poller"
  name: "Poller"
  nameWithType: "Poller"
  fullName: "com.azure.security.keyvault.certificates.Poller"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.core.http.rest.PagedIterable"
  name: "PagedIterable"
  nameWithType: "PagedIterable"
  fullName: "com.azure.core.http.rest.PagedIterable"
- uid: "com.azure.security.keyvault.certificates.models.Contact"
  name: "Contact"
  nameWithType: "Contact"
  fullName: "com.azure.security.keyvault.certificates.models.Contact"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"

### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  id: "SecretAsyncClient"
  parent: "com.azure.security.keyvault.secrets"
  children:
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.ACCEPT_LANGUAGE"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.API_VERSION"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.CONTENT_TYPE_HEADER_VALUE"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.DEFAULT_MAX_PAGE_RESULTS"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.KEY_VAULT_SCOPE"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets()"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets(com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret(byte[])"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[])"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  - "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "SecretAsyncClient"
  nameWithType: "SecretAsyncClient"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  type: "Class"
  package: "com.azure.security.keyvault.secrets"
  summary: "The SecretAsyncClient provides asynchronous methods to manage <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secrets</xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.\n\n**Samples to construct the async client**\n\n\\{@codesnippet com.azure.security.keyvault.secrets.async.secretclient.construct\\}"
  syntax:
    content: "public final class SecretAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.ACCEPT_LANGUAGE"
  id: "ACCEPT_LANGUAGE"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "ACCEPT_LANGUAGE"
  nameWithType: "SecretAsyncClient.ACCEPT_LANGUAGE"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.ACCEPT_LANGUAGE"
  type: "Field"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: "static final String ACCEPT_LANGUAGE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.API_VERSION"
  id: "API_VERSION"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "API_VERSION"
  nameWithType: "SecretAsyncClient.API_VERSION"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.API_VERSION"
  type: "Field"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: "static final String API_VERSION"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.CONTENT_TYPE_HEADER_VALUE"
  id: "CONTENT_TYPE_HEADER_VALUE"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "CONTENT_TYPE_HEADER_VALUE"
  nameWithType: "SecretAsyncClient.CONTENT_TYPE_HEADER_VALUE"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.CONTENT_TYPE_HEADER_VALUE"
  type: "Field"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: "static final String CONTENT_TYPE_HEADER_VALUE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.DEFAULT_MAX_PAGE_RESULTS"
  id: "DEFAULT_MAX_PAGE_RESULTS"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "DEFAULT_MAX_PAGE_RESULTS"
  nameWithType: "SecretAsyncClient.DEFAULT_MAX_PAGE_RESULTS"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.DEFAULT_MAX_PAGE_RESULTS"
  type: "Field"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: "static final int DEFAULT_MAX_PAGE_RESULTS"
    return:
      type: "int"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.KEY_VAULT_SCOPE"
  id: "KEY_VAULT_SCOPE"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "KEY_VAULT_SCOPE"
  nameWithType: "SecretAsyncClient.KEY_VAULT_SCOPE"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.KEY_VAULT_SCOPE"
  type: "Field"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: "static final String KEY_VAULT_SCOPE"
    return:
      type: "java.lang.String"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline)"
  id: "SecretAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "SecretAsyncClient(URL endpoint, HttpPipeline pipeline)"
  nameWithType: "SecretAsyncClient.SecretAsyncClient(URL endpoint, HttpPipeline pipeline)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient(URL endpoint, HttpPipeline pipeline)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.secrets"
  summary: "Creates a SecretAsyncClient that uses `pipeline` to service requests"
  syntax:
    content: " SecretAsyncClient(URL endpoint, HttpPipeline pipeline)"
    parameters:
    - id: "endpoint"
      type: "java.net.URL"
      description: "URL for the Azure KeyVault service."
    - id: "pipeline"
      type: "com.azure.core.http.HttpPipeline"
      description: "HttpPipeline that the HTTP requests and responses flow through."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(java.lang.String)"
  id: "backupSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "backupSecret(String name)"
  nameWithType: "SecretAsyncClient.backupSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Requests a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code Samples**\n\nBacks up the secret from the key vault. Subscribes to the call asynchronously and prints out the length of the secret's backup byte array returned in the response.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.backupSecret\\#string\\}"
  syntax:
    content: "public Mono<byte[]> backupSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "reactor.core.publisher.Mono<byte[]>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the backed up secret blob."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String)"
  id: "backupSecretWithResponse(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "backupSecretWithResponse(String name)"
  nameWithType: "SecretAsyncClient.backupSecretWithResponse(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Requests a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code Samples**\n\nBacks up the secret from the key vault. Subscribes to the call asynchronously and prints out the length of the secret's backup byte array returned in the response.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.backupSecretWithResponse\\#string\\}"
  syntax:
    content: "public Mono<Response<byte[]>> backupSecretWithResponse(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref>\n     contains the backed up secret blob."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "backupSecretWithResponse(String name, Context context)"
  nameWithType: "SecretAsyncClient.backupSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<byte[]>> backupSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret(java.lang.String)"
  id: "deleteSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "deleteSecret(String name)"
  nameWithType: "SecretAsyncClient.deleteSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and requires to be purged for permanent deletion else the secret is permanently deleted. The delete operation applies to any secret stored in Azure Key Vault but it cannot be applied to an individual version of a secret. This operation requires the `secrets/delete` permission.\n\n**Code Samples**\n\nDeletes the secret in the Azure Key Vault. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.deleteSecret\\#string\\}"
  syntax:
    content: "public Mono<DeletedSecret> deleteSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret to be deleted."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(java.lang.String)"
  id: "deleteSecretWithResponse(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "deleteSecretWithResponse(String name)"
  nameWithType: "SecretAsyncClient.deleteSecretWithResponse(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and requires to be purged for permanent deletion else the secret is permanently deleted. The delete operation applies to any secret stored in Azure Key Vault but it cannot be applied to an individual version of a secret. This operation requires the `secrets/delete` permission.\n\n**Code Samples**\n\nDeletes the secret in the Azure Key Vault. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.deleteSecretWithResponse\\#string\\}"
  syntax:
    content: "public Mono<Response<DeletedSecret>> deleteSecretWithResponse(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret to be deleted."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "deleteSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "deleteSecretWithResponse(String name, Context context)"
  nameWithType: "SecretAsyncClient.deleteSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<DeletedSecret>> deleteSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(java.lang.String)"
  id: "getDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getDeletedSecret(String name)"
  nameWithType: "SecretAsyncClient.getDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The get deleted secret operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nGets the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.getDeletedSecret\\#string\\}"
  syntax:
    content: "public Mono<DeletedSecret> getDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String)"
  id: "getDeletedSecretWithResponse(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getDeletedSecretWithResponse(String name)"
  nameWithType: "SecretAsyncClient.getDeletedSecretWithResponse(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The get deleted secret operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nGets the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the deleted secret details when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.getDeletedSecretWithResponse\\#string\\}"
  syntax:
    content: "public Mono<Response<DeletedSecret>> getDeletedSecretWithResponse(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the\n     <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretAsyncClient.getDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<DeletedSecret>> getDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecret(SecretProperties secretProperties)"
  nameWithType: "SecretAsyncClient.getSecret(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the secret which represents <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secretProperties</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#listSecretVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> as output. This operation can then be used to get the full secret with its value from `secretProperties`.\n\n**Code Samples**\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.getSecret\\#secretProperties\\}"
  syntax:
    content: "public Mono<Secret> getSecret(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> holding attributes of the secret being\n     requested."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)"
  id: "getSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecret(String name)"
  nameWithType: "SecretAsyncClient.getSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets latest version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.getSecret\\#string\\}"
  syntax:
    content: "public Mono<Secret> getSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String,java.lang.String)"
  id: "getSecret(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecret(String name, String version)"
  nameWithType: "SecretAsyncClient.getSecret(String name, String version)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(String name, String version)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the specified secret with specified version from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.getSecret\\#string-string\\}"
  syntax:
    content: "public Mono<Secret> getSecret(String name, String version)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the secret to retrieve. If this is an empty String or null, this\n     call is equivalent to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getSecret(String)</xref>, with the latest version being\n     retrieved."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref>\n     contains the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecretWithResponse(SecretProperties secretProperties)"
  nameWithType: "SecretAsyncClient.getSecretWithResponse(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the secret which represents <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secretProperties</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\nThe list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String)\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#listSecretVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> as output. This operation can then be used to get the full secret with its value from `secretProperties`.\n\n**Code Samples**\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.getSecretWithResponse\\#secretProperties\\}"
  syntax:
    content: "public Mono<Response<Secret>> getSecretWithResponse(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> holding attributes of the secret being\n     requested."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
      description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  id: "getSecretWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecretWithResponse(SecretProperties secretProperties, Context context)"
  nameWithType: "SecretAsyncClient.getSecretWithResponse(SecretProperties secretProperties, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(SecretProperties secretProperties, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> getSecretWithResponse(SecretProperties secretProperties, Context context)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String)"
  id: "getSecretWithResponse(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecretWithResponse(String name, String version)"
  nameWithType: "SecretAsyncClient.getSecretWithResponse(String name, String version)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(String name, String version)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Get the specified secret with specified version from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the `secrets/get` permission.\n\n**Code Samples**\n\nGets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.getSecretWithResponse\\#string-string\\}"
  syntax:
    content: "public Mono<Response<Secret>> getSecretWithResponse(String name, String version)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret, cannot be null"
    - id: "version"
      type: "java.lang.String"
      description: "The version of the secret to retrieve. If this is an empty String or null, this call is equivalent\n     to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\">#getSecret(String)</xref>, with the latest version being retrieved."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested\n     <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "getSecretWithResponse(String name, String version, Context context)"
  nameWithType: "SecretAsyncClient.getSecretWithResponse(String name, String version, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(String name, String version, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> getSecretWithResponse(String name, String version, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "version"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()"
  id: "listDeletedSecrets()"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listDeletedSecrets()"
  nameWithType: "SecretAsyncClient.listDeletedSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets()"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> of the key vault. The get deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nLists the deleted secrets in the key vault. Subscribes to the call asynchronously and prints out the recovery id of each deleted secret when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.listDeletedSecrets\\}"
  syntax:
    content: "public PagedFlux<DeletedSecret> listDeletedSecrets()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.DeletedSecret>"
      description: "A <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing all of the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> in the vault."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets(com.azure.core.util.Context)"
  id: "listDeletedSecrets(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listDeletedSecrets(Context context)"
  nameWithType: "SecretAsyncClient.listDeletedSecrets(Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets(Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " PagedFlux<DeletedSecret> listDeletedSecrets(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.DeletedSecret>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String)"
  id: "listSecretVersions(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listSecretVersions(String name)"
  nameWithType: "SecretAsyncClient.listSecretVersions(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List all versions of the specified secret. The individual secret response in the flux is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values are not provided in the response. This operation requires the `secrets/list` permission.\n\nIt is possible to get the Secret with value of all the versions from this information. Convert the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref> using <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#getSecret(SecretProperties secretProperties)</xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux#flatMap(Function)</xref>.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.listSecretVersions\\#string\\}"
  syntax:
    content: "public PagedFlux<SecretProperties> listSecretVersions(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> of all the versions of the specified secret in\n     the vault. Flux is empty if secret with <code>name</code> does not exist in key vault"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  id: "listSecretVersions(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listSecretVersions(String name, Context context)"
  nameWithType: "SecretAsyncClient.listSecretVersions(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " PagedFlux<SecretProperties> listSecretVersions(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets()"
  id: "listSecrets()"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listSecrets()"
  nameWithType: "SecretAsyncClient.listSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets()"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "List secrets in the key vault. The list Secrets operation is applicable to the entire vault. The individual secret response in the flux is represented by <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">SecretProperties</xref> as only the secret identifier and its attributes are provided in the response. The secret values and individual secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code Samples**\n\nIt is possible to get full Secrets with values from this information. Convert the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> to <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">secret</xref> using <xref uid=\"com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret(com.azure.security.keyvault.secrets.models.SecretProperties)\" data-throw-if-not-resolved=\"false\">SecretAsyncClient#getSecret(SecretProperties secretProperties)</xref> within <xref uid=\"\" data-throw-if-not-resolved=\"false\">Flux#flatMap(Function)</xref>.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.listSecrets\\}"
  syntax:
    content: "public PagedFlux<SecretProperties> listSecrets()"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "A <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\">PagedFlux</xref> containing <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret</xref> of all the secrets in the vault."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets(com.azure.core.util.Context)"
  id: "listSecrets(com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "listSecrets(Context context)"
  nameWithType: "SecretAsyncClient.listSecrets(Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets(Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " PagedFlux<SecretProperties> listSecrets(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(java.lang.String)"
  id: "purgeDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "purgeDeletedSecret(String name)"
  nameWithType: "SecretAsyncClient.purgeDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the `secrets/purge` permission.\n\n**Code Samples**\n\nPurges the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the status code from the server response when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.purgeDeletedSecret\\#string\\}"
  syntax:
    content: "public Mono<Void> purgeDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "An empty <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String)"
  id: "purgeDeletedSecretWithResponse(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "purgeDeletedSecretWithResponse(String name)"
  nameWithType: "SecretAsyncClient.purgeDeletedSecretWithResponse(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the `secrets/purge` permission.\n\n**Code Samples**\n\nPurges the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the status code from the server response when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.purgeDeletedSecretWithResponse\\#string\\}"
  syntax:
    content: "public Mono<Response<Void>> purgeDeletedSecretWithResponse(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a Response containing status code and HTTP headers."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "purgeDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretAsyncClient.purgeDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Void>> purgeDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret(java.lang.String)"
  id: "recoverDeletedSecret(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "recoverDeletedSecret(String name)"
  nameWithType: "SecretAsyncClient.recoverDeletedSecret(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Recovers the deleted secret in the key vault to its latest version and can only be performed on a soft-delete enabled vault. This operation requires the `secrets/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the recovered secret details when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.recoverDeletedSecret\\#string\\}"
  syntax:
    content: "public Mono<Secret> recoverDeletedSecret(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret to be recovered."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">recovered secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(java.lang.String)"
  id: "recoverDeletedSecretWithResponse(java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "recoverDeletedSecretWithResponse(String name)"
  nameWithType: "SecretAsyncClient.recoverDeletedSecretWithResponse(String name)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(String name)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Recovers the deleted secret in the key vault to its latest version and can only be performed on a soft-delete enabled vault. This operation requires the `secrets/recover` permission.\n\n**Code Samples**\n\nRecovers the deleted secret from the key vault enabled for soft-delete. Subscribes to the call asynchronously and prints out the recovered secret details when a response is received.\n\n//Assuming secret is deleted on a soft-delete enabled vault. \\{@codesnippet com.azure.keyvault.secrets.secretclient.recoverDeletedSecretWithResponse\\#string\\}"
  syntax:
    content: "public Mono<Response<Secret>> recoverDeletedSecretWithResponse(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the deleted secret to be recovered."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">recovered secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  id: "recoverDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "recoverDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretAsyncClient.recoverDeletedSecretWithResponse(String name, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse(String name, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> recoverDeletedSecretWithResponse(String name, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret(byte[])"
  id: "restoreSecret(byte[])"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "restoreSecret(byte[] backup)"
  nameWithType: "SecretAsyncClient.restoreSecret(byte[] backup)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret(byte[] backup)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code Samples**\n\nRestores the secret in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored secret details when a response is received.\n\n//Pass the Secret Backup Byte array to the restore operation. \\{@codesnippet com.azure.keyvault.secrets.secretclient.restoreSecret\\#byte\\}"
  syntax:
    content: "public Mono<Secret> restoreSecret(byte[] backup)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">restored secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[])"
  id: "restoreSecretWithResponse(byte[])"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "restoreSecretWithResponse(byte[] backup)"
  nameWithType: "SecretAsyncClient.restoreSecretWithResponse(byte[] backup)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[] backup)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code Samples**\n\nRestores the secret in the key vault from its backup. Subscribes to the call asynchronously and prints out the restored secret details when a response is received.\n\n//Pass the Secret Backup Byte array to the restore operation. \\{@codesnippet com.azure.keyvault.secrets.secretclient.restoreSecretWithResponse\\#byte\\}"
  syntax:
    content: "public Mono<Response<Secret>> restoreSecretWithResponse(byte[] backup)"
    parameters:
    - id: "backup"
      type: "byte[]"
      description: "The backup blob associated with the secret."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref>\n     contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">restored secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  id: "restoreSecretWithResponse(byte[],com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "restoreSecretWithResponse(byte[] backup, Context context)"
  nameWithType: "SecretAsyncClient.restoreSecretWithResponse(byte[] backup, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse(byte[] backup, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> restoreSecretWithResponse(byte[] backup, Context context)"
    parameters:
    - id: "backup"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  id: "setSecret(com.azure.security.keyvault.secrets.models.Secret)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "setSecret(Secret secret)"
  nameWithType: "SecretAsyncClient.setSecret(Secret secret)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(Secret secret)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the key vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">Secret</xref> is required. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpires()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\">contentType</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `secret` are optional. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by key vault, if not specified.\n\n**Code Samples**\n\nCreates a new secret which activates in 1 day and expires in 1 year in the Azure Key Vault. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.setSecret\\#secret\\}"
  syntax:
    content: "public Mono<Secret> setSecret(Secret secret)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The Secret object containing information about the secret and its properties. The properties\n     secret.name and secret.value must be non null."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)"
  id: "setSecret(java.lang.String,java.lang.String)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "setSecret(String name, String value)"
  nameWithType: "SecretAsyncClient.setSecret(String name, String value)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(String name, String value)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the key vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the `secrets/set` permission.\n\n**Code Samples**\n\nCreates a new secret in the key vault. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.setSecret\\#string-string\\}"
  syntax:
    content: "public Mono<Secret> setSecret(String name, String value)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "The name of the secret. It is required and cannot be null."
    - id: "value"
      type: "java.lang.String"
      description: "The value of the secret. It is required and cannot be null."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret)"
  id: "setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "setSecretWithResponse(Secret secret)"
  nameWithType: "SecretAsyncClient.setSecretWithResponse(Secret secret)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(Secret secret)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "The set operation adds a secret to the key vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">Secret</xref> is required. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpires()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\">contentType</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in `secret` are optional. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by key vault, if not specified.\n\n**Code Samples**\n\nCreates a new secret which activates in 1 day and expires in 1 year in the Azure Key Vault. Subscribes to the call asynchronously and prints out the newly created secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.setSecretWithResponse\\#secret\\}"
  syntax:
    content: "public Mono<Response<Secret>> setSecretWithResponse(Secret secret)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.secrets.models.Secret"
      description: "The Secret object containing information about the secret and its properties. The properties\n     secret.name and secret.value must be non null."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.Secret\" data-throw-if-not-resolved=\"false\">created secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  id: "setSecretWithResponse(com.azure.security.keyvault.secrets.models.Secret,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "setSecretWithResponse(Secret secret, Context context)"
  nameWithType: "SecretAsyncClient.setSecretWithResponse(Secret secret, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(Secret secret, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> setSecretWithResponse(Secret secret, Context context)"
    parameters:
    - id: "secret"
      type: "com.azure.security.keyvault.secrets.models.Secret"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "setSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "setSecretWithResponse(String name, String value, Context context)"
  nameWithType: "SecretAsyncClient.setSecretWithResponse(String name, String value, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse(String name, String value, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<Secret>> setSecretWithResponse(String name, String value, Context context)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    - id: "value"
      type: "java.lang.String"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "updateSecretProperties(SecretProperties secretProperties)"
  nameWithType: "SecretAsyncClient.updateSecretProperties(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Updates the attributes associated with the specified secret, but not the value of the specified secret in the key vault. The update operation changes specified attributes of an existing stored secret and attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the `secrets/set` permission.\n\n**Code Samples**\n\nGets latest version of the secret, changes its notBefore time and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.updateSecretProperties\\#secretProperties\\}\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\">version</xref> cannot be null."
  syntax:
    content: "public Mono<SecretProperties> updateSecretProperties(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> object with updated properties."
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.SecretProperties>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">updated secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  id: "updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "updateSecretPropertiesWithResponse(SecretProperties secretProperties)"
  nameWithType: "SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  summary: "Updates the attributes associated with the specified secret, but not the value of the specified secret in the key vault. The update operation changes specified attributes of an existing stored secret and attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the `secrets/set` permission.\n\n**Code Samples**\n\nGets latest version of the secret, changes its notBefore time and then updates it in the Azure Key Vault. Subscribes to the call asynchronously and prints out the returned secret details when a response is received.\n\n\\{@codesnippet com.azure.keyvault.secrets.secretclient.updateSecretPropertiesWithResponse\\#secretProperties\\}\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\">version</xref> cannot be null."
  syntax:
    content: "public Mono<Response<SecretProperties>> updateSecretPropertiesWithResponse(SecretProperties secretProperties)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
      description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">secret properties</xref> object with updated properties."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>>"
      description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"\" data-throw-if-not-resolved=\"false\">value</xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\">updated secret</xref>."
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  id: "updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  parent: "com.azure.security.keyvault.secrets.SecretAsyncClient"
  langs:
  - "java"
  name: "updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  nameWithType: "SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  overload: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse*"
  type: "Method"
  package: "com.azure.security.keyvault.secrets"
  syntax:
    content: " Mono<Response<SecretProperties>> updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
    parameters:
    - id: "secretProperties"
      type: "com.azure.security.keyvault.secrets.models.SecretProperties"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>>"
references:
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient*"
  name: "SecretAsyncClient"
  nameWithType: "SecretAsyncClient.SecretAsyncClient"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.SecretAsyncClient"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.models.Secret"
  name: "Secret"
  nameWithType: "Secret"
  fullName: "com.azure.security.keyvault.secrets.models.Secret"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.Secret>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.Secret"
    name: "Secret"
    fullName: "com.azure.security.keyvault.secrets.models.Secret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*"
  name: "setSecret"
  nameWithType: "SecretAsyncClient.setSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.Secret>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.Secret"
    name: "Secret"
    fullName: "com.azure.security.keyvault.secrets.models.Secret"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse*"
  name: "setSecretWithResponse"
  nameWithType: "SecretAsyncClient.setSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.setSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret*"
  name: "getSecret"
  nameWithType: "SecretAsyncClient.getSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*"
  name: "getSecretWithResponse"
  nameWithType: "SecretAsyncClient.getSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
  name: "SecretProperties"
  nameWithType: "SecretProperties"
  fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.SecretProperties>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
    name: "SecretProperties"
    fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties*"
  name: "updateSecretProperties"
  nameWithType: "SecretAsyncClient.updateSecretProperties"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretProperties"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.SecretProperties>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
    name: "SecretProperties"
    fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse*"
  name: "updateSecretPropertiesWithResponse"
  nameWithType: "SecretAsyncClient.updateSecretPropertiesWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.updateSecretPropertiesWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.secrets.models.DeletedSecret>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
    name: "DeletedSecret"
    fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret*"
  name: "deleteSecret"
  nameWithType: "SecretAsyncClient.deleteSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.secrets.models.DeletedSecret>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
    name: "DeletedSecret"
    fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse*"
  name: "deleteSecretWithResponse"
  nameWithType: "SecretAsyncClient.deleteSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.deleteSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret*"
  name: "getDeletedSecret"
  nameWithType: "SecretAsyncClient.getDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse*"
  name: "getDeletedSecretWithResponse"
  nameWithType: "SecretAsyncClient.getDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.getDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret*"
  name: "purgeDeletedSecret"
  nameWithType: "SecretAsyncClient.purgeDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse*"
  name: "purgeDeletedSecretWithResponse"
  nameWithType: "SecretAsyncClient.purgeDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.purgeDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret*"
  name: "recoverDeletedSecret"
  nameWithType: "SecretAsyncClient.recoverDeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse*"
  name: "recoverDeletedSecretWithResponse"
  nameWithType: "SecretAsyncClient.recoverDeletedSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.recoverDeletedSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<byte[]>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret*"
  name: "backupSecret"
  nameWithType: "SecretAsyncClient.backupSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse*"
  name: "backupSecretWithResponse"
  nameWithType: "SecretAsyncClient.backupSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.backupSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret*"
  name: "restoreSecret"
  nameWithType: "SecretAsyncClient.restoreSecret"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecret"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse*"
  name: "restoreSecretWithResponse"
  nameWithType: "SecretAsyncClient.restoreSecretWithResponse"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.restoreSecretWithResponse"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.SecretProperties>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.SecretProperties"
    name: "SecretProperties"
    fullName: "com.azure.security.keyvault.secrets.models.SecretProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets*"
  name: "listSecrets"
  nameWithType: "SecretAsyncClient.listSecrets"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecrets"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.secrets.models.DeletedSecret>"
  spec.java:
  - uid: "com.azure.core.http.rest.PagedFlux"
    name: "PagedFlux"
    fullName: "com.azure.core.http.rest.PagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
    name: "DeletedSecret"
    fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets*"
  name: "listDeletedSecrets"
  nameWithType: "SecretAsyncClient.listDeletedSecrets"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listDeletedSecrets"
  package: "com.azure.security.keyvault.secrets"
- uid: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions*"
  name: "listSecretVersions"
  nameWithType: "SecretAsyncClient.listSecretVersions"
  fullName: "com.azure.security.keyvault.secrets.SecretAsyncClient.listSecretVersions"
  package: "com.azure.security.keyvault.secrets"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "com.azure.security.keyvault.secrets.models.DeletedSecret"
  name: "DeletedSecret"
  nameWithType: "DeletedSecret"
  fullName: "com.azure.security.keyvault.secrets.models.DeletedSecret"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "com.azure.core.http.rest.PagedFlux"
  name: "PagedFlux"
  nameWithType: "PagedFlux"
  fullName: "com.azure.core.http.rest.PagedFlux"
